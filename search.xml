<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue-核心-组件化编程-依赖脚手架：两万五千字精华总结</title>
      <link href="/posts/25210.html"/>
      <url>/posts/25210.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue组件化编程-components"><a href="#Vue组件化编程-components" class="headerlink" title="Vue组件化编程 components"></a>Vue组件化编程 components</h2><h3 id="传统方式编写应用的弊端"><a href="#传统方式编写应用的弊端" class="headerlink" title="传统方式编写应用的弊端"></a>传统方式编写应用的弊端</h3><ul><li>引用导致依赖关系混乱，难以维护</li><li>html中的代码复用率不高</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111848285.png"></p><h3 id="组件式编写应用"><a href="#组件式编写应用" class="headerlink" title="组件式编写应用"></a>组件式编写应用</h3><ul><li>组件的概念：实现应用中局部功能代码和资源的集合</li><li>组件不仅可以放css，html，js，还可以放mp4，mp3，文字格式等等</li><li>组件的作用：复用编码，简化项目编码，提高运行效率</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111852002.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111904053.png"></p><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><h3 id="使用组件的步骤"><a href="#使用组件的步骤" class="headerlink" title="使用组件的步骤"></a>使用组件的步骤</h3><ul><li><p><strong>Vue中使用组件的三大步骤：</strong></p><ol><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ol></li><li><p><strong>如何定义一个组件？</strong></p></li></ul><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别</p><ul><li><p><strong>区别如下</strong></p><ul><li><p>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</p></li><li><p>data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系</p><p>备注：使用template可以配置组件结构</p></li></ul></li><li><p><strong>如何注册组件？</strong></p><ul><li>局部注册：new Vue的时候传入components选项</li><li>全局注册：Vue.component(‘组件名’,组件)</li></ul></li><li><p><strong>编写组件标签：</strong></p><p><code>&lt;school&gt;&lt;/school&gt;</code></p></li></ul><p><strong>① 局部注册组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">    &lt;student&gt;&lt;/student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 第一步：创建 school 组件</span><br><span class="line">  const school = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    // el: &#x27;#root&#x27;, // 组件定义时一定不要写 el 配置项，因为最终所有的组件都要被一个 vm 管理，由 vm 决定服务于哪个容器</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        schoolName: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showName() &#123;</span><br><span class="line">        alert(this.schoolName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 第一步：创建 student 组件</span><br><span class="line">  const student = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        studentName: &#x27;DouYing&#x27;,</span><br><span class="line">        age: 20,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 创建 vm</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#x27;你好&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 第二步：注册组件（局部注册）</span><br><span class="line">    components: &#123;</span><br><span class="line">      school,</span><br><span class="line">      student</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111955853.png"></p><p><strong>② 全局注册组件</strong></p><p><code>Vue.component(‘hello’,hello)</code> &#x2F;&#x2F; 组件的名字 组件的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">    &lt;student&gt;&lt;/student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;root2&quot;&gt;</span><br><span class="line">    &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 第一步：创建 school 组件</span><br><span class="line">  const school = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    // el: &#x27;#root&#x27;, // 组件定义时一定不要写 el 配置项，因为最终所有的组件都要被一个 vm 管理，由 vm 决定服务于哪个容器</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        schoolName: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showName() &#123;</span><br><span class="line">        alert(this.schoolName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 第一步：创建 student 组件</span><br><span class="line">  const student = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        studentName: &#x27;DouYing&#x27;,</span><br><span class="line">        age: 20,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 第一步：创建 hello 组件</span><br><span class="line">  const hello = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 第二步：全局注册组件</span><br><span class="line">  Vue.component(&#x27;hello&#x27;, hello)</span><br><span class="line">  // 创建 vm</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#x27;你好&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 第二步：注册组件（局部注册）</span><br><span class="line">    components: &#123;</span><br><span class="line">      school,</span><br><span class="line">      student</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root2&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件的注意事项"><a href="#组件的注意事项" class="headerlink" title="组件的注意事项"></a>组件的注意事项</h3><ul><li><p><strong>关于组件名:</strong></p><p>（1）一个单词组成：</p><p>​第一种写法(首字母小写)：school</p><p>​第二种写法(首字母大写)：School</p><p>（2）多个单词组成：</p><p>​第一种写法(kebab-case命名)：my-school ‘my-school’</p><p>​第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</p></li><li><p><strong>备注：</strong></p><p>（1）组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行</p><p>（2）可以使用name配置项指定组件在开发者工具中呈现的名字</p></li><li><p><strong>关于组件标签:</strong></p><p>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></p><p>第二种写法：<code>&lt;school/&gt;</code></p><p><strong>备注：</strong> 不用使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</p></li><li><p><strong>一个简写方式：</strong></p><p><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></p></li></ul><h3 id="创建组件简写形式"><a href="#创建组件简写形式" class="headerlink" title="创建组件简写形式"></a>创建组件简写形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;JHC&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;金职院&#x27;</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;浙江金华&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><ul><li>子组件（student 组件）应该写在 父组件（school组件）的上面</li><li>父组件（school组件）中使用 子组件（student 组件）</li></ul><p><strong>① school 父组件嵌套 student 子组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        //子组件不再页面引用，而在父组件中引用</span><br><span class="line">        &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">       //创建 student 组件</span><br><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">studentName:&#x27;DouYing&#x27;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">       //创建 school组件</span><br><span class="line">        const school = Vue.extend(&#123; // 传入配置对象</span><br><span class="line">        </span><br><span class="line">            //使用子组件</span><br><span class="line">            template:`</span><br><span class="line">               &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">                    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">                    &lt;student&gt;&lt;/student&gt; </span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">           `,</span><br><span class="line">            data()&#123; </span><br><span class="line">                return &#123;</span><br><span class="line">                    schoolName:&#x27;金职院&#x27;,</span><br><span class="line">                    address:&#x27;浙江金华&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">student,</span><br><span class="line">&#125;</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">         el: &quot;#root&quot;,</span><br><span class="line">  components:&#123;</span><br><span class="line">school,</span><br><span class="line">&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>②定义hello 组件，其与school平级</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//定义hello组件</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">template:`&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;欢迎来和DouYing一起学习！&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &quot;#root&quot;,</span><br><span class="line">components:&#123;</span><br><span class="line">school,</span><br><span class="line">        hello,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>开发中常用技巧 app组件</strong></p><p><strong>作用：</strong> 用于管理应用里面所有的组件（vm之下，所有组件之上）</p><p><strong>补充：</strong> 容器中也可什么都不写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">  // 定义 school 组件</span><br><span class="line">  const student = Vue.extend(&#123;</span><br><span class="line">    name: &#x27;student&#x27;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校年龄：&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        age: 20</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 定义 school 组件</span><br><span class="line">  const school = Vue.extend(&#123;</span><br><span class="line">    name: &#x27;school&#x27;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;student&gt;&lt;/student&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 注册组件（局部）</span><br><span class="line">    components: &#123;</span><br><span class="line">      student</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 定义 hello 组件</span><br><span class="line">  const hello = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;`,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;欢迎学习Vue！&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 定义 app 组件</span><br><span class="line">  const app = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">      &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    components: &#123;</span><br><span class="line">      school,</span><br><span class="line">      hello</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 创建 vm</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    template: `&lt;app&gt;&lt;/app&gt;`,</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    // 注册组件（局部）</span><br><span class="line">    components: &#123;</span><br><span class="line">      app,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112033221.png"></p><h3 id="VueComponent构造函数"><a href="#VueComponent构造函数" class="headerlink" title="VueComponent构造函数"></a>VueComponent构造函数</h3><p><strong>关于VueComponent</strong></p><ul><li><p>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的</p></li><li><p>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)</p></li><li><p>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent</p></li><li><p>关于 this 指向：</p><p>(1) 组件配置中：</p><p>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】</p><p>(2) new Vue(options)配置中：</p><p>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】</p></li><li><p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）<br>Vue的实例对象，以后简称vm</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 定义 school 组件</span><br><span class="line">  const school = Vue.extend(&#123;</span><br><span class="line">    name: &#x27;school&#x27;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showName() &#123;</span><br><span class="line">        console.log(&#x27;showName&#x27;, this)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const test = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;span&gt;DouYing&lt;/span&gt;`</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 定义 hello 组件</span><br><span class="line">  const hello = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;test&gt;&lt;/test&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;你好啊！&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      test,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  console.log(&#x27;@&#x27;, school)// Vue 的 VueComponent的构造函数</span><br><span class="line">  console.log(&#x27;#&#x27;, hello)  // 每次调用都会 创建一个新的 构造函数对象</span><br><span class="line">  // 每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</span><br><span class="line"></span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      school,</span><br><span class="line">      hello</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112059580.png"></p><p><strong>vm 管理 一个一个的vc</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112059581.png"></p><h3 id="Vue实例与组件实例"><a href="#Vue实例与组件实例" class="headerlink" title="Vue实例与组件实例"></a>Vue实例与组件实例</h3><p>vc有的功能vm都有，vm有一个功能vc就没有，vm可以通过el决定来为哪个容器服务，vc不可以</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112107432.png"></p><h3 id="重要的内置关系"><a href="#重要的内置关系" class="headerlink" title="重要的内置关系"></a>重要的内置关系</h3><p><strong>① 原型相关知识</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建一个 Demo 的实例对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 显示原型属性</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>) <span class="comment">// 隐式原型属性</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 程序员通过显示原型属性操作原型对象，追加一个 x 属性，值为 99</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>, d.<span class="property">__proto__</span>.<span class="property">x</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>, d)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112116133.png"></p><p><strong>② 内置关系 prototype.proto &#x3D;&#x3D;&#x3D; Vue.prototype</strong></p><p><strong>解释：</strong> 按照原型链的指向，实例的隐式原型属性，应该指向其缔造者的原型对象。故VC的隐式原型属性指向VC的原型对象，且VC的隐式原型属性本应该指向Object的原型对象，但这里VC的隐式原型属性却指向Vue的原型对象<br><strong>目的：</strong> 让组件实例对象（vc）可以访问到 Vue原型上的属性、方法<br><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112207799.png"></p><p><strong>在Vue上的x能被组件school访问到</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  Vue.prototype.x = 99</span><br><span class="line"></span><br><span class="line">  const school = Vue.extend(&#123;</span><br><span class="line">    name: &#x27;school&#x27;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showX() &#123;</span><br><span class="line">        console.log(this.x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 创建一个 vm</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#x27;你好&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      school</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p><strong>安装提示插件：vetur</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112209908.png"></p><p><strong>① Vue文件的基本结构</strong></p><p>安装插件后快捷键：&lt;v</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> // 组件的结构 </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件交互相关的代码（数据、方法等等）</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">// 组件的样式</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>② 组件的定义 基本使用(简单使用)</strong></p><ul><li><p>school 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;h1&gt;学校名称：&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;School&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showName() &#123;</span><br><span class="line">        alert(this.schoolName)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .demo &#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt; </span><br></pre></td></tr></table></figure></li><li><p>student 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学生姓名：&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;学生年龄：&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        age: 20,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;student&gt;&lt;/student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入组件</span><br><span class="line">  import School from &#x27;./School.vue&#x27;</span><br><span class="line">  import Student from &#x27;./Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      School,</span><br><span class="line">      Student,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>③ 创建vm：main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>④ 容器 index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习一下单文件组件的语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>逻辑：</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112317281.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112317284.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112317282.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112317283.png"></p><h2 id="Vue脚手架cli"><a href="#Vue脚手架cli" class="headerlink" title="Vue脚手架cli"></a>Vue脚手架cli</h2><p><a href="https://cli.vuejs.org/zh/">cli官网</a></p><h3 id="创建Vue脚手架"><a href="#创建Vue脚手架" class="headerlink" title="创建Vue脚手架"></a>创建Vue脚手架</h3><p>在cmd命令窗口下执行下列步骤</p><ul><li><p><strong>全局安装@vue&#x2F;cli</strong></p><p><code>npm install -g @vue/cli</code></p><p>（过程中不用回车，容易报错，实在不动了再回车试试，等很久的建议配置淘宝镜像）</p></li><li><p><strong>创建项目</strong></p><p>切换到要创建项目的目录，使用命令创建项目</p><p><code>cd /d 目标目录</code></p><p><code>vue create xxx</code>（xxx为自定义项目名）</p></li><li><p><strong>选择运行环境（Vue2或3或自定义）</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112330427.png"></p><p>出现这个表示创建成功</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112330427.png"></p></li><li><p><strong>启动项目</strong></p><p><code>cd vue_test</code><br><code>npm run serve</code></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208112332900.png"></p></li><li><p><strong>访问项目</strong></p><p>可通过 <code>http://localhost:8080/</code> 访问项目</p></li></ul><h3 id="Vue脚手架结构"><a href="#Vue脚手架结构" class="headerlink" title="Vue脚手架结构"></a>Vue脚手架结构</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208121612667.png"></p><p><strong>分析index.html页面结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 针对 IE 浏览器的一个特殊配置，含义是让 IE 浏览器以最高的的渲染级别渲染页面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置页签的图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置网页的标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">    &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当浏览器不支持 JS 时，noscript 标签中的元素就会被渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled.</span><br><span class="line">        Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><p><strong>关于不同版本的Vue</strong></p><ul><li><p>vue.js与vue.runtime.xxx.js的区别</p><p>(1) vue.js是完整版的Vue，包含：核心功能+模板解析器</p><p>(2) vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器</p></li><li><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</p></li></ul><p><strong>① main.js如果直接这么写会报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//引入Vue</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">//引入App组件，它是所有组件的父组件</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">//关闭vue的生产提示</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建Vue实例对象---vm</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">template:`&lt;App&gt;&lt;/App&gt;`,</span><br><span class="line">components:&#123;App&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208121641908.png"></p><p><strong>② 报错原因</strong></p><p>引入的vue是阉割版的vue，里面不包含模板解析器</p><p><strong>③ 解决方法</strong></p><p><strong>解决方法1：使用render(渲染)函数</strong></p><ul><li>render需要返回值</li><li>可以接收参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//render写成最终简化方式的简化步骤如下</span><br><span class="line">// ① 完整写法</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render(createElement) &#123; </span><br><span class="line">return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// ② 没有使用到this可以写成箭头函数</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:(createElement)=&gt; &#123; </span><br><span class="line">return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// ③ 箭头函数左面含有一个参数 可以省略小括号</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:createElement=&gt; &#123; </span><br><span class="line">return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// ④ 箭头函数只有一句函数体，并且还return</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:createElement=&gt; createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// ⑤ createElement 使用字母替代 render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:h=&gt; h(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 页面上成功返回</span><br></pre></td></tr></table></figure><ul><li>和创建的基础代码 参数 其实还不同<br>h1是HTML中的内置元素，里面需要写具体的内容，需要传递第二个参数<br>如果使用的是组件 就不用内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 两个参数</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render:h=&gt; h(&#x27;h1&#x27;,&#x27;你好啊&#x27;) </span><br><span class="line">&#125;)</span><br><span class="line">// 一个参数</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">   // render函数完成了这个功能：将App组件放入容器中</span><br><span class="line">render: h =&gt; h(App) // 不加入引号 读取变量</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>解决方法2：引入完整版本的Vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//引入Vue</span><br><span class="line">import Vue from &#x27;vue/dist/vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>关于引入阉割版vue而不使用vue的原因</strong></p><p><strong>举例：</strong></p><ul><li>引入完整版vue：买装修材料 + 买工人，装修完成后还得养着工人</li><li>引入阉割版vue：买装修材料 + 雇工人，装修完成后不用养工人</li></ul><h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><h4 id="查看默认配置"><a href="#查看默认配置" class="headerlink" title="查看默认配置"></a>查看默认配置</h4><p><strong>vue.config.js配置文件</strong></p><ul><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ul><p><strong>查看Vue的配置文件</strong></p><p>vue把核心的配置文件隐藏了，怕用户修改错误，项目跑不起来程序，查看核心配置文件命令：<code>vue inspect &gt; output.js</code><br>运行这个命令后会出现 output.js 文件，默认进去报错，在开头加上const a &#x3D; 就行</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208121719075.png"></p><p>但要注意这个文件只是给你看，修改它并不能真的修改到配置</p><h4 id="修改Vue的默认配置"><a href="#修改Vue的默认配置" class="headerlink" title="修改Vue的默认配置"></a>修改Vue的默认配置</h4><ul><li>官网左侧栏中的都可以进行修改：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></li><li>新建vue.config.js 文件 和 package.json同级，在vue.config.js中书写需要修改的配置，程序读取时，会把vue.config.js中程序员书写的相关内容，与vue的核心配置文件进行整合，最核心的配置修改不到，之后需要重新的启动npm run serve</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">//入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span>, <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ul><li><p>被用来个元素或子组件注册引用信息（id的替代者）</p></li><li><p>应用在html标签上获取真实DOM元素，应用在组件标签上获取组件实例对象（vc）</p></li><li><p>使用方式：</p><p>打标识： <code>&lt;h1 ref=&#39;xxx&#39;&gt;...&lt;/h1&gt;</code> 或<code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p><p>获取：<code>this.&amp;refs.xxx</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button ref=&quot;btn&quot; @click=&quot;showDOM&quot;&gt;点我输出上方的DOM元素&lt;/button&gt;</span><br><span class="line">    &lt;school ref=&quot;sch&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入 School 组件</span><br><span class="line">  import School from &#x27;./components/School.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; School &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;欢迎学习Vue！&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showDOM() &#123;</span><br><span class="line">        console.log(this.$refs.title) // 真实 DOM 元素</span><br><span class="line">        console.log(this.$refs.btn) // 真实 DOM 元素</span><br><span class="line">        console.log(this.$refs.sch) // School 组件的实例对象（vc）</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>输出h1元素</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122033942.png"></p><p><strong>school 用 ref 输出vc实例</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122033943.png"></p><p><strong>school 用 id 输出school组件</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122033944.png"></p><h3 id="props配置项-重要"><a href="#props配置项-重要" class="headerlink" title="props配置项(重要)"></a>props配置项(重要)</h3><ul><li><p>功能：让组件接受外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><p>（1）简单声明接受：props:[‘name’]<br>（2）限制类型：props:{name:String}<br>（3）限制类型、限制必要性、指定默认值：</p></li></ul><p><strong>备注：</strong> props是只读的，Vue底层会监测你是否有对props所接受而来的数据进行了修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，则重新复制一份数据到data中，再修改data中的数据即可</p><h4 id="使用proprs"><a href="#使用proprs" class="headerlink" title="使用proprs"></a>使用proprs</h4><p><strong>在app.vue中引入student 组件并传递参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;student name=&quot;李四&quot; sex=&quot;女&quot; age=&quot;18&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>student 中的组件数据不能写死，方便不同学生复用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生年龄：&#123;&#123;age+1&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      console.log(this)</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;我是一个学习Vue的学生&#x27;,</span><br><span class="line">        myAge: this.age</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 简单声明接收</span><br><span class="line">    props: [&#x27;name&#x27;, &#x27;sex&#x27;, &#x27;age&#x27;],</span><br><span class="line"></span><br><span class="line">    // 接收的同时对数据：进行类型限制 + 默认值的指令 + 必要性的限制</span><br><span class="line">    props: &#123;</span><br><span class="line">        name: String,</span><br><span class="line">        age: Number,</span><br><span class="line">        sex: String,</span><br><span class="line">      &#125;, </span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">      name: &#123;</span><br><span class="line">        type: String, // name 的类型</span><br><span class="line">        required: true // name 是必要的</span><br><span class="line">      &#125;,</span><br><span class="line">      age: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 99 // 默认值</span><br><span class="line">      &#125;,</span><br><span class="line">      sex: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        require: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122122727.png"></p><p><strong>如果操作传入过来的数据</strong></p><p>如：给年龄加一岁,使用普通参数传参会出现问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age + 1&#125;&#125;&lt;/h2&gt;</span><br><span class="line">//直接这么做学生年龄的结果是181，而不是19</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><p>app.vue中绑定age 的值</p><ul><li>age 表示的是字符串</li><li>:age 的值是运行 “18” js表达式 里面执行的结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;student name=&quot;李四&quot; sex=&quot;女&quot; :age=&quot;18&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>传入的参数不能随意声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Student&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">console.log(this)</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;我是一名热爱学习的学生&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;,&#x27;phone&#x27;] </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122125256.png"></p><p><strong>外部传递的参数不能直接修改</strong></p><p><strong>案例：</strong> 修改外部传递参数age的数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生年龄：&#123;&#123;myAge+1&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;updateAge&quot;&gt;点我年龄+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      console.log(this)</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;我是一个学习Vue的学生&#x27;,</span><br><span class="line">        myAge: this.age</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      updateAge() &#123;</span><br><span class="line">        this.myAge++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 简单声明接收</span><br><span class="line">    props: [&#x27;name&#x27;, &#x27;sex&#x27;, &#x27;age&#x27;, &#x27;phone&#x27;],</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mixin配置项-混入-x2F-混合"><a href="#mixin配置项-混入-x2F-混合" class="headerlink" title="mixin配置项(混入&#x2F;混合)"></a>mixin配置项(混入&#x2F;混合)</h3><ul><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><ul><li><p>定义混入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;...&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用混入</p><ol><li>全局混入：Vue.mixin(xxx)</li></ol></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 局部混入：minxins:[‘xxx’]</span><br></pre></td></tr></table></figure><p><strong>基本使用</strong></p><p><strong>student.vue 和 school.vue中有相同的代码段</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122145065.png"></p><p><strong>新建mixin.js（文件名可以自定义）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>向student.vue 和 school.vue 中分别引入并应用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 @click=&quot;showName&quot;&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入混合</span><br><span class="line">  import &#123; mixin &#125; from &#x27;../mixin&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    mixins: [mixin],</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>混合原则</strong></p><ul><li>Vue里没有而mixin中有的，将mixin中的混合给Vue</li><li>Vue和mixin都有的，以Vue中的优先</li><li>mounted 两者都有的，会都用，且mixin的会先使用<br>生命周期不以任何人为主,都要，混合的生命周期在前</li></ul><p><strong>全局混合</strong></p><p>在<code>main.js</code>中引入，而Student.vue 和 School.vue都不进行引入<br>所有的vc 和 vm 都会得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 mixin</span></span><br><span class="line"><span class="keyword">import</span> &#123; mixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>功能：用于增强Vue</li><li>本质：包含install方法的一个对象，install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</li><li>定义插件：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue, options</span>)&#123;</span><br><span class="line"><span class="comment">//1. 添加全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 添加全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置全局混入</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 添加实例方法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用插件：Vue.user()</li></ul><p><strong>定义一个Vue插件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue, x, y, z</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z)</span><br><span class="line">    <span class="comment">//全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">      <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">y</span>: <span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 Vue 原型上添加一个方法（vm 和 vc 都能使用）</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">alert</span>(<span class="string">&#x27;你好啊&#x27;</span>) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.js —&gt; 引入、应用插件 在vm之前</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><ul><li>作用：让样式在局部生效，防止样式冲突</li><li>写法：<code>&lt;style scoped&gt;</code></li></ul><p> <strong>Student 和 School 组件书写了同类名样式，会发生冲突</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// School 组件</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">&lt;h2 class=&quot;title&quot;&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// Student 组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">&lt;h2 class=&quot;title&quot;&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2 class=&quot;atguigu&quot;&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 组件样式之间发生冲突</span><br></pre></td></tr></table></figure><p><strong>由于app.vue中，Student后引入，所以Student的样式会覆盖掉School的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;School /&gt;</span><br><span class="line">    &lt;Student /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import School from &#x27;./components/School.vue&#x27;</span><br><span class="line">  import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; School, Student &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122228026.png"></p><p><strong>解决办法</strong>：</p><p>增加scoped属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// School 组件</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// Student 组件</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>原理：</strong></p><p>自动增加类名选择器，且名字随机</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208122230297.png"></p><p><strong>注意</strong></p><p>App组件中一般不写scoped，因为会在App中书写的样式，就是想让很多组件使用，没必要加scoped</p><p><strong>补充：</strong></p><ul><li>style 标签中 lang属性可以写 less 或者是 css 样式</li><li>如果只写less vue 脚手架处理不了less</li><li>不写 lang 默认是css</li><li>需要安装 <code>npm i less-loader</code>，注意和webpack 的版本是否冲突，安装 7版本 <code>npm i less-loader@7</code></li><li>查看版本 <code>npm view webpack versions</code></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">lang</span>=&quot;<span class="selector-tag">less</span>&quot; <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="selector-class">.qwe</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="TodoList案例"><a href="#TodoList案例" class="headerlink" title="TodoList案例"></a>TodoList案例</h2><h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><p><strong>app.vue</strong></p><p><strong>注：</strong> MyItem.vue不直接在app.vue中引入，而在MyList.vue中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader /&gt;</span><br><span class="line">        &lt;MyList /&gt;</span><br><span class="line">        &lt;MyFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /*base*/</span><br><span class="line">  body &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .btn &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    padding: 4px 12px;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),</span><br><span class="line">      0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .btn-danger &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #da4f49;</span><br><span class="line">    border: 1px solid #bd362f;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .btn-danger:hover &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #bd362f;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .btn:focus &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-container &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  .todo-container .todo-wrap &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>MyHeader.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyHeader&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*header*/</span><br><span class="line">  .todo-header input &#123;</span><br><span class="line">    width: 560px;</span><br><span class="line">    height: 28px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-header input:focus &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">    border-color: rgba(82, 168, 236, 0.8);</span><br><span class="line">    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),</span><br><span class="line">      0 0 8px rgba(82, 168, 236, 0.6);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>MyList.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem /&gt;</span><br><span class="line">    &lt;MyItem /&gt;</span><br><span class="line">    &lt;MyItem /&gt;</span><br><span class="line">    &lt;MyItem /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*main*/</span><br><span class="line">  .todo-main &#123;</span><br><span class="line">    margin-left: 0px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-empty &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>MyItem.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; /&gt;</span><br><span class="line">      &lt;span&gt;xxxxx&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*item*/</span><br><span class="line">  li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    height: 36px;</span><br><span class="line">    line-height: 36px;</span><br><span class="line">    padding: 0 5px;</span><br><span class="line">    border-bottom: 1px solid #ddd;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label li input &#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-right: 6px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -1px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li button &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    display: none;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:before &#123;</span><br><span class="line">    content: initial;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:last-child &#123;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-footer&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;span&gt;已完成0&lt;/span&gt; / 全部2</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyFooter&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*footer*/</span><br><span class="line">  .todo-footer &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    padding-left: 6px;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-footer label &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-footer label input &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -1px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-footer button &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208131635396.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208131635431.png"></p><h3 id="展示动态的数据"><a href="#展示动态的数据" class="headerlink" title="展示动态的数据"></a>展示动态的数据</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208131637210.png"></p><p><strong>数据的类型、名称是什么</strong></p><p>一堆要做的事情是一个数组，一个个要做的事情是对象，对象里面的内容&#x3D;&#x3D;{id，name，done(标识，完成)}</p><p><strong>数据保存在哪个组件</strong></p><p>List组件展示就将数据保存在List中</p><p><strong>MyList.vue</strong></p><ul><li>根据数据决定使用多少次 MyItem</li><li>把每一条的具体信息对象传递给 MyItem</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem v-for=&quot;todoObj in todos&quot; :key=&quot;todoObj.id&quot; :todo=&quot;todoObj&quot; /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;唱&#x27;, done: true &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;跳&#x27;, done: false &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;Rap&#x27;, done: true &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyItem.vue</strong></p><ul><li>接收</li><li>动态决定是否勾选</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; /&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208131649145.png"></p><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>组件之间的通信（兄弟、子传父、爷传孙），后面有更好的方式实现</p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p><strong>MyHeader.vue</strong></p><ul><li><p>绑定个键盘事件</p></li><li><p>把用户的输入打印</p></li><li><p>获取用户的输入</p><ul><li><p>方式一：event 事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params">event</span>)&#123;</span><br><span class="line">   consloe.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>) <span class="comment">// 获得发生事件对象的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式二：v-model</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span> v-model=<span class="string">&#x27;title&#x27;</span> @keyup.<span class="property">enter</span>=<span class="string">&quot;add&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">menthod</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    consloe.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">target</span>) <span class="comment">// 获得发生事件对象的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>把获取到的数据包装成一个todo对象 id使用uuid 的压缩版本 nanoid （单机版本） <code>npm i nanoid</code></p></li><li><p>把对象放到数组的前民（unshift），在List组件中保存数据的todos ，在Header组件输出</p></li><li><p>两个兄弟组件之间直接进行数据传递——暂时实现不了</p></li><li><p>原始间接传递</p><ul><li>把List中的todos[] 给 App，让App通过 props 方式传递给list</li><li>让Header 把todoObj 给App</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208131723254.png"></p></li></ul><p><strong>具体案例实现：</strong></p><ul><li>在App里定义一个addTodo方法，通过父传子的形式传给MyHeader</li><li>MyHeader调用了addTodo方法，并对App.vue在data.todos中添加一个todo</li><li>App.vue向MyList中传todos，即可达到插入新的事件的效果</li></ul><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader :addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line">        &lt;MyFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;唱&#x27;, done: true &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;跳&#x27;, done: false &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;Rap&#x27;, done: true &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyHeader.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入 nanoid，因为 noanoid 是分别暴露，所以这样引入</span><br><span class="line">  import &#123; nanoid &#125; from &#x27;nanoid&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyHeader&#x27;,</span><br><span class="line">    props: [&#x27;addTodo&#x27;],</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        title: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        // 校验数据</span><br><span class="line">        if (!this.title.trim()) return alert(&#x27;输入不能为空&#x27;)</span><br><span class="line">        // 将用户的输入包装成为一个 todo 对象</span><br><span class="line">        const todoObj = &#123; id: nanoid(), title: this.title, done: false &#125;</span><br><span class="line">        // 通知 App 组件去添加一个 todo 对象</span><br><span class="line">        this.addTodo(todoObj)</span><br><span class="line">        // 清空输入</span><br><span class="line">        this.title = &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyList.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem v-for=&quot;todoObj in todos&quot; :key=&quot;todoObj.id&quot; :todo=&quot;todoObj&quot; /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    props: [&#x27;todos&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="勾选"><a href="#勾选" class="headerlink" title="勾选"></a>勾选</h4><p><strong>MyItem.vue</strong></p><ul><li>拿到勾选的id，去todos中找到具体的某个人的 done 属性取反</li><li>todos数据在App (数据在哪里操作数据的方法就在哪里)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;, &#x27;checkTodo&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        this.checkTodo(id)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader :addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; /&gt;</span><br><span class="line">        &lt;MyFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;唱&#x27;, done: true &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;跳&#x27;, done: false &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;Rap&#x27;, done: true &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyList.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem v-for=&quot;todoObj in todos&quot; :key=&quot;todoObj.id&quot; :todo=&quot;todoObj&quot; :checkTodo=&quot;checkTodo&quot; /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    props: [&#x27;todos&#x27;, &#x27;checkTodo&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li>鼠标悬浮有高亮效果，并出现删除按钮</li><li>获取id，根据id删除</li></ul><p><strong>MyItem.vue</strong> </p><p>通知app删除对应项 同样是 爷 传 孙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;, &#x27;checkTodo&#x27;, &#x27;deleteTodo&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 勾选 or  取消勾选</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        this.checkTodo(id)</span><br><span class="line">      &#125;,</span><br><span class="line">      //删除</span><br><span class="line">      handleDelete(id) &#123;</span><br><span class="line">        if (confirm(&#x27;确定删除吗？&#x27;)) &#123;</span><br><span class="line">          // 通知 App 组件</span><br><span class="line">          this.deleteTodo(id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue 传 list</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader :addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot; /&gt;</span><br><span class="line">        &lt;MyFooter /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;唱&#x27;, done: true &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;跳&#x27;, done: false &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;Rap&#x27;, done: true &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 删除一个 todo</span><br><span class="line">      deleteTodo(id) &#123;</span><br><span class="line">        // filter 不改变原数组</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>list 接收</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem</span><br><span class="line">      v-for=&quot;todoObj in todos&quot;</span><br><span class="line">      :key=&quot;todoObj.id&quot;</span><br><span class="line">      :todo=&quot;todoObj&quot;</span><br><span class="line">      :checkTodo=&quot;checkTodo&quot;</span><br><span class="line">      :deleteTodo=&quot;deleteTodo&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    props: [&#x27;todos&#x27;, &#x27;checkTodo&#x27;, &#x27;deleteTodo&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132023146.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132023577.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132023578.png"></p><h4 id="底部统计"><a href="#底部统计" class="headerlink" title="底部统计"></a>底部统计</h4><ul><li>统计全部和已完成 MyFooter –&gt; todos 数组的长度 done 为真的数量</li></ul><p><strong>App.vue 给 footer 传递todos数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyFooter :todos=&quot;todos&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>MyFooter.vue 声明接收</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-footer&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt;</span><br><span class="line">      / 全部&#123;&#123;todos.length&#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyFooter&#x27;,</span><br><span class="line">    props: [&#x27;todos&#x27;],</span><br><span class="line">    computed: &#123;</span><br><span class="line">      doneTotal() &#123;</span><br><span class="line">        /* const x = this.todos.reduce((pre, current) =&gt; &#123;</span><br><span class="line">          console.log(&#x27;@&#x27;, pre, current)</span><br><span class="line">          return pre + (current.done ? 1 : 0)</span><br><span class="line">        &#125;, 0) */</span><br><span class="line">        return this.todos.reduce((pre, todo) =&gt; pre + (todo.done ? 1 : 0), 0)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132036634.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132036635.png"></p><h4 id="底部交互"><a href="#底部交互" class="headerlink" title="底部交互"></a>底部交互</h4><ul><li>全选 &#x2F; 全不选，取决于 已完成 和 全部 是否相等</li><li>如果没有数据时，不应该勾选，且不应该展示下面整个框</li></ul><p><strong>MyFooter.vue 已完成 &#x2F; 完成数量的动态变化</strong></p><p><strong>MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//1.复杂写法</span><br><span class="line">//&lt;input type=&quot;checkbox&quot; :checked=&quot;doneTotal === tatal&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//2.vue简便写法</span><br><span class="line">//total = 0即没有添加事件时，该模块不显示</span><br><span class="line">&lt;div v-show=&quot;total&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyFooter&#x27;,</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">//总数</span><br><span class="line">total()&#123;</span><br><span class="line">return this.todos.length</span><br><span class="line">&#125;,</span><br><span class="line">//已完成数</span><br><span class="line">doneTotal()&#123;</span><br><span class="line">return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 简写方式，没有setter 方法  只能被读取不能被修改才可以  后面需要修改</span><br><span class="line">//控制全选框</span><br><span class="line">// 一个计算属性可以通过其他的计算属性 在进行计算 </span><br><span class="line">isAll()&#123; </span><br><span class="line">//已完成事件等于全部事件 且 全部事件大于0  才返回真</span><br><span class="line">return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyFooter.vue 全选 和 局部选 的动态绑定</strong></p><ul><li>this.checkAllTodo(e.target.checked) &#x2F;&#x2F; true false 全选 或者 全不选</li><li>告诉存储 todos 的人全选全不选</li></ul><p><strong>MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot; /&gt; --&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot; /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt;</span><br><span class="line">      / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyFooter&#x27;,</span><br><span class="line">    props: [&#x27;todos&#x27;, &#x27;checkAllTodo&#x27;],</span><br><span class="line">    computed: &#123;</span><br><span class="line">      total() &#123;</span><br><span class="line">        return this.todos.length</span><br><span class="line">      &#125;,</span><br><span class="line">      doneTotal() &#123;</span><br><span class="line">        /* const x = this.todos.reduce((pre, current) =&gt; &#123;</span><br><span class="line">          console.log(&#x27;@&#x27;, pre, current)</span><br><span class="line">          return pre + (current.done ? 1 : 0)</span><br><span class="line">        &#125;, 0) */</span><br><span class="line">        return this.todos.reduce((pre, todo) =&gt; pre + (todo.done ? 1 : 0), 0)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 简写方式，没有setter 方法  只能被读取不能被修改才可以  后面需要修改</span><br><span class="line">      //控制全选框</span><br><span class="line">      // 一个计算属性可以通过其他的计算属性 在进行计算 </span><br><span class="line">      /* isAll() &#123;</span><br><span class="line">        //已完成事件等于全部事件 且 全部事件大于0  才返回真</span><br><span class="line">        return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">      &#125; */</span><br><span class="line">      isAll: &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">          return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value) &#123;</span><br><span class="line">          this.checkAllTodo(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /* checkAll(e) &#123;</span><br><span class="line">        this.checkAllTodo(e.target.checked)</span><br><span class="line">      &#125; */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyFooter</span> :todos=<span class="string">&quot;todos&quot;</span> :checkAllTodo=<span class="string">&quot;checkAllTodo&quot;</span> /&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="comment">//全选or取消全选</span></span><br><span class="line"><span class="comment">//这个done就是全选框的true或false</span></span><br><span class="line"><span class="title function_">checkAllTodo</span>(<span class="params">done</span>)&#123;</span><br><span class="line"><span class="comment">//遍历每一个小框，将小框的true或false和全选框的选择状态同步</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">todo.<span class="property">done</span> = done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量删除已完成事件"><a href="#批量删除已完成事件" class="headerlink" title="批量删除已完成事件"></a>批量删除已完成事件</h4><p><strong>MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot; /&gt; --&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot; /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt;</span><br><span class="line">      / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyFooter&#x27;,</span><br><span class="line">    props: [&#x27;todos&#x27;, &#x27;checkAllTodo&#x27;, &#x27;clearAllTodo&#x27;],</span><br><span class="line">    computed: &#123;</span><br><span class="line">      total() &#123;</span><br><span class="line">        return this.todos.length</span><br><span class="line">      &#125;,</span><br><span class="line">      doneTotal() &#123;</span><br><span class="line">        /* const x = this.todos.reduce((pre, current) =&gt; &#123;</span><br><span class="line">          console.log(&#x27;@&#x27;, pre, current)</span><br><span class="line">          return pre + (current.done ? 1 : 0)</span><br><span class="line">        &#125;, 0) */</span><br><span class="line">        return this.todos.reduce((pre, todo) =&gt; pre + (todo.done ? 1 : 0), 0)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 简写方式，没有setter 方法  只能被读取不能被修改才可以  后面需要修改</span><br><span class="line">      //控制全选框</span><br><span class="line">      // 一个计算属性可以通过其他的计算属性 在进行计算 </span><br><span class="line">      /* isAll() &#123;</span><br><span class="line">        //已完成事件等于全部事件 且 全部事件大于0  才返回真</span><br><span class="line">        return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">      &#125; */</span><br><span class="line">      isAll: &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">          return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value) &#123;</span><br><span class="line">          this.checkAllTodo(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /* checkAll(e) &#123;</span><br><span class="line">        this.checkAllTodo(e.target.checked)</span><br><span class="line">      &#125; */</span><br><span class="line">      clearAll() &#123;</span><br><span class="line">        this.clearAllTodo()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除所有已经完成的 todo</span></span><br><span class="line">      <span class="title function_">clearAllTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">done</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="todoList案例总结"><a href="#todoList案例总结" class="headerlink" title="todoList案例总结"></a>todoList案例总结</h3><ul><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><ul><li>一个组件在用：放在组件自身即可</li></ul></li><li><p>一些组件在用：放在他们共同的父组件上（状态提升）</p><p>(3).实现交互：从绑定事件开始</p></li><li><p>props适用于：</p><p>(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做</p></li></ul><h3 id="TodoList本地监视"><a href="#TodoList本地监视" class="headerlink" title="TodoList本地监视"></a>TodoList本地监视</h3><p><strong>使用监视switch，监视数据todos的变化，变化后拿最新的数据存储</strong></p><ul><li><p>第一次使用时,没有数据，JSON.parse 读取为空会报错，应该给一个空数组</p></li><li><p>有勾选，监视的是todos下的done属性，所以应该是深度监视</p><p>完整版 deep:true</p></li></ul><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader :addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot; /&gt;</span><br><span class="line">        &lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 删除一个 todo</span><br><span class="line">      deleteTodo(id) &#123;</span><br><span class="line">        // filter 不改变原数组</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 全选 or 取消全选</span><br><span class="line">      checkAllTodo(done) &#123;</span><br><span class="line">        this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 清除所有已经完成的 todo</span><br><span class="line">      clearAllTodo() &#123;</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      todos: &#123;</span><br><span class="line">        deep: true,</span><br><span class="line">        handler(value) &#123;</span><br><span class="line">          localStorage.setItem(&#x27;todos&#x27;, JSON.stringify(value))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132307554.png"></p><h3 id="TodoList自定义事件"><a href="#TodoList自定义事件" class="headerlink" title="TodoList自定义事件"></a>TodoList自定义事件</h3><p><strong>app.vue对MyHeader.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader @addTodo=&quot;addTodo&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>MyHeader.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入 nanoid，因为 noanoid 是分别暴露，所以这样引入</span><br><span class="line">  import &#123; nanoid &#125; from &#x27;nanoid&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyHeader&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        // 收集用户输入的 title</span><br><span class="line">        title: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        // 校验数据</span><br><span class="line">        if (!this.title.trim()) return alert(&#x27;输入不能为空&#x27;)</span><br><span class="line">        // 将用户的输入包装成为一个 todo 对象</span><br><span class="line">        const todoObj = &#123; id: nanoid(), title: this.title, done: false &#125;</span><br><span class="line">        // 通知 App 组件去添加一个 todo 对象</span><br><span class="line">        this.$emit(&#x27;addTodo&#x27;, todoObj)</span><br><span class="line">        // 清空输入</span><br><span class="line">        this.title = &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>app.vue对MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// :todos=&quot;todos&quot; 是传的数据，不用改</span><br><span class="line">&lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot;/&gt;  </span><br></pre></td></tr></table></figure><p><strong>MyFooter.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot; /&gt; --&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot; /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt;</span><br><span class="line">      / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyFooter&#x27;,</span><br><span class="line">    props: [&#x27;todos&#x27;,],</span><br><span class="line">    computed: &#123;</span><br><span class="line">      total() &#123;</span><br><span class="line">        return this.todos.length</span><br><span class="line">      &#125;,</span><br><span class="line">      doneTotal() &#123;</span><br><span class="line">        /* const x = this.todos.reduce((pre, current) =&gt; &#123;</span><br><span class="line">          console.log(&#x27;@&#x27;, pre, current)</span><br><span class="line">          return pre + (current.done ? 1 : 0)</span><br><span class="line">        &#125;, 0) */</span><br><span class="line">        return this.todos.reduce((pre, todo) =&gt; pre + (todo.done ? 1 : 0), 0)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 简写方式，没有setter 方法  只能被读取不能被修改才可以  后面需要修改</span><br><span class="line">      //控制全选框</span><br><span class="line">      // 一个计算属性可以通过其他的计算属性 在进行计算 </span><br><span class="line">      /* isAll() &#123;</span><br><span class="line">        //已完成事件等于全部事件 且 全部事件大于0  才返回真</span><br><span class="line">        return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">      &#125; */</span><br><span class="line">      isAll: &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">          return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value) &#123;</span><br><span class="line">          // this.checkAllTodo(value)</span><br><span class="line">          this.$emit(&#x27;checkAllTodo&#x27;, value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /* checkAll(e) &#123;</span><br><span class="line">        this.checkAllTodo(e.target.checked)</span><br><span class="line">      &#125; */</span><br><span class="line">      clearAll() &#123;</span><br><span class="line">        // this.clearAllTodo()</span><br><span class="line">        this.$emit(&#x27;clearAllTodo&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="TodoList事件总线"><a href="#TodoList事件总线" class="headerlink" title="TodoList事件总线"></a>TodoList事件总线</h3><p>原本是App –&gt; MyList –&gt;MyItem 逐层传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装全局事件总线</span></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader @addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line">        &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 删除一个 todo</span><br><span class="line">      deleteTodo(id) &#123;</span><br><span class="line">        // filter 不改变原数组</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 全选 or 取消全选</span><br><span class="line">      checkAllTodo(done) &#123;</span><br><span class="line">        this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 清除所有已经完成的 todo</span><br><span class="line">      clearAllTodo() &#123;</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      todos: &#123;</span><br><span class="line">        deep: true,</span><br><span class="line">        handler(value) &#123;</span><br><span class="line">          localStorage.setItem(&#x27;todos&#x27;, JSON.stringify(value))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$bus.$on(&#x27;checkTodo&#x27;, this.checkTodo)</span><br><span class="line">      this.$bus.$on(&#x27;deleteTodo&#x27;, this.deleteTodo)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy()&#123;</span><br><span class="line">      this.$bus.$off(&#x27;checkTodo&#x27;)</span><br><span class="line">      this.$bus.$off(&#x27;deleteTodo&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyList.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;MyItem v-for=&quot;todoObj in todos&quot; :key=&quot;todoObj.id&quot; :todo=&quot;todoObj&quot; /&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    // 声明接收 App 传递过来的数据</span><br><span class="line">    props: [&#x27;todos&#x27;,]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyItem.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;,],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 勾选 or  取消勾选</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        // this.checkTodo(id)</span><br><span class="line">        this.$bus.$emit(&#x27;checkTodo&#x27;, id)</span><br><span class="line">      &#125;,</span><br><span class="line">      //删除</span><br><span class="line">      handleDelete(id) &#123;</span><br><span class="line">        if (confirm(&#x27;确定删除吗？&#x27;)) &#123;</span><br><span class="line">          // 通知 App 组件</span><br><span class="line">          // this.deleteTodo(id)</span><br><span class="line">          this.$bus.$emit(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="TodoList消息订阅与发布"><a href="#TodoList消息订阅与发布" class="headerlink" title="TodoList消息订阅与发布"></a>TodoList消息订阅与发布</h3><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p><strong>App.vue 订阅 Item 发布</strong></p><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader @addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line">        &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 删除一个 todo</span><br><span class="line">      deleteTodo(_, id) &#123;</span><br><span class="line">        // filter 不改变原数组</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 全选 or 取消全选</span><br><span class="line">      checkAllTodo(done) &#123;</span><br><span class="line">        this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 清除所有已经完成的 todo</span><br><span class="line">      clearAllTodo() &#123;</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      todos: &#123;</span><br><span class="line">        deep: true,</span><br><span class="line">        handler(value) &#123;</span><br><span class="line">          localStorage.setItem(&#x27;todos&#x27;, JSON.stringify(value))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$bus.$on(&#x27;checkTodo&#x27;, this.checkTodo)</span><br><span class="line">      this.pubuId = pubsub.subscribe(&#x27;deleteTodo&#x27;, this.deleteTodo)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      this.$bus.$off(&#x27;checkTodo&#x27;)</span><br><span class="line">      pubsub.unsubscribe(this.pubuId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>MyItem.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;,],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 勾选 or  取消勾选</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        // this.checkTodo(id)</span><br><span class="line">        this.$bus.$emit(&#x27;checkTodo&#x27;, id)</span><br><span class="line">      &#125;,</span><br><span class="line">      //删除</span><br><span class="line">      handleDelete(id) &#123;</span><br><span class="line">        if (confirm(&#x27;确定删除吗？&#x27;)) &#123;</span><br><span class="line">          // 通知 App 组件</span><br><span class="line">          // this.deleteTodo(id)</span><br><span class="line">          // this.$bus.$emit(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">          pubsub.publish(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="TodoList编辑功能"><a href="#TodoList编辑功能" class="headerlink" title="TodoList编辑功能"></a>TodoList编辑功能</h4><ul><li>新增编辑按钮，点击编辑按钮，变成input框</li><li>需要修改完后input变回文字，但由于在浏览器中存储了数据，所以刷新还是input，所以需要使用失去焦点事件</li><li>数据校验输入不能为空</li><li>点击编辑按钮时，新出现的输入框自动获取焦点</li></ul><p><strong>MyItem.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">      &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">      &lt;span v-show=&quot;!todo.isEdit&quot;&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        v-show=&quot;todo.isEdit&quot;</span><br><span class="line">        :value=&quot;todo.title&quot;</span><br><span class="line">        @blur=&quot;handleBlur(todo,$event)&quot;</span><br><span class="line">        ref=&quot;inputTitle&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-edit&quot; v-show=&quot;!todo.isEdit&quot; @click=&quot;handleEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;,],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 勾选 or  取消勾选</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        // this.checkTodo(id)</span><br><span class="line">        this.$bus.$emit(&#x27;checkTodo&#x27;, id)</span><br><span class="line">      &#125;,</span><br><span class="line">      //删除</span><br><span class="line">      handleDelete(id) &#123;</span><br><span class="line">        if (confirm(&#x27;确定删除吗？&#x27;)) &#123;</span><br><span class="line">          // 通知 App 组件</span><br><span class="line">          // this.deleteTodo(id)</span><br><span class="line">          // this.$bus.$emit(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">          pubsub.publish(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 编辑</span><br><span class="line">      handleEdit(todo) &#123;</span><br><span class="line">        if (todo.hasOwnProperty(&#x27;isEdit&#x27;)) &#123;</span><br><span class="line">          todo.isEdit = true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$set(todo, &#x27;isEdit&#x27;, true)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$nextTick(function () &#123;</span><br><span class="line">          this.$refs.inputTitle.focus()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 失去焦点回调（真正执行修改逻辑）</span><br><span class="line">      handleBlur(todo, e) &#123;</span><br><span class="line">        todo.isEdit = false</span><br><span class="line">        if (!e.target.value.trim()) return alert(&#x27;输入不能为空！&#x27;)</span><br><span class="line">        this.$bus.$emit(&#x27;updateTodo&#x27;, todo.id, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader @addTodo=&quot;addTodo&quot; /&gt;</span><br><span class="line">        &lt;MyList :todos=&quot;todos&quot; /&gt;</span><br><span class="line">        &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">  import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; MyHeader, MyList, MyFooter &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        todos: JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 添加一个 todo</span><br><span class="line">      addTodo(todoObj) &#123;</span><br><span class="line">        this.todos.unshift(todoObj)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 勾选 or 取消勾选一个 todo</span><br><span class="line">      checkTodo(id) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.done = !todo.done</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 删除一个 todo</span><br><span class="line">      deleteTodo(_, id) &#123;</span><br><span class="line">        // filter 不改变原数组</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 全选 or 取消全选</span><br><span class="line">      checkAllTodo(done) &#123;</span><br><span class="line">        this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 清除所有已经完成的 todo</span><br><span class="line">      clearAllTodo() &#123;</span><br><span class="line">        this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 更新一个 todo</span><br><span class="line">      updateTodo(id, title) &#123;</span><br><span class="line">        this.todos.forEach((todo) =&gt; &#123;</span><br><span class="line">          if (todo.id === id) todo.title = title</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      todos: &#123;</span><br><span class="line">        deep: true,</span><br><span class="line">        handler(value) &#123;</span><br><span class="line">          localStorage.setItem(&#x27;todos&#x27;, JSON.stringify(value))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$bus.$on(&#x27;checkTodo&#x27;, this.checkTodo)</span><br><span class="line">      this.$bus.$on(&#x27;updateTodo&#x27;, this.updateTodo)</span><br><span class="line">      this.pubuId = pubsub.subscribe(&#x27;deleteTodo&#x27;, this.deleteTodo)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      this.$bus.$off(&#x27;checkTodo&#x27;)</span><br><span class="line">      this.$bus.$off(&#x27;updateTodo&#x27;)</span><br><span class="line">      pubsub.unsubscribe(this.pubuId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="TodoList过渡与动画"><a href="#TodoList过渡与动画" class="headerlink" title="TodoList过渡与动画"></a>TodoList过渡与动画</h3><p>给每件todoThing添加和删除添加动画效果</p><ul><li>方式一：给todo —&gt;Item</li><li>方式二：List</li></ul><p><strong>方式一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition name=&quot;todo&quot; appear&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot; /&gt;</span><br><span class="line">        &lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props ，v-model 绑定的是传递过来的数据 props 不建议 --&gt;</span><br><span class="line">        &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;</span><br><span class="line">        &lt;span v-show=&quot;!todo.isEdit&quot;&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          v-show=&quot;todo.isEdit&quot;</span><br><span class="line">          :value=&quot;todo.title&quot;</span><br><span class="line">          @blur=&quot;handleBlur(todo,$event)&quot;</span><br><span class="line">          ref=&quot;inputTitle&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">      &lt;button class=&quot;btn btn-edit&quot; v-show=&quot;!todo.isEdit&quot; @click=&quot;handleEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyItem&#x27;,</span><br><span class="line">    // 声明接收 todo 对象</span><br><span class="line">    props: [&#x27;todo&#x27;,],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 勾选 or  取消勾选</span><br><span class="line">      handleCheck(id) &#123;</span><br><span class="line">        // 通知 App 组件将对应的 todo 对象的 done 值取反</span><br><span class="line">        // this.checkTodo(id)</span><br><span class="line">        this.$bus.$emit(&#x27;checkTodo&#x27;, id)</span><br><span class="line">      &#125;,</span><br><span class="line">      //删除</span><br><span class="line">      handleDelete(id) &#123;</span><br><span class="line">        if (confirm(&#x27;确定删除吗？&#x27;)) &#123;</span><br><span class="line">          // 通知 App 组件</span><br><span class="line">          // this.deleteTodo(id)</span><br><span class="line">          // this.$bus.$emit(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">          pubsub.publish(&#x27;deleteTodo&#x27;, id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 编辑</span><br><span class="line">      handleEdit(todo) &#123;</span><br><span class="line">        if (todo.hasOwnProperty(&#x27;isEdit&#x27;)) &#123;</span><br><span class="line">          todo.isEdit = true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$set(todo, &#x27;isEdit&#x27;, true)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$nextTick(function () &#123;</span><br><span class="line">          this.$refs.inputTitle.focus()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 失去焦点回调（真正执行修改逻辑）</span><br><span class="line">      handleBlur(todo, e) &#123;</span><br><span class="line">        todo.isEdit = false</span><br><span class="line">        if (!e.target.value.trim()) return alert(&#x27;输入不能为空！&#x27;)</span><br><span class="line">        this.$bus.$emit(&#x27;updateTodo&#x27;, todo.id, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*item*/</span><br><span class="line">  li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    height: 36px;</span><br><span class="line">    line-height: 36px;</span><br><span class="line">    padding: 0 5px;</span><br><span class="line">    border-bottom: 1px solid #ddd;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label li input &#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-right: 6px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -1px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li button &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    display: none;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:before &#123;</span><br><span class="line">    content: initial;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:last-child &#123;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:hover &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li:hover button &#123;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-enter-active &#123;</span><br><span class="line">    animation: atguigu 0.5s linear;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-leave-active &#123;</span><br><span class="line">    animation: atguigu 0.5s linear reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes atguigu &#123;</span><br><span class="line">    from &#123;</span><br><span class="line">      transform: translateX(100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">      transform: translateX(0px);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二：List</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">    &lt;transition-group name=&quot;todo&quot; appear&gt;</span><br><span class="line">      &lt;MyItem v-for=&quot;todoObj in todos&quot; :key=&quot;todoObj.id&quot; :todo=&quot;todoObj&quot; /&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyItem from &#x27;../components/MyItem.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;MyList&#x27;,</span><br><span class="line">    components: &#123; MyItem &#125;,</span><br><span class="line">    // 声明接收 App 传递过来的数据</span><br><span class="line">    props: [&#x27;todos&#x27;,]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /*main*/</span><br><span class="line">  .todo-main &#123;</span><br><span class="line">    margin-left: 0px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-empty &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-enter-active &#123;</span><br><span class="line">    animation: atguigu 0.5s linear;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .todo-leave-active &#123;</span><br><span class="line">    animation: atguigu 0.5s linear reverse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes atguigu &#123;</span><br><span class="line">    from &#123;</span><br><span class="line">      transform: translateX(100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">      transform: translateX(0px);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h2><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208132251134.png"></p><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><ul><li>读的结果不存在时是 null</li><li>浏览器关闭，数据不会消失</li><li>数据什么时候会消失<ul><li>引导了用户点击了删除按钮</li><li>用户主动地清空缓存</li></ul></li></ul><p><strong>LocalStorage的常用API</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 localStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="comment">//只能保存字符串形式，json对象需先转成json字符串</span></span><br><span class="line"><span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除所有保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个索引的Key</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">key</span>(index)</span><br></pre></td></tr></table></figure><p><strong>具体使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;hello!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg2&#x27;</span>, <span class="number">666</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">readData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(result))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteAllData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h3><p><strong>SessionStorage</strong> 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据<br><strong>SessionStorage的常用API：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 sessionStorage</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="comment">//只能保存字符串形式，json对象需先转成json字符串</span></span><br><span class="line"><span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除保存的数据</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除所有保存的数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个索引的Key</span></span><br><span class="line">sessionStorage.<span class="title function_">key</span>(index)</span><br></pre></td></tr></table></figure><p><strong>具体使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> p = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;hello!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;msg2&#x27;</span>, <span class="number">666</span>)</span></span><br><span class="line"><span class="language-javascript">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">readData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;msg2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(result))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(sessionStorage.getItem(&#x27;msg3&#x27;))</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteAllData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    sessionStorage.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ul><li><p>一种组件间通信的方式，适用于：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li></ol><p></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题</p></li></ul><h3 id="自定义事件–绑定"><a href="#自定义事件–绑定" class="headerlink" title="自定义事件–绑定"></a>自定义事件–绑定</h3><p><strong>① 基本代码</strong></p><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;school&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;School&#x27;,</span><br><span class="line">props:[&#x27;getSchoolName&#x27;],</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;金职院&#x27;,</span><br><span class="line">address:&#x27;浙江金华&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.school&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;student&quot;&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Student&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;DouYing&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.student&#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;School/&gt;</span><br><span class="line">&lt;Student/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student&#x27;</span><br><span class="line">import School from &#x27;./components/School&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;School,Student&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208152009095.png"></p><p><strong>② School 组件有个按钮，点击按钮把学校名交给App，即子组件传递给父组件</strong></p><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">       &lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;</span><br><span class="line">&lt;School :getSchoolName=&quot;getSchoolName&quot;/&gt;</span><br><span class="line">&lt;Student/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;School,Student&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getSchoolName(name)&#123;</span><br><span class="line">console.log(&#x27;App收到了学校名：&#x27;,name)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;school&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;sendSchoolName&quot;&gt;把学校名给App&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[&#x27;getSchoolName&#x27;],</span><br><span class="line">methods: &#123;</span><br><span class="line">sendSchoolName()&#123;</span><br><span class="line">this.getSchoolName(this.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208152011757.png"></p><p><strong>③ 把学生名给App 换一种方式：使用自定义事件</strong></p><p><strong>自定义绑定事件方式一：v-on &#x2F; @</strong></p><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;</span><br><span class="line">    &lt;School :getSchoolName=&quot;getSchoolName&quot; /&gt;</span><br><span class="line">    &lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span><br><span class="line">    &lt;Student v-on:atguigu=&quot;getStudentName&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import School from &#x27;./components/School.vue&#x27;</span><br><span class="line">  import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; School, Student &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;你好啊！&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getSchoolName(name) &#123;</span><br><span class="line">        console.log(&#x27;App收到了学校名：&#x27;, name)</span><br><span class="line">      &#125;,</span><br><span class="line">      getStudentName(name) &#123;</span><br><span class="line">        console.log(&#x27;App收到了学生名：&#x27;, name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给App&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        sex: &#x27;男&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sendStudentName() &#123;</span><br><span class="line">        // 触发 Student 组件实例上的 atguigu 事件</span><br><span class="line">        this.$emit(&#x27;atguigu&#x27;, this.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>二者之间的异同点</strong></p><ul><li>props 和 自定义事件 都需要两个回调</li><li>props给了 School组件一个方法，School组件调用了这个方法</li><li>自定义事件并没有给 Student 组件什么方法，只是绑定了一个自定义事件，做为自定义事件的回调在使用</li><li>Student 组件触发自定义事件会传参</li></ul><p><strong>自定义绑定事件方式二：$ref</strong></p><ul><li>麻烦但灵活性强</li><li>如：定时器，等五秒后在绑定自定义事件</li></ul><p><strong>app.vue</strong></p><p>在app组件里面，通过app的vc(this.$refs.student)，就可以获取到Student组件的实例对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span><br><span class="line">&lt;!-- &lt;Student @atguigu=&quot;getStudentName&quot; @demo=&quot;m1&quot;/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;</span><br><span class="line">&lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// app 挂载完毕时触发mounted</span><br><span class="line">mounted() &#123; </span><br><span class="line">          // this.$refs.student 是 Student组件的实例对象  </span><br><span class="line">          </span><br><span class="line">          //这里相当于同时在student上绑定事件，并等待事件触发</span><br><span class="line">          //$on 当atguigu 被触发的时候 触发回调</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件</span><br><span class="line">           // this.$refs.student.$once(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件（一次性） 触发一次后就不能再触发了</span><br><span class="line"></span><br><span class="line">//定时器触发事件后3秒后再启用getStudentName函数</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName)&#125;,3000)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getSchoolName(name)&#123;</span><br><span class="line">console.log(&#x27;App收到了学校名：&#x27;, name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>触发事件时传递多个参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// 方式一</span><br><span class="line"></span><br><span class="line">school.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">sendStudentlName()&#123;</span><br><span class="line">this.$emit(&#x27;atguigu&#x27;,this.name,666,888,900)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">app.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">getStudentName(name,x,y,z)&#123;</span><br><span class="line">console.log(&#x27;App收到了学生名：&#x27;,name,x,y,z)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">开发中的方式</span><br><span class="line">// 方式一 :</span><br><span class="line">把数据包装成一个对象传递过去</span><br><span class="line">school.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">sendStudentlName()&#123;</span><br><span class="line">this.$emit(&#x27;atguigu&#x27;,&#123;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 方式二:</span><br><span class="line">es6 写法  正常传递，接收</span><br><span class="line">school.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">sendStudentlName()&#123;</span><br><span class="line">this.$emit(&#x27;atguigu&#x27;,this.name,666,888,900)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">app.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">           // name 正常结构，其他的参数不管传递多少，整理到params数组上</span><br><span class="line">getStudentName(name,...params)&#123;</span><br><span class="line">console.log(&#x27;App收到了学生名：&#x27;,name,params)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给App&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;解绑atguigu事件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        sex: &#x27;男&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sendStudentName() &#123;</span><br><span class="line">        // 触发 Student 组件实例上的 atguigu 事件</span><br><span class="line">        this.$emit(&#x27;atguigu&#x27;, this.name, 666, 888, 999)</span><br><span class="line">        this.$emit(&#x27;demo&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      unbind() &#123;</span><br><span class="line">        // this.$off(&#x27;atguigu&#x27;) // 解绑一个自定义事件</span><br><span class="line">        // this.$off([&#x27;atguigu&#x27;, &#x27;demo&#x27;]) // 解绑多个自定义事件</span><br><span class="line">        this.$off() // 解绑所有的自定义事件</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong> app在收到Student传入的姓名后，将姓名呈现在页面上</p><p>方法一：使用@或v-on</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;，学生姓名是:&#123;&#123;studentName&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;</span><br><span class="line">&lt;Student @atguigu=&quot;getStudentName&quot; @demo=&quot;m1&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;,</span><br><span class="line">studentName:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getStudentName(name,...params)&#123;</span><br><span class="line">console.log(&#x27;App收到了学生名：&#x27;,name,params)</span><br><span class="line">this.studentName = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>方法二：使用$ref</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;，学生姓名是:&#123;&#123;studentName&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;</span><br><span class="line">&lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;,</span><br><span class="line">studentName:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">           getStudentName(name,...params)&#123;</span><br><span class="line">console.log(&#x27;App收到了学生名：&#x27;,name,params)</span><br><span class="line">this.studentName = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><p>不能将 getStudentName 以普通函数的方法写在$on的回调函数中</p><p>因为谁触发了 atguigu 事件，事件当中会掉的this就是谁，所以此时是Student组件的vc</p></li><li><p>可以getStudentName 以箭头函数的方法写在$on的回调函数中，但一般不这么写</p><p>箭头函数没有实例对象，向上查找，找到 mounted 钩子，此时是App</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;,</span><br><span class="line">studentName:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">/* methods: &#123;</span><br><span class="line">           getStudentName(name,...params)&#123;</span><br><span class="line">console.log(&#x27;App收到了学生名：&#x27;,name,params)</span><br><span class="line">this.studentName = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;,*/ </span><br><span class="line">//以下这么写不行</span><br><span class="line">/*</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,function(name,...params)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;) //绑定自定义事件</span><br><span class="line">           console.log(this) // 此时是this 是Student组件的vc</span><br><span class="line">&#125;,</span><br><span class="line">*/ </span><br><span class="line">//以下这么写可以，但一般没必要</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,(name,...params)=&gt;) //绑定自定义事件</span><br><span class="line">           console.log(this) // 此时是this 是Student组件的vc</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件绑定事件默认不使用内置事件"><a href="#组件绑定事件默认不使用内置事件" class="headerlink" title="组件绑定事件默认不使用内置事件"></a>组件绑定事件默认不使用内置事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 这么写会被默认当做自定义事件</span><br><span class="line">&lt;Student ref=&quot;student&quot; @click=&quot;show&quot;/&gt; </span><br><span class="line"></span><br><span class="line">//加上native 原生的，本来的，才会使用到内置事件</span><br><span class="line">&lt;Student ref=&quot;student&quot; @click.native=&quot;show&quot;/&gt; </span><br></pre></td></tr></table></figure><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ul><li>一种组件间通信的方式，适用于任意组件间通信</li><li>安装全局事件总线：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><ul><li><p>使用事件总线：</p><ol><li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件</p></li></ul><p><strong>理解：</strong></p><ul><li>在x这个组件上绑定事件，通过其进行数据中转</li><li>想获取事件的就向X上绑定事件，想传递数据的就$emit这个事件并携带参数</li><li>如图中A组件向x绑定demo事件，D通过demo事件向A传递数据666</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208152225399.png"></p><p><strong>实现让所有组件都能看到 组件$bus（即总线）</strong></p><p>放在main.js中的 beforeCreate</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//绑定在Vue的实例对象上才可以让所有组件“看到”</span></span><br><span class="line">    <span class="comment">//$bus = this则是想为$bus绑定一个Vue实例对象，使得$bus可以使用$on，$off，$emit</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//全局事件总线</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Student.vue 传给 School 数据</strong></p><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;School&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$bus.$on(&#x27;hello&#x27;, (data) =&gt; &#123;</span><br><span class="line">        console.log(&#x27;我是School组件，收到了数据&#x27;, data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      this.$bus.$off(&#x27;hello&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        sex: &#x27;男&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sendStudentName() &#123;</span><br><span class="line">        this.$bus.$emit(&#x27;hello&#x27;, this.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ul><li><p>一种组件间通信的方式，适用于任意组件间通信</p></li><li><p>使用步骤：</p><ol><li>安装pubsub：<code>npm i pubsub-js</code></li><li>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></li><li>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></li><li>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去取消订阅</li></ol></li></ul><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a><strong>理解</strong></h3><ul><li>谁需要数据谁订阅，谁提供数据谁发布</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208152225400.png"></p><h3 id="消息订阅与发布的第三方库PubSubJS"><a href="#消息订阅与发布的第三方库PubSubJS" class="headerlink" title="消息订阅与发布的第三方库PubSubJS"></a>消息订阅与发布的第三方库PubSubJS</h3><p>使用 PubSubJS</p><ul><li>在线文档: <a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></li><li>安装插件: <code>npm i pubsub-js</code></li><li>相关语法<ol><li><code>import PubSub from ‘pubsub-js’</code> &#x2F;&#x2F; 引入</li><li><code>PubSub.subscribe(‘msgName’, functon(msgName, data)&#123; &#125;)</code></li><li><code>PubSub.publish(‘msgName’, data)</code>: 发布消息, 触发订阅的回调函数调用</li><li><code>PubSub.unsubscribe(token)</code>: 取消消息的订阅</li></ol></li></ul><p><strong>具体案例</strong></p><ul><li>School 组件订阅消息</li><li>Student 发布消息</li></ul><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;School&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;金职院&#x27;,</span><br><span class="line">        address: &#x27;浙江金华&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      /* this.$bus.$on(&#x27;hello&#x27;, (data) =&gt; &#123;</span><br><span class="line">        console.log(&#x27;我是School组件，收到了数据&#x27;, data)</span><br><span class="line">      &#125;) */</span><br><span class="line">      this.pubId = pubsub.subscribe(&#x27;hello&#x27;, (msgName, data) =&gt; &#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">        console.log(&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;, msgName, data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      // this.$bus.$off(&#x27;hello&#x27;)</span><br><span class="line">      pubsub.unsubscribe(this.pubId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        sex: &#x27;男&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sendStudentName() &#123;</span><br><span class="line">        // this.$bus.$emit(&#x27;hello&#x27;, this.name)</span><br><span class="line">        pubsub.publish(&#x27;hello&#x27;, 666)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208152239959.png"></p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ul><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</li></ul><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><ul><li>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</li><li>图示：</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201454049.png"></p><ul><li>写法：<ul><li>准备好样式：</li><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><ul><li>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li>让谁有动画的效果就用transition标签给包裹起来</li><li>template 中所实现的名字是固定<ul><li>三个样式的类名</li><li>v-enter 进入的起点 反之对应 v-leave 离开的起点</li><li>v-enter-active 进入过程中 反之对应 v-leave-active 离开过程中<ul><li>enter进入时的动画 active激活 进入时要激活的样式</li><li>leave离开 离开时要激活的样式</li></ul></li></ul></li><li>v-enter -to 进入的终点 反之对应 v-leave-to 离开的终点</li><li>v 可以替换成过度时的名字</li><li>template 加上appear属性可以使得页面在渲染时就直接呈现动画效果</li></ul><p><strong>app.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Test /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Test from &#x27;./components/Test.vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Test &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>test.vue</strong></p><p>动画效果页面左边缘向右出现出现，向左离开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Test&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isShow: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line">  /* css3知识 */</span><br><span class="line">  /* 使用动画 两个样式的类名  linear 匀速 reverse 反转*/</span><br><span class="line">  .hello-enter-active &#123;</span><br><span class="line">    animation: atguigu 1s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .hello-leave-active &#123;</span><br><span class="line">    animation: atguigu 1s reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  /* 动画定义一个关键帧  名字可以随意 */</span><br><span class="line">  @keyframes atguigu &#123;</span><br><span class="line">    from &#123;</span><br><span class="line">      transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">      transform: translateX(0px);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>实现效果类同动画（0到100%）</p><p><strong>test2.vue —&gt; test.vue 的效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Test&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isShow: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 进入的起点、离开的终点*/</span><br><span class="line">  .hello-enter,</span><br><span class="line">  .hello-leave-to &#123;</span><br><span class="line">    transform: translateX(-100%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .hello-enter-active,</span><br><span class="line">  .hello-leave-active &#123;</span><br><span class="line">    transition: 0.5s linear;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 进入的终点、离开的起点 */</span><br><span class="line">  .hello-enter-to,</span><br><span class="line">  .hello-leave &#123;</span><br><span class="line">    transform: translateX(0);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="多个元素同样的过度效果"><a href="#多个元素同样的过度效果" class="headerlink" title="多个元素同样的过度效果"></a>多个元素同样的过度效果</h3><p><strong>错误写法一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;我很好！谢谢！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201440759.png"></p><p><strong>错误写法二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition-group name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot;&gt;我很好！谢谢！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201441625.png"></p><p><strong>正确方式一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;transition-group name=&quot;hello&quot; appear&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;我很好！谢谢！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>正确方式二：</strong></p><p>使用transition标签，使用div标签把两个h1标签包裹起来 但是两个展示效果不能互斥，互斥无法实现，互斥只能使用 transition-group 显示取反</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;!-- transition 过度 appear 呈现  hello 过度时起的名字--&gt;</span><br><span class="line">&lt;!-- 真是列表中使用 v-for 生成 key 值--&gt; </span><br><span class="line">&lt;transition-group name=&quot;hello&quot; appear&gt;</span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;我很好谢谢！&lt;/h1&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/transition-group &gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201443415.png"></p><h3 id="集成第三方动画"><a href="#集成第三方动画" class="headerlink" title="集成第三方动画"></a>集成第三方动画</h3><p><a href="https://www.npmjs.com/package/animate.css">npm-animate库链接</a></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201445329.png"></p><p><strong>使用</strong></p><ul><li>安装 npm install animate.css</li><li>引入 import ‘animate.css’ 样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">    &lt;!-- transition 过度 appear 呈现  hello 过度时起的名字--&gt;</span><br><span class="line">    &lt;!-- 真是列表中使用 v-for 生成 key 值--&gt;</span><br><span class="line">    &lt;transition-group</span><br><span class="line">      appear</span><br><span class="line">      name=&quot;animate__animated animate__bounce&quot;</span><br><span class="line">      enter-active-class=&quot;animate__swing&quot;</span><br><span class="line">      leave-active-class=&quot;animate__backOutUp&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;h1 v-show=&quot;!isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">      &lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;我很好！谢谢！&lt;/h1&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><p>可以用来解决跨域的问题</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208201555034.png"></p><blockquote><p>ajax 是前端技术，你得有浏览器，才有window对象，才有xhr，才能发ajax请求，服务器之间通信就用传统的http请求就行了</p></blockquote><p><strong>方法一</strong></p><ul><li>优点：配置简单，请求资源时直接发给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ul><p>在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启代理服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><ul><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ul><p> 编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="comment">//代理服务器将请求地址转给真实服务器时会将 /api1 去掉</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="GitHub用户搜索案例"><a href="#GitHub用户搜索案例" class="headerlink" title="GitHub用户搜索案例"></a>GitHub用户搜索案例</h2><p>可以使用axios，也可以使用vue-resource（推荐axios，因为vue-resource维护更新的不是那么频繁了）</p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;Search /&gt;</span><br><span class="line">    &lt;List /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Search from &#x27;./components/Search.vue&#x27;</span><br><span class="line">  import List from &#x27;./components/List.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Search, List &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Search.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;jumbotron-heading&quot;&gt;搜索Github用户&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; placeholder=&quot;输入您搜索的名称&quot; v-model=&quot;keyWord&quot; /&gt;&amp;nbsp;</span><br><span class="line">      &lt;button @click=&quot;searchUsers&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Search&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        keyWord: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      searchUsers() &#123;</span><br><span class="line">        // 请求前更新 List 的数据</span><br><span class="line">        this.$bus.$emit(&#x27;updateListData&#x27;, &#123; isFirst: false, isLoading: true, errMsg: &#x27;&#x27;, users: [] &#125;)</span><br><span class="line">        axios.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(</span><br><span class="line">          response =&gt; &#123;</span><br><span class="line">            console.log(&#x27;请求成功了&#x27;)</span><br><span class="line">            // 请求成功后更新 List 的数据</span><br><span class="line">            this.$bus.$emit(&#x27;updateListData&#x27;, &#123; isLoading: false, errMsg: &#x27;&#x27;, users: response.data.items &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            console.log(&#x27;请求失败了&#x27;)</span><br><span class="line">            // 请求失败后更新 List 的数据</span><br><span class="line">            this.$bus.$emit(&#x27;updateListData&#x27;, &#123; isLoading: false, errMsg: error.message, users: [] &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>List.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;!-- 展示用户列表 --&gt;</span><br><span class="line">    &lt;div v-show=&quot;info.users.length&quot; class=&quot;card&quot; v-for=&quot;user in info.users&quot; :key=&quot;user.login&quot;&gt;</span><br><span class="line">      &lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;user.avatar_url&quot; style=&quot;width: 100px&quot; /&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示欢迎词 --&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;info.isFirst&quot;&gt;欢迎使用！&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 展示加载中 --&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;info.isLoading&quot;&gt;加载中......&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 展示错误信息 --&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;info.errMsg&quot;&gt;&#123;&#123;info.errMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;List&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">          isFirst: true,</span><br><span class="line">          isLoading: false,</span><br><span class="line">          errMsg: &#x27;&#x27;,</span><br><span class="line">          users: []</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.$bus.$on(&#x27;updateListData&#x27;, (dataObj) =&gt; &#123;</span><br><span class="line">        this.info = &#123; ...this.info, ...dataObj &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .album &#123;</span><br><span class="line">    min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">    padding-top: 3rem;</span><br><span class="line">    padding-bottom: 3rem;</span><br><span class="line">    background-color: #f7f7f7;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 33.333%;</span><br><span class="line">    padding: 0.75rem;</span><br><span class="line">    margin-bottom: 2rem;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &gt; img &#123;</span><br><span class="line">    margin-bottom: 0.75rem;</span><br><span class="line">    border-radius: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card-text &#123;</span><br><span class="line">    font-size: 85%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><ul><li>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</li><li>分类：默认插槽、具名插槽、作用域插槽</li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;../../../网页/web/images/banner.png&quot; alt /&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;​</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category title=&quot;电影&quot;&gt;</span><br><span class="line">      &lt;video src=&quot;../../../网页/web/video/Barcelona-video.mp4&quot; controls&gt;&lt;/video&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Category from &#x27;./components/Category.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Category &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        foods: [&#x27;火锅&#x27;, &#x27;烧烤&#x27;, &#x27;小龙虾&#x27;, &#x27;牛排&#x27;],</span><br><span class="line">        games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;],</span><br><span class="line">        films: [&#x27;《教父》&#x27;, &#x27;《拆弹专家》&#x27;, &#x27;《你好，李焕英》&#x27;, &#x27;《尚硅谷》&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Category.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Category&#x27;,</span><br><span class="line">    props: [&#x27;title&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .category &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  video &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">      &lt;img slot=&quot;center&quot; src=&quot;../../../网页/web/images/banner.png&quot; alt /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;foot&quot; slot=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;a slot=&quot;footer&quot; href=&quot;http://www.douyingc.cn&quot;&gt;更多美食&lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">      &lt;ul slot=&quot;center&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;foot&quot; slot=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.douyingc.cn&quot;&gt;单机游戏&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;http://www.douyingc.cn&quot;&gt;网络游戏&lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">    &lt;Category title=&quot;电影&quot;&gt;</span><br><span class="line">      &lt;video slot=&quot;center&quot; src=&quot;../../../网页/web/video/Barcelona-video.mp4&quot; controls&gt;&lt;/video&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;!-- &lt;template slot=&quot;footer&quot;&gt; --&gt;</span><br><span class="line">        &lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;http://www.douyingc.cn&quot;&gt;经典&lt;/a&gt;</span><br><span class="line">          &lt;a href=&quot;http://www.douyingc.cn&quot;&gt;热门&lt;/a&gt;</span><br><span class="line">          &lt;a href=&quot;http://www.douyingc.cn&quot;&gt;推荐&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;h4&gt;欢迎前来观看！&lt;/h4&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Category from &#x27;./components/Category.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Category &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        foods: [&#x27;火锅&#x27;, &#x27;烧烤&#x27;, &#x27;小龙虾&#x27;, &#x27;牛排&#x27;],</span><br><span class="line">        games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;],</span><br><span class="line">        films: [&#x27;《教父》&#x27;, &#x27;《拆弹专家》&#x27;, &#x27;《你好，李焕英》&#x27;, &#x27;《尚硅谷》&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .container,</span><br><span class="line">  .foot &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Category.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">    &lt;slot name=&quot;center&quot;&gt;我是默认值，当没有具体结构 传递时，我会出现&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;我是默认值，当没有具体结构 传递时，我会出现&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Category&#x27;,</span><br><span class="line">    props: [&#x27;title&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .category &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  video &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>理解：数据在组件的自身（子组件），但根据数据生成的结构需要组件的使用者（父组件）来决定。（games数据在Category（子）组件中，但使用数据所遍历出来的结构由App（父）组件决定）</li></ul><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">      &lt;template scope=&quot;atguigu&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;(g,index) in atguigu.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">      &lt;!-- &#123;games&#125; ES6的解构赋值 --&gt;</span><br><span class="line">      &lt;template scope=&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">        &lt;ol&gt;</span><br><span class="line">          &lt;li style=&quot;color: red&quot; v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">      &lt;!-- ES6的解构赋值 --&gt;</span><br><span class="line">      &lt;template slot-scope=&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">        &lt;h4 v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Category&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Category from &#x27;./components/Category.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Category &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .container,</span><br><span class="line">  .foot &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Category.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">    &lt;slot :games=&quot;games&quot;&gt;我是默认值，当没有具体结构传递时，我会出现&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Category&#x27;,</span><br><span class="line">    props: [&#x27;title&#x27;],</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        games: [&#x27;红色警戒&#x27;, &#x27;穿越火线&#x27;, &#x27;劲舞团&#x27;, &#x27;超级玛丽&#x27;],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .category &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  video &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="理解Vuex"><a href="#理解Vuex" class="headerlink" title="理解Vuex"></a>理解Vuex</h3><p><strong>概念</strong></p><p> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信</p><p><a href="https://github.com/vuejs/vuex">Vuex GitHub地址</a></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208212031825.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208212036648.png"></p><p><strong>何时使用Vuex</strong></p><ul><li>多个组件依赖于同一状态</li><li>来自不同组件的行为需要变更同一状态</li></ul><p><strong>Vuex工作原理图</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208212018414.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208222100965.png"></p><h3 id="求和案例-纯Vue编写"><a href="#求和案例-纯Vue编写" class="headerlink" title="求和案例-纯Vue编写"></a>求和案例-纯Vue编写</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208212049768.png"></p><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Count /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Count from &#x27;./components/Count.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Count &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Count.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Count&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        n: 1, // 用户悬着的数字</span><br><span class="line">        sum: 0, // 当前的和</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line">        this.sum += this.n</span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line">        this.sum -= this.n</span><br><span class="line">      &#125;,</span><br><span class="line">      incrementOdd() &#123;</span><br><span class="line">        if (this.sum % 2) &#123;</span><br><span class="line">          this.sum += this.n</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      incrementWait() &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          this.sum += this.n</span><br><span class="line">        &#125;, 500)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">  button &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="搭建Vuex环境"><a href="#搭建Vuex环境" class="headerlink" title="搭建Vuex环境"></a>搭建Vuex环境</h3><p><strong>安装</strong></p><p><code>npm i vuex@3</code> vue2如果需要使用Vuex的话，需要安装Vuex 3版本</p><p>而默认<code>npm i vuex</code>是安装Vuex 4版本</p><p><strong>引入</strong></p><p>创建 <code>src/store/index.js</code>(<strong>推荐</strong>)也可以 <code>src/Vuex/store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建 Vuex 中最为核心的 store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 Vue 核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用 Vuex 插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions————用于响应组建中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备mutations————用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备state————用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露（导出） store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中创建vm时传入 <code>store</code> 配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">// 引入 store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store, <span class="comment">// 对象的简写形式</span></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code>或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p></li></ul><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote><h3 id="求和案例-Vuex版"><a href="#求和案例-Vuex版" class="headerlink" title="求和案例-Vuex版"></a>求和案例-Vuex版</h3><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建 Vuex 中最为核心的 store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 Vue 核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用 Vuex 插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions————用于响应组建中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">/* jia(context, value) &#123;</span></span><br><span class="line"><span class="comment">    context.commit(&#x27;JIA&#x27;, value)</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  jian(context, value) &#123;</span></span><br><span class="line"><span class="comment">    context.commit(&#x27;JIAN&#x27;, value)</span></span><br><span class="line"><span class="comment">  &#125;, */</span></span><br><span class="line">  <span class="title function_">jiaOdd</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">jiaWait</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations————用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">    state.<span class="property">sum</span> += value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">    state.<span class="property">sum</span> -= value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state————用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sum</span>: <span class="number">0</span>, <span class="comment">// 当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露（导出） store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Count.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Count&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        n: 1, // 用户悬着的数字</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line">        this.$store.commit(&#x27;JIA&#x27;, this.n)</span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line">        this.$store.commit(&#x27;JIAN&#x27;, this.n)</span><br><span class="line">      &#125;,</span><br><span class="line">      incrementOdd() &#123;</span><br><span class="line">        this.$store.dispatch(&#x27;jiaOdd&#x27;, this.n)</span><br><span class="line">      &#125;,</span><br><span class="line">      incrementWait() &#123;</span><br><span class="line">        this.$store.dispatch(&#x27;jiaWait&#x27;, this.n)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">  button &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><ul><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ul><p><strong>案例</strong></p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 准备getters————用于将 state 中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p><strong>Count.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;h2&gt;当前求和放大10倍为：&#123;&#123;$store.getters.bigSum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><p><strong>导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> </span><br></pre></td></tr></table></figure><ul><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象</p></blockquote><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ul><li>目的：让代码更好维护，让多种数据分类更加明确</li><li>修改<code>store.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>开启命名空间后，组件中读取state数据：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure><ul><li>开启命名空间后，组件中读取getters数据：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>开启命名空间后，组件中调用dispatch</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>开启命名空间后，组件中调用commit</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="相关理解"><a href="#相关理解" class="headerlink" title="相关理解"></a>相关理解</h3><p><strong>vue-router 的理解</strong></p><ul><li>vue的一个插件库，专门用来实现SPA应用</li></ul><p><strong>对SPA应用的理解</strong></p><ul><li>单页Web应用（single page web application，SPA）</li><li>整个应用只有一个完整的页面</li><li>点击页面中的导航链接不会刷新页面，只会做页面的局部更新</li><li>数据需要通过ajax请求获取</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208242035496.png"></p><p><strong>路由的理解</strong></p><ul><li>理解：一个路由（route）就是一组映射关系（key－value），多个路由需要路由器（router）进行管理</li><li>前端路由：key是路径，value可能是 function 或 component</li></ul><p><strong>路由分类</strong></p><ul><li><p>后端路由</p><ol><li>理解：value是function，用于处理客户端提交的请求</li><li>工作过程：服务器接收到一个请求时，根据请求路径找到匹配的函数来处理请求，返回响应数据</li></ol></li><li><p>前端路由</p><ol><li>理解：value是component，用于展示页面内容</li><li>工作过程：当浏览器的路径改变时，对应的组件就会显示</li></ol></li></ul><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>安装vue-router</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@3</span><br></pre></td></tr></table></figure><blockquote><p>Vue2对应router3，Vue3对应router4</p><p>例-vue2安装vue-router：<code>npm i vue-router@3</code></p></blockquote><p><strong>应用插件</strong></p><ul><li><strong>main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><p><strong>编写router配置项</strong></p><ul><li><strong>src&#x2F;router&#x2F;index.js</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 应用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>实现切换（active-class可配置高亮样式）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p><strong>指定展示位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208242113988.png"></p><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">          &lt;h2&gt;Vue Router Demo&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">          &lt;!-- 原始 html 中我们使用 a 标签实现页面的跳转 --&gt;</span><br><span class="line">          &lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt; --&gt;</span><br><span class="line">          &lt;!-- &lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- Vue 中借助 router-link 标签实现路由的切换 --&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">            &lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Home.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是Home的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Home&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>About.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是About的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;About&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><ul><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个<code>router</code>，可以通过组件的<code>$router</code>属性获取到</li></ul><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Banner.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">      &lt;h2&gt;Vue Router Demo&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Banner&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;Banner /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">          &lt;!-- 原始 html 中我们使用 a 标签实现页面的跳转 --&gt;</span><br><span class="line">          &lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt; --&gt;</span><br><span class="line">          &lt;!-- &lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- Vue 中借助 router-link 标签实现路由的切换 --&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">            &lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Banner from &#x27;./components/Banner.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123; Banner &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="嵌套路由（多级路由）"><a href="#嵌套路由（多级路由）" class="headerlink" title="嵌套路由（多级路由）"></a>嵌套路由（多级路由）</h3><p><strong>配置路由规则，使用<code>children</code>配置项</strong></p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>跳转（要写完整路径）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p><strong>指定展示位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208242145818.png"></p><p><strong>Home.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home组件内容&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/message&quot;&gt;Message&lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Home&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>News.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;news001&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;news002&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;news003&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;News&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;/message1&quot;&gt;message001&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;/message2&quot;&gt;message002&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;/message/3&quot;&gt;message003&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><p><strong>传递参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p><strong>接收参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208242218394.png"></p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带 query 参数，to的字符串写法 --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 跳转路由并携带 query 参数，to的对象写法 --&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">          path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">          query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        &gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        messageList: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;消息001&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;消息002&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;消息003&#x27; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Detail.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息编号：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息标题：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Detail&#x27;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      console.log(this.$route)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ul><li><p>作用：可以简化路由的跳转</p></li><li><p>如何使用</p><ol><li><p>给路由命名 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">// 给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">    id:666,</span><br><span class="line">        title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带 query 参数，to的字符串写法 --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 跳转路由并携带 query 参数，to的对象写法 --&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">          name:&#x27;xiangqing&#x27;,</span><br><span class="line">          query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        &gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        messageList: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;消息001&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;消息002&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;消息003&#x27; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><p><strong>配置路由，声明接收<code>params</code>参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">// 🔴使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传递参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置</p></blockquote><p><strong>接收参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的字符串写法 --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的对象写法 --&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">          name:&#x27;xiangqing&#x27;,</span><br><span class="line">          params:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        &gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        messageList: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;消息001&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;消息002&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;消息003&#x27; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Detail.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息编号：&#123;&#123;$route.params.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息标题：&#123;&#123;$route.params.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Detail&#x27;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      console.log(this.$route)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><ul><li>作用：让路由组件更方便的收到参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">  <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方便在要跳转去的组件里更简便的写法</p></blockquote><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为对象，该对象中的所有 key-value 都会以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: &#123; a: 1, b: &#x27;hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有 params 参数，以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为函数，</span></span><br><span class="line">              <span class="title function_">props</span>(<span class="params">&#123; $route &#125;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>, <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span> &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的字符串写法 --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的对象写法 --&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">          name:&#x27;xiangqing&#x27;,</span><br><span class="line">          query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        &gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        messageList: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;消息001&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;消息002&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;消息003&#x27; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Detail.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;!-- &lt;li&gt;a:&#123;&#123;a&#125;&#125;&lt;/li&gt; --&gt;</span><br><span class="line">    &lt;!-- &lt;li&gt;b:&#123;&#123;b&#125;&#125;&lt;/li&gt; --&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Detail&#x27;,</span><br><span class="line">    props: [&#x27;id&#x27;, &#x27;title&#x27;,],</span><br><span class="line">    /* computed: &#123;</span><br><span class="line">      id() &#123;</span><br><span class="line">        return this.$route.query.id</span><br><span class="line">      &#125;,</span><br><span class="line">      title() &#123;</span><br><span class="line">        return this.$route.query.title</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="router-link的replace属性"><a href="#router-link的replace属性" class="headerlink" title="router-link的replace属性"></a>router-link的replace属性</h3><ul><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录，路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ul><p><strong>Home.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home组件内容&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link replace class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;router-link</span><br><span class="line">            replace</span><br><span class="line">            class=&quot;list-group-item&quot;</span><br><span class="line">            active-class=&quot;active&quot;</span><br><span class="line">            to=&quot;/home/message&quot;</span><br><span class="line">          &gt;Message&lt;/router-link&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Home&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ul><li>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活<ol><li><code>this.$router.push(&#123;&#125;)</code>内传的对象与   <code>&lt;router-link&gt;</code>中的to相同</li><li><code>this.$router.replace(&#123;&#125;)</code></li><li><code>this.$router.forward()</code>前进</li><li><code>this.$router.back()</code>后退</li><li><code>this.$router.go(n)</code>可前进也可后退，n为正数前进n，为负数后退</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:xxx,</span><br><span class="line">    <span class="attr">title</span>:xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:xxx,</span><br><span class="line">    <span class="attr">title</span>:xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208242335710.png"></p><p><strong>Banner.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">      &lt;h2&gt;Vue Router Demo&lt;/h2&gt;</span><br><span class="line">      &lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;test&quot;&gt;测试一下go&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Banner&#x27;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      back() &#123;</span><br><span class="line">        this.$router.back()</span><br><span class="line">      &#125;,</span><br><span class="line">      forward() &#123;</span><br><span class="line">        this.$router.forward()</span><br><span class="line">      &#125;,</span><br><span class="line">      test() &#123;</span><br><span class="line">        this.$router.go(3)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的字符串写法 --&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 跳转路由并携带 params 参数，to的对象写法 --&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">          name:&#x27;xiangqing&#x27;,</span><br><span class="line">          query:&#123;</span><br><span class="line">            id:m.id,</span><br><span class="line">            title:m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        &gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">        &lt;button @click=&quot;pushShow(m)&quot;&gt;push查看&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;replaceShow(m)&quot;&gt;replace查看&lt;/button&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Message&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        messageList: [</span><br><span class="line">          &#123; id: &#x27;001&#x27;, title: &#x27;消息001&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;002&#x27;, title: &#x27;消息002&#x27; &#125;,</span><br><span class="line">          &#123; id: &#x27;003&#x27;, title: &#x27;消息003&#x27; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      pushShow(m) &#123;</span><br><span class="line">        this.$router.push(&#123;</span><br><span class="line">          name: &#x27;xiangqing&#x27;,</span><br><span class="line">          query: &#123;</span><br><span class="line">            id: m.id,</span><br><span class="line">            title: m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      replaceShow(m) &#123;</span><br><span class="line">        this.$router.replace(&#123;</span><br><span class="line">          name: &#x27;xiangqing&#x27;,</span><br><span class="line">          query: &#123;</span><br><span class="line">            id: m.id,</span><br><span class="line">            title: m.title</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ul><li>作用：让不展示的路由组件保持挂载，不被销毁</li><li>include 指的是组件名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h3><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态<br>具体名字：</p><ul><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ul><blockquote><p>这两个生命周期钩子需要配合前面的缓存路由组件使用（没有缓存路由组件不起效果）</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208252026541.png"></p><p><strong>News.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      news001</span><br><span class="line">      &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      news002</span><br><span class="line">      &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      news003</span><br><span class="line">      &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;News&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        opacity: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* beforeDestroy() &#123;</span><br><span class="line">      console.log(&#x27;New组件将被销毁&#x27;)</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">    &#125;, */</span><br><span class="line">    /* mounted() &#123;</span><br><span class="line">      this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">        this.opacity -= 0.01</span><br><span class="line">        if (this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">      &#125;, 16)</span><br><span class="line">    &#125;, */</span><br><span class="line">    activated() &#123;</span><br><span class="line">      console.log(&#x27;News组件被激活了&#x27;)</span><br><span class="line">      this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">        this.opacity -= 0.01</span><br><span class="line">        if (this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">      &#125;, 16)</span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line">      console.log(&#x27;News组件失活了&#x27;)</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ul><li>作用：对路由进行权限控制</li><li>分类：全局守卫、独享守卫、组件内守卫</li></ul><p><strong>全局守卫</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局前置守卫：初始化时、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">// 判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">// 权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>()<span class="comment">// 放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()<span class="comment">// 放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局后置守卫：初始化时、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>独享守卫</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件内守卫</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//进入守卫：通过路由规则，进入该组件时被调用</span><br><span class="line">beforeRouteEnter (to, from, next) &#123;... next()&#125;,</span><br><span class="line"></span><br><span class="line">//离开守卫：通过路由规则，离开该组件时被调用</span><br><span class="line">beforeRouteLeave (to, from, next) &#123;... next()&#125;,</span><br></pre></td></tr></table></figure><h4 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h4><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;关于&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;主页&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;新闻&#x27;</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;消息&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;详情&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为对象，该对象中的所有 key-value 都会以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: &#123; a: 1, b: &#x27;hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有 params 参数，以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为函数，</span></span><br><span class="line">              <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>, <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span> &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123; <span class="comment">// 判断是否需要鉴权</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h4><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;关于&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;主页&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;新闻&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">            <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123; <span class="comment">// 判断是否需要鉴权</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">next</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;消息&#x27;</span> &#125;,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">              <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">              <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;详情&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为对象，该对象中的所有 key-value 都会以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: &#123; a: 1, b: &#x27;hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有 params 参数，以 props 的形式传给 Detail 组件</span></span><br><span class="line">              <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">// props 的第一种写法，值为函数，</span></span><br><span class="line">              <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>, <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span> &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h4><p><strong>About.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是About的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;About&#x27;,</span><br><span class="line">    /* mounted() &#123;</span><br><span class="line">      console.log(this.$route)</span><br><span class="line">    &#125; */</span><br><span class="line"></span><br><span class="line">    // 通过路由规则，进入该组件时会被调用</span><br><span class="line">    beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">      console.log(&#x27;About---beforeRouteEnter&#x27;, to, from)</span><br><span class="line">      if (to.meta.isAuth) &#123; // 判断是否需要鉴权</span><br><span class="line">        if (localStorage.getItem(&#x27;school&#x27;) === &#x27;atguigu&#x27;) &#123;</span><br><span class="line">          next()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          alert(&#x27;学校名不对，无权限查看！&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 通过路由规则，离开该组件时会被调用</span><br><span class="line">    beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">      console.log(&#x27;About---beforeRouteLeave&#x27;, to, from)</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><ul><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 </li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式：<ol><li>地址干净，美观 </li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line"><span class="attr">routes</span>:[...]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="Vue-UI-组件库"><a href="#Vue-UI-组件库" class="headerlink" title="Vue UI 组件库"></a>Vue UI 组件库</h2><h3 id="常用UI组件库"><a href="#常用UI组件库" class="headerlink" title="常用UI组件库"></a>常用UI组件库</h3><p><strong>移动端常用UI组件库</strong></p><ul><li><a href="https://youzan.github.io/vant">Vant</a></li><li><a href="https://didi.github.io/cube-ui">Cube UI</a></li><li><a href="http://mint-ui.github.io/">Mint UI</a></li><li><a href="https://nutui.jd.com/#/">NutUI</a></li></ul><p><strong>PC端常用UI组件库</strong></p><ul><li><a href="https://element.eleme.cn/">Element UI</a></li><li><a href="https://www.iviewui.com/">IView UI</a></li></ul><h3 id="element-ui基本使用"><a href="#element-ui基本使用" class="headerlink" title="element-ui基本使用"></a>element-ui基本使用</h3><p>安装 element-ui：<code>npm i element-ui -S</code></p><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 ElementUI 组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">// 引入 ElementUI 全部样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 应用 EementUI</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button&gt;原生按钮&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-date-picker v-model=&quot;value1&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot;&gt;&lt;/el-date-picker&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208252234563.png"></p><h3 id="element-ui按需引入"><a href="#element-ui按需引入" class="headerlink" title="element-ui按需引入"></a>element-ui按需引入</h3><ul><li>安装 babel-plugin-component <code>npm i babel-plugin-component -D</code> </li><li>修改 babel-config-js</li></ul><p><strong>修改<code>babel-config-js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入 App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整引入</span></span><br><span class="line"><span class="comment">// 引入 ElementUI 组件库</span></span><br><span class="line"><span class="comment">// import ElementUI from &#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">// 引入 ElementUI 全部样式</span></span><br><span class="line"><span class="comment">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Row</span>, <span class="title class_">DatePicker</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Vue 的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 应用 EementUI</span></span><br><span class="line"><span class="comment">// Vue.use(ElementUI)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Button</span>.<span class="property">name</span>, <span class="title class_">Button</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Row</span>.<span class="property">name</span>, <span class="title class_">Row</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">DatePicker</span>.<span class="property">name</span>, <span class="title class_">DatePicker</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-基础-不依赖脚手架：万字精华总结</title>
      <link href="/posts/21850.html"/>
      <url>/posts/21850.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h2><ul><li>动态构建用户界面的渐进式 JavaScript 框架</li><li>作者：尤雨溪</li></ul><p><a href="https://cn.vuejs.org/">中文官网</a><br><a href="https://vuejs.org/">英文官网</a></p><h3 id="Vue特点"><a href="#Vue特点" class="headerlink" title="Vue特点"></a>Vue特点</h3><ul><li>采用组件化模式，提高代码复用率、且让代码更好维护</li><li>声明式编码，让编码人员无需直接操作DOM，提高开发效率</li></ul><h3 id="与其它-JS-框架的关联"><a href="#与其它-JS-框架的关联" class="headerlink" title="与其它 JS 框架的关联"></a>与其它 JS 框架的关联</h3><ul><li>借鉴 Angular 的模板和数据绑定技术</li><li>借鉴 React 的组件化和虚拟 DOM 技术</li></ul><h3 id="Vue周边库"><a href="#Vue周边库" class="headerlink" title="Vue周边库"></a>Vue周边库</h3><ul><li>vue-cli: vue 脚手架</li><li>vue-resource</li><li>axios</li><li>vue-router: 路由</li><li>vuex: 状态管理</li><li>element-ui: 基于 vue 的 UI 组件库(PC 端</li></ul><h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><ul><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>root容器里的代码被称为【Vue模板】</li><li>Vue实例和容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性</li><li>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的年龄是：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 阻止 vue 在启动时生成生产提示</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 创建 Vue 实例</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// el 用于指定当前 Vue 实例为哪个容器服务，值通常为 css 选择器字符串</span></span><br><span class="line">    <span class="comment">// data 中用于存储数据， 数据供 el 所指定的容器去使用，值暂时先写成一个对象</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">address</span>: <span class="string">&#x27;浙江丽水&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p><strong>Vue模板语法有2大类：</strong></p><ul><li><p>插值语法</p><p>功能：用于解析标签体内容</p><p>写法：，xxx是js表达式，且可以直接读取到data中的所有属性</p></li><li><p>指令语法</p><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…）</p><p>举例：v-bind:href&#x3D;“xxx” 或 简写为 :href&#x3D;“xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性</p><p>备注：Vue中有很多的指令，且形式都是：v-???，此处我们只是拿v-bind举个例子<br>​</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;h1&gt;插值语法：&lt;/h1&gt;</span><br><span class="line">  &lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;hr /&gt;</span><br><span class="line">  &lt;h1&gt;指令语法：&lt;/h1&gt;</span><br><span class="line">  &lt;a v-bind:href=&quot;url&quot; x=&quot;hello&quot;&gt;点我进入DouYing的博客&lt;/a&gt;</span><br><span class="line">  &lt;a :href=&quot;url&quot; :x=&quot;hello&quot;&gt;点我进入DouYing的博客&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      url: &#x27;http://www.douyingc.cn&#x27;,</span><br><span class="line">      hello: &#x27;你好&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p><strong>Vue中有2种数据绑定的方式：</strong></p><ul><li><p>单向绑定(v-bind)</p><p>语法：<code>v-bind:href =&quot;xxx&quot;</code> 或简写为 <code>:href</code></p><p>特点：数据只能从 data 流向页面</p></li><li><p>双向绑定(v-model)</p><p>语法：<code>v-model:value=&quot;xxx&quot;</code> 或简写为 <code>v-model=&quot;xxx&quot;</code></p><p>特点：数据不仅能从 data 流向页面，还能从页面流向 data</p></li></ul><p><strong>备注：</strong></p><ul><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</li><li>v-model只能应用在表单类元素（输入类元素）表单类元素，是用户可以操作的，标题类的标签，不可以输入（没有Value值），不能捕获用户的输入，无法影响数据的变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 普通写法 --&gt;</span><br><span class="line">  &lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;</span><br><span class="line">  &lt;br&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 简写 --&gt;</span><br><span class="line">  单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 如下代码是错误的，因为 v-model 只能应用在表单类元素(输入类元素)上 --&gt;</span><br><span class="line">  &lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h2><p><strong>el的两种写法：</strong></p><ul><li>new Vue时候配置el属性</li><li>先创建Vue实例，随后再通过app.$mount(‘#root’)指定el的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻止 vue 在启动时生成生产提示</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一种写法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 第二种写法</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="comment">// el: &#x27;#root&#x27;,</span></span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      app.$mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><strong>data的两种写法：</strong></p><ul><li>对象式</li><li>函数式（要求：data函数必须要返回一个对象return）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="comment">// data的第一种写法：对象式</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="comment">// data的第二种写法：函数式</span></span><br><span class="line">  <span class="comment">// 不能写成箭头函数，否则 this 指向 window</span></span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@@&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// 此处的 this 是 Vue 实例对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错</p><p><strong>一个重要的原则：</strong><br>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了</p><h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><ul><li>M：模型(Model) ：data中的数据</li><li>V：视图(View) ：模板代码</li><li>VM：视图模型(ViewModel)：Vue实例</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208071651287.png"></p><p><strong>观察发现：</strong></p><ul><li>data中所有的属性，最后都出现在了vm身上</li><li>vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用</li></ul><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 控制属性是否可以枚举，默认值是 false</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 控制属性是否可以被修改，默认值是 false</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 控制属实是否可以被删除，默认值是 false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><h3 id="get-和set"><a href="#get-和set" class="headerlink" title="get()和set()"></a>get()和set()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// value: 18,</span></span><br><span class="line">  <span class="comment">// enumerable: true, // 控制属性是否可以枚举，默认值是 false</span></span><br><span class="line">  <span class="comment">// writable: true, // 控制属性是否可以被修改，默认值是 false</span></span><br><span class="line">  <span class="comment">// configurable: true, // 控制属实是否可以被删除，默认值是 false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取了age属性&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值为&#x27;</span>, value);</span><br><span class="line">    number = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><h3 id="数据代理的定义"><a href="#数据代理的定义" class="headerlink" title="数据代理的定义"></a>数据代理的定义</h3><p>通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      obj.<span class="property">x</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208071727627.png"></p><p><strong>总结：</strong></p><ul><li><p>Vue中的数据代理：</p><p>通过vm对象来代理data对象中属性的操作（读&#x2F;写）</p></li><li><p>Vue中数据代理的好处：</p><p>更加方便的操作data中的数据</p></li><li><p>基本原理：</p><p>通过Object.defineProperty()把data对象中所有属性添加到vm上</p><p>为每一个添加到vm上的属性，都指定一个getter&#x2F;setter</p><p>在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性</p></li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208072153961.png"></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件基本使用"><a href="#事件基本使用" class="headerlink" title="事件基本使用"></a>事件基本使用</h3><ul><li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象</li><li>@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 简写 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event, 66)&quot;</span>&gt;</span>点我提示信息2(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 阻止 vue 在启动时生成生产提示</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">showInfo1</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(event.target.innerText);</span></span><br><span class="line">        <span class="comment">// console.log(this); // 此处的 this 是 vm</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;同学你好1&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">showInfo2</span>(<span class="params">number, a</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(event.target.innerText);</span></span><br><span class="line">        <span class="comment">// console.log(this); // 此处的 this 是 vm</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event, number)</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;同学你好2&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p><strong>Vue中的事件修饰符：</strong></p><ul><li><p>prevent：阻止默认事件（常用）</p><p>a标签跳转阻止跳转的默认行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.douyingc.cn&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>stop：阻止事件冒泡（常用）</p><p>阻止冒泡 点击的是按钮 冒泡到div身上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>once：事件只触发一次（常用）</p><p>事件只触发一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>capture：使用事件的捕获模式</p><p>使用事件的捕获模式事件,是先捕获再冒泡</p><ul><li>不加：在冒泡阶段执行代码</li><li>加：在捕获阶段执行代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box1&quot;</span> @click.<span class="property">capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span><br><span class="line">  div1</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;box2&quot;</span> @click=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span><br><span class="line">    div2</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span><br><span class="line">          <span class="comment">// console.log(e.target);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">showMsg</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">          <span class="comment">// alert(&#x27;同学你好！&#x27;)</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>self：只有event.target是当前操作的元素时才触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;demo1&quot;</span> @click.<span class="property">self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span><br><span class="line">      <span class="comment">// console.log(e.target);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p><p>wheel 鼠标滚轮事件，加上大数字的循环，本来是要等循环事件结束之后，才会执行滚轮事件，但是加上passive后就能在循环事件的同时执行滚轮事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    *&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.list</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: peru;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">li</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="line">&lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;</span><br><span class="line">    &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>      <script>  Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。  new Vue({      el:'#root',      data:{          name:'DouYing'      },      methods:{          demo(){              for (let i = 0; i < 100000; i++) {                  console.log('#')              }              console.log('累坏了')          }  })  </script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 修饰符可以连续使用，用多个点连接</span><br><span class="line"></span><br><span class="line">  先阻止默认行为 再阻止冒泡</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  &lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;</span><br><span class="line">  &lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">  &lt;a href=&quot;https://www.douyingc.cn&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><strong>Vue中常用的按键别名：</strong></p><ul><li>回车 &#x3D;&gt; enter</li><li>删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</li><li>退出 &#x3D;&gt; esc</li><li>空格 &#x3D;&gt; space</li><li>换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</li><li>上 &#x3D;&gt; up</li><li>下 &#x3D;&gt; down</li><li>左 &#x3D;&gt; left</li><li>右 &#x3D;&gt; right</li></ul><p><strong>Vue未提供别名的按键：</strong></p><p>可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p><strong>系统修饰键（用法特殊）：</strong>ctrl、alt、shift、meta</p><ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合keydown使用：正常触发事件</li></ul><p><strong>也可以使用keyCode去指定具体的按键（不推荐）</strong></p><p><strong>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 按下回车 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 CapsLock 切换大小写按键 多个单词使用 caps-lock</span></span><br><span class="line"><span class="comment">  有些特殊的按键，无法绑定，举例：特殊键盘的控制音量键</span></span><br><span class="line"><span class="comment">  top 键有些特殊 是失去焦点事件 只能配合keydown使用</span></span><br><span class="line"><span class="comment">  可以使用keyCode去指定具体的按键（不推荐）不同的键盘编码可能不统一 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名 （不推荐） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.huiche</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 只用按ctrl + y 时才有效(系统修饰键 后面可以 加 按键) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.ctrl.y</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span> <span class="comment">// 定义了一个别名按钮 huiche</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showInfo</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(e.key, e.keyCode);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="姓名案例-插值语法"><a href="#姓名案例-插值语法" class="headerlink" title="姓名案例-插值语法"></a>姓名案例-插值语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">  名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">  全名：&lt;span&gt;&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      firstName: &#x27;张&#x27;,</span><br><span class="line">      lastName: &#x27;三&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="姓名案例-methods"><a href="#姓名案例-methods" class="headerlink" title="姓名案例-methods"></a>姓名案例-methods</h3><p>数据发生改变Vue一定会重写解析模板，并更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">  名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">  全名：&lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      firstName: &#x27;张&#x27;,</span><br><span class="line">      lastName: &#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fullName() &#123;</span><br><span class="line">        console.log(&#x27;@---fullName&#x27;);</span><br><span class="line">        return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性-1"><a href="#计算属性-1" class="headerlink" title="计算属性"></a>计算属性</h3><ul><li><p><strong>定义</strong>：要用的属性不存在，要通过已有属性计算得来</p></li><li><p><strong>原理</strong>：底层借助了Object.defineProperty方法提供的getter和setter</p></li><li><p><strong>get函数什么时候执行？</strong></p><p>初次读取时会执行一次</p><p>当依赖的数据发生改变时会被再次调用</p></li><li><p><strong>优势</strong>：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p></li><li><p><strong>备注</strong>：</p><p>计算属性最终会出现在vm上，直接读取使用即可</p><p>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">  名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">  全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      firstName: &#x27;张&#x27;,</span><br><span class="line">      lastName: &#x27;三&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullName: &#123;</span><br><span class="line">        // get有什么用？ 当有人读取 fullName 时，get 就会被调用，且返回值就作为 fullName 的值</span><br><span class="line">        // get什么时候调用？</span><br><span class="line">        // 1.初次读取 fullName 时</span><br><span class="line">        // 2.所依赖的数据发生变化时</span><br><span class="line">        get() &#123;</span><br><span class="line">          console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">          console.log(this) // 此处的this 指向 vm</span><br><span class="line">          return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        // set 什么时候调用？当 fullName 被修改时</span><br><span class="line">        // set 不是必须写的, 如果确定数据只读,就可以不用书写set </span><br><span class="line">        set(value) &#123;</span><br><span class="line">          console.log(&#x27;set&#x27;, value)</span><br><span class="line">          // 张-三</span><br><span class="line">          const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">          this.firstName = arr[0]</span><br><span class="line">          this.lastName = arr[1]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性简写-只读时可以使用"><a href="#计算属性简写-只读时可以使用" class="headerlink" title="计算属性简写(只读时可以使用)"></a>计算属性简写(只读时可以使用)</h3><p>计算属性更多的情况是不修改，呈现给用户看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line"><span class="attr">fullName</span>: &#123;</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 此处的this 指向 vm</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, value)</span><br><span class="line">            <span class="comment">// 张-三</span></span><br><span class="line">            <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><h3 id="天气案例（没用到监视属性）"><a href="#天气案例（没用到监视属性）" class="headerlink" title="天气案例（没用到监视属性）"></a>天气案例（没用到监视属性）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">  &lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy 可以写一些简单的语句 --&gt;</span><br><span class="line">  &lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      isHot: true</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      info() &#123;</span><br><span class="line">        return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeWeather() &#123;</span><br><span class="line">        this.isHot = !this.isHot</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="监视属性watch（也可以监视计算属性）"><a href="#监视属性watch（也可以监视计算属性）" class="headerlink" title="监视属性watch（也可以监视计算属性）"></a>监视属性watch（也可以监视计算属性）</h3><ul><li><p>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p></li><li><p>监视的属性必须存在，才能进行监视</p></li><li><p>监视的两种写法：</p><p>new Vue时传入watch配置</p><p>通过vm.$watch监视</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      isHot: true</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      info() &#123;</span><br><span class="line">        return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeWeather() &#123;</span><br><span class="line">        this.isHot = !this.isHot</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      isHot: &#123;</span><br><span class="line">        immediate: true, // 初始化时让 handler 调用一下</span><br><span class="line">        // handel 什么时候调用？当 isHot 发生改变时</span><br><span class="line">        handler(newValue, oldValue) &#123;</span><br><span class="line">          console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue) // 参数：newValue,oldValue 可以查看监视前的数值,和修改后的数值</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">  vm.$watch(&#x27;isHot&#x27;, &#123;</span><br><span class="line">    immediate: true, // 初始化时让 handler 调用一下</span><br><span class="line">    // handel 什么时候调用？当 isHot 发生改变时</span><br><span class="line">    handler(newValue, oldValue) &#123;</span><br><span class="line">      console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue) // 参数：newValue,oldValue 可以查看监视前的数值,和修改后的数值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><ul><li><p>Vue中的watch默认不监测对象内部值的改变（一层）</p></li><li><p>配置deep:true可以监测对象内部值改变（多层）</p></li><li><p>备注：</p><p>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</p><p>使用watch时根据数据的具体结构，决定是否采用深度监视</p></li></ul><p><strong>只监测a的变化 不监测b</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;h1&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;a的值是：&#123;&#123;numbers.a&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;numbers.a++&quot;&gt;点我让a+1&lt;/button&gt;</span><br><span class="line">  &lt;h2&gt;b的值是：&#123;&#123;numbers.b&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;numbers.b++&quot;&gt;点我让b+1&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      isHot: true,</span><br><span class="line">      numbers: &#123;</span><br><span class="line">        a: 1,</span><br><span class="line">        b: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      info() &#123;</span><br><span class="line">        return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeWeather() &#123;</span><br><span class="line">        this.isHot = !this.isHot</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      isHot: &#123;</span><br><span class="line">        // immediate: true, // 初始化时让 handler 调用一下</span><br><span class="line">        // handel 什么时候调用？当 isHot 发生改变时</span><br><span class="line">        handler(newValue, oldValue) &#123;</span><br><span class="line">          console.log(&#x27;isHot被修改了&#x27;, newValue, oldValue) // 参数：newValue,oldValue 可以查看监视前的数值,和修改后的数值</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 监视多级结构中某个属性的变化</span><br><span class="line">      &#x27;numbers.a&#x27;: &#123;</span><br><span class="line">        handler() &#123;</span><br><span class="line">          console.log(&#x27;a被修改了&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>监视 a 和 b的变化（即监视整个number）</strong></p><p>配置项 deep:true 开启深度监测</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>a的值是：&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>b的值是：&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 阻止 vue 在启动时生成生产提示</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">isHot</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">numbers</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="attr">isHot</span>: &#123;</span><br><span class="line">        <span class="comment">// immediate: true, // 初始化时让 handler 调用一下</span></span><br><span class="line">        <span class="comment">// handel 什么时候调用？当 isHot 发生改变时</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue) <span class="comment">// 参数：newValue,oldValue 可以查看监视前的数值,和修改后的数值</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 监视多级结构中某个属性的变化</span></span><br><span class="line">      <span class="attr">numbers</span>: &#123;</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers被修改了&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="监视属性简写"><a href="#监视属性简写" class="headerlink" title="监视属性简写"></a>监视属性简写</h3><p>要求： 不需要配置项时，可以使用简写</p><ul><li><p><strong>watch 方式一的正常写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">isHot</span>: &#123;</span><br><span class="line">          <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue) </span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>watch 方式一的简写 不允许书写成箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">isHot</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>watch 方式二的正常写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>watch 方式二的简写 不允许书写成箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, <span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>, newValue, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="watch-和-computed的区别"><a href="#watch-和-computed的区别" class="headerlink" title="watch 和 computed的区别"></a>watch 和 computed的区别</h3><ul><li><p><strong>computed和watch之间的区别：</strong></p><p>computed能完成的功能，watch都可以完成</p><p>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</p></li><li><p><strong>两个重要的小原则：</strong></p><p>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</p><p>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象</p></li><li><p><strong>需要在姓名改变时，延迟1s后实现才改变全名，只能使用watch</strong></p><p>定时器 setTimeout 所指定的函数不是 Vue 所管理的函数，要写成箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">firstName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">lastName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>computed计算属性不能开启异步任务</strong></p><p>因为其实现靠的是return 返回值，此时把return的返回值返回给了 setTimeout，则fullName没有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"> <span class="attr">fullName</span>:&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><ul><li><p>class样式</p><p>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组</p><p>​字符串写法适用于：类名不确定，要动态获取</p><p>​对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</p><p>​数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</p></li><li><p>style样式</p><p>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值</p><p>:style&#x3D;”[a,b]”其中a、b是样式对象</p></li></ul><h3 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h3><ul><li><p><strong>字符串写法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;DouYing&#x27;,</span><br><span class="line">mood:&#x27;normal&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">changeMood()&#123;</span><br><span class="line">this.mood = &#x27;happy&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组写法</strong></p><p>div 初始有 basic 样式，日后可能增加样式多少个不确定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定 <span class="keyword">class</span> 样式--数组写法，适用于：要绑定样式个数不确定，名字也不确定 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;DouYing</span></span><br><span class="line"><span class="string">mood:&#x27;</span>normal<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                classArr: [&#x27;</span>atguigu1<span class="string">&#x27;, &#x27;</span>atguigu2<span class="string">&#x27;, &#x27;</span>atguigu3<span class="string">&#x27;],</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>对象写法</strong></p><p>div 初始有 basic 样式 切换text1 和 text2 （切换的个数确定，名字也确定，不确定的是到底使用不使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定 <span class="keyword">class</span> 样式--对象写法，适用于：要绑定样式个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">classObj</span>:&#123;</span><br><span class="line"><span class="attr">atguigu1</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">atguigu2</span>:<span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h3><ul><li><p><strong>常规写法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      styleObj: &#123;</span><br><span class="line">        fontSize: &#x27;40px&#x27;,</span><br><span class="line">        color: &#x27;red&#x27;,</span><br><span class="line">        backgroundColor: &#x27;orange&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组写法（很少用）</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">// 方法1 两个对象用数组引用</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;[styleObj,styleObj2]&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">// 方法2 在定义时就将两个对象定义为一个数组</span><br><span class="line"> &lt;div class=&quot;basic&quot; :style=&quot;[styleArr]&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">// 方法1</span><br><span class="line">             styleObj:&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;red&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">             styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;orange&#x27; // 背景颜色</span><br><span class="line">&#125;,</span><br><span class="line">// 方法2</span><br><span class="line">styleArr:[</span><br><span class="line">&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;blue&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">backgroundColor:&#x27;gray&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul><li><p>v-if</p><ul><li><p>写法</p><p>v-if&#x3D;”表达式” </p><p>v-else-if&#x3D;”表达式”</p><p>v-else&#x3D;”表达式”</p></li><li><p>适用于：切换频率较低的场景</p></li><li><p>特点：不展示的DOM元素直接被移除</p></li><li><p>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”</p></li></ul></li><li><p>v-show</p><ul><li>写法：v-show&#x3D;”表达式”</li><li>适用于：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li></ul></li></ul><p>​            </p><ul><li>备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</li></ul><h3 id="让div-隐藏-v-show"><a href="#让div-隐藏-v-show" class="headerlink" title="让div 隐藏 v-show"></a>让div 隐藏 v-show</h3><p>不仅可以可以写 Boolean 值 v-show&#x3D;“false”，也可以写表达式 用表达式的结果来进行判断 v-show&#x3D;“1 &#x3D;&#x3D;&#x3D; 1”，此时结构存在但是不显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 使用 v-show 做条件渲染 --&gt;</span><br><span class="line">  &lt;!-- &lt;h1 v-show=&quot;a&quot;&gt;欢迎&#123;&#123;name&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;h1 v-show=&quot;1 === 1&quot;&gt;欢迎&#123;&#123;name&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      n: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-v-if进行条件渲染"><a href="#使用-v-if进行条件渲染" class="headerlink" title="使用 v-if进行条件渲染"></a>使用 v-if进行条件渲染</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 使用 v-if 做条件渲染 --&gt;</span><br><span class="line">  &lt;!-- &lt;h1 v-if=&quot;false&quot;&gt;欢迎&#123;&#123;name&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;h1 v-if=&quot;1 === 1&quot;&gt;欢迎&#123;&#123;name&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      n: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if与template的配合使用"><a href="#v-if与template的配合使用" class="headerlink" title="v-if与template的配合使用"></a>v-if与template的配合使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-if 与 template 配合使用 --&gt;</span><br><span class="line">&lt;template v-if=&quot;n === 1&quot;&gt;</span><br><span class="line">  &lt;h2&gt;DouYing&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;浙江&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>v-for指令:</p><ul><li>用于展示列表数据</li><li>语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li></ul><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p><strong>接受一个参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;p in persons&quot; :key=&quot;p.id&quot;&gt;&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      persons: [</span><br><span class="line">        &#123; id: &#x27;001&#x27;, name: &#x27;张三&#x27;, age: 18 &#125;,</span><br><span class="line">        &#123; id: &#x27;002&#x27;, name: &#x27;李四&#x27;, age: 19 &#125;,</span><br><span class="line">        &#123; id: &#x27;003&#x27;, name: &#x27;王五&#x27;, age: 20 &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>接受两个参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历对象 --&gt;</span><br><span class="line">  &lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(value,k) in car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">      &#123;&#123;k&#125;&#125;--&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      car: &#123;</span><br><span class="line">        name: &#x27;奥迪A8&#x27;,</span><br><span class="line">        price: &#x27;70W&#x27;,</span><br><span class="line">        color: &#x27;黑色&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="遍历字符串（用得少）"><a href="#遍历字符串（用得少）" class="headerlink" title="遍历字符串（用得少）"></a>遍历字符串（用得少）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历字符串 --&gt;</span><br><span class="line">  &lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(char,index) in str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123;char&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      str: &#x27;hello&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="遍历指定次数（使用少）"><a href="#遍历指定次数（使用少）" class="headerlink" title="遍历指定次数（使用少）"></a>遍历指定次数（使用少）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">  &lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(number,index) in 5&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123;number&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h3><p><strong>面试题：react、vue中的key有什么作用？（key的内部原理）</strong></p><ul><li><p>虚拟DOM中key的作用：</p><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】 </p><p>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p></li><li><p>diff算法对比规则：</p><p>(1)旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>​①若虚拟DOM中内容没变, 直接使用之前的真实DOM</p><p>​②若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p><p>(2)旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​     创建新的真实DOM，随后渲染到到页面</p></li><li><p>用index作为key可能会引发的问题：</p><p>​①若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><p>​会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低（因为要对后续的Dom重新新建）</p><p>​②如果结构中还包含输入类的DOM：</p><p>​会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题</p></li><li><p>开发中如何选择key?:</p><p>①最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值</p><p>②如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</p><p>③不写key值时，Vue会把的索引值index自动作为key</p></li></ul><p><strong>示例-数组中添加一个老刘</strong></p><p>添加的位置在数组的前面，会出现问题（索引为0，索引后移）；添加在数组的后面不会出现问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表（遍历数据）&lt;/h2&gt;</span><br><span class="line">  &lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      persons: [</span><br><span class="line">        &#123; id: &#x27;001&#x27;, name: &#x27;张三&#x27;, age: 18 &#125;,</span><br><span class="line">        &#123; id: &#x27;002&#x27;, name: &#x27;李四&#x27;, age: 19 &#125;,</span><br><span class="line">        &#123; id: &#x27;003&#x27;, name: &#x27;王五&#x27;, age: 20 &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        const p = &#123; id: &#x27;004&#x27;, name: &#x27;老刘&#x27;, age: 40 &#125;</span><br><span class="line">        this.persons.unshift(p)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><p>数据串行，老刘–40把张三–18顶下去了</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208091709385.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208091709543.png"></p><p><strong>解决方法：</strong> </p><p>使用 p.id 作为key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表（遍历数据）&lt;/h2&gt;</span><br><span class="line">  &lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>虚拟Dom的对比算法</strong></p><p><strong>index作为key产生的问题</strong></p><p>1.diff首先对比生成的两个虚拟DOM 张三-18 和 老刘-30，发现不同，打个X</p><p>2.再对比两个input，发现相同打个X</p><p>3.再用相同的方法把三行都对比后，开始生成新的真实DOM</p><p>4.在这个新的真实DOM里，老刘-30是新的，但是input是沿用原来的，所以输入框内容包含“张三-18”</p><p>5.生成最后一个王五-20的时候，生成的input是新的，所以输入框内容为空<br><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208091739123.png"></p><p><strong>id作为key的作用</strong></p><p>1.同样是对比两个虚拟DOM，但这一次有任何一个不同，内容都不会沿用</p><p>2.对比第一行，老刘-30 和 张三-18不同，在创建新的DOM时，直接创建新的内容 即老刘-30 空白input</p><p>3.对比其他行，都一样，所以都引用的原来的数据</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208091739081.png"></p><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><p><strong>watch方法过滤（少用）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in filPersons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 用watch 实现</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      keyWord: &#x27;&#x27;,</span><br><span class="line">      persons: [</span><br><span class="line">        &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 18, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 19, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 20, sex: &#x27;男&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 21, sex: &#x27;男&#x27; &#125;</span><br><span class="line">      ],</span><br><span class="line">      filPersons: []</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      keyWord: &#123;</span><br><span class="line">        immediate: true, // 不等发生改变时就调用了一次（否则一开始没有数据）</span><br><span class="line">        handler(val) &#123;</span><br><span class="line">          this.filPersons = this.persons.filter((p) =&gt; &#123;</span><br><span class="line">            return p.name.indexOf(val) !== -1</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>computed方法过滤（常用）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in filPersons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 用 computed 实现</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      keyWord: &#x27;&#x27;,</span><br><span class="line">      persons: [</span><br><span class="line">        &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 18, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 19, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 20, sex: &#x27;男&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 21, sex: &#x27;男&#x27; &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      filPersons() &#123;</span><br><span class="line">        return this.filPersons = this.persons.filter((p) =&gt; &#123;</span><br><span class="line">          return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">  &lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;sortType = 1&quot;&gt;年龄升序&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;sortType = 2&quot;&gt;年龄降序&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;sortType = 0&quot;&gt;原顺序&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(p,index) in filPersons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 用 computed 实现</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      keyWord: &#x27;&#x27;,</span><br><span class="line">      sortType: 0, // 0 原顺序 1 降序 2 升序</span><br><span class="line">      persons: [</span><br><span class="line">        &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 22, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 18, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 28, sex: &#x27;男&#x27; &#125;,</span><br><span class="line">        &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 24, sex: &#x27;男&#x27; &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      filPersons() &#123;</span><br><span class="line">        const arr = this.filPersons = this.persons.filter((p) =&gt; &#123;</span><br><span class="line">          return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">        &#125;)</span><br><span class="line">        // 判断是否需要排序</span><br><span class="line">        if (this.sortType) &#123;</span><br><span class="line">          arr.sort((p1, p2) =&gt; &#123;</span><br><span class="line">            return this.sortType === 1 ? p2.age - p1.age : p1.age - p2.age</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        return arr</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue检测数据改变的原理"><a href="#Vue检测数据改变的原理" class="headerlink" title="Vue检测数据改变的原理"></a>Vue检测数据改变的原理</h2><h3 id="更新数据时遇到的一个问题"><a href="#更新数据时遇到的一个问题" class="headerlink" title="更新数据时遇到的一个问题"></a>更新数据时遇到的一个问题</h3><p><strong>成功</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">updateMei</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;马老师&#x27;</span> <span class="comment">// 奏效</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">age</span> = <span class="number">50</span> <span class="comment">// 奏效</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span> <span class="comment">// 奏效</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>失败 数据已经修改成功，但是Vue 没有发现数据的改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">updateMei</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">persons</span>[<span class="number">0</span>] = &#123; <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;马老师&#x27;</span>, <span class="attr">age</span>: <span class="number">50</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>成功（后面解释原因）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">updateMei</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马老师&#x27;</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;) <span class="comment">//奏效</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue监测数据改变的原理–对象"><a href="#Vue监测数据改变的原理–对象" class="headerlink" title="Vue监测数据改变的原理–对象"></a>Vue监测数据改变的原理–对象</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208092302972.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208092302974.png"></p><p><strong>原理核心代码如下</strong><br>相当于创建了一个function Observer(obj)，用这个方法为每一个对象赋setter和getter方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;DouYing&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;浙江丽水&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个监视的实例对象，用于监视 data 中属性的变化</span></span><br><span class="line">  <span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">Observer</span>(data)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obs)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备一个 vm 实例对象</span></span><br><span class="line">  <span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line">  vm.<span class="property">_data</span> = data = obs</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 汇总对象中所有的属性形成一个数组</span></span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, k, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> obj[k]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>被修改了，我要去解析模板，生成虚拟DOM`</span>)</span><br><span class="line">          obj[k] = val</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-set方法（Vue-Api）"><a href="#Vue-set方法（Vue-Api）" class="headerlink" title="Vue.set方法（Vue Api）"></a>Vue.set方法（Vue Api）</h3><ul><li>管理者想添加 Vue 尚不完善的功能</li><li>如：添加一个性别，当时性别有没有定义下来，随着用户的交互，代码的发现，需要性别</li></ul><p><strong>解决方式（两种方式）：</strong></p><ul><li><p>Vue.set(target,key,val) 在Vue身上</p><p>​target 目标（往谁的身上添加属性）</p><p>​key 什么属性</p><p>​val 属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">_data</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>vm.$set(vm._data.student,‘sex’,‘男’) 在vm身上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$set(vm.<span class="property">_data</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>上面两种方法 _data均可省略</p><p><strong>局限性</strong></p><ul><li>只能对对象属性用set</li><li>不能对Vue实例，或Vue实例的根数据对象用set，即不能直接往data里插一个新的数据<br><strong>添加一个功能点我给学生添加一个性别</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;addSex&quot;&gt;添加一个性别属性，默认值是男&lt;/button&gt;</span><br><span class="line">&lt;h2&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addSex()&#123;</span><br><span class="line">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)  或者</span><br><span class="line">this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue监测数据改变的原理–数组"><a href="#Vue监测数据改变的原理–数组" class="headerlink" title="Vue监测数据改变的原理–数组"></a>Vue监测数据改变的原理–数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">   <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span><br><span class="line">   <span class="attr">friends</span>:[</span><br><span class="line">   &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span><br><span class="line">   ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>直接用下标修改会因为下图原因（因为数组保存的是个字符串，Vue不会对每个字符去设置一个getter和setter）</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208100009430.png"></p><p>要修改数组要通过 Vue 默认修改数组的方法 (7个操作数组的方法)<br>（注：这些方法是将Array中的同名方法进行封装，在里面插入setter和getter）</p><ul><li><p>push 最后的位置新增一个元素</p></li><li><p>pop 删除最后一个元素</p></li><li><p>shift 删除第一个元素</p></li><li><p>unshift 最前面添加一个元素</p></li><li><p>splice 指定位置插入一个元素，或者删除一个元素，或者替换调一个元素</p></li><li><p>sort 数组排序</p></li><li><p>reverse 翻转数组</p></li><li><p>filter 不影响原数组，但是还想使用filter 怎么办？</p><p>​把过滤生成的新数组，替换掉原来的数组</p></li></ul><p>共同点：可以修改数组，引起数组的改变</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208100009429.png"></p><h3 id="Vue数据监测总结"><a href="#Vue数据监测总结" class="headerlink" title="Vue数据监测总结"></a>Vue数据监测总结</h3><p>Vue监视数据的原理：</p><ul><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何监测对象中的数据</p><p>​通过setter实现监视，且要在new Vue时就传入要监测的数据</p><p>​(1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​(2).如需给后添加的属性做响应式，请使用如下API：</p><p>​Vue.set(target，propertyName&#x2F;index，value) 或 </p><p>​vm.$set(target，propertyName&#x2F;index，value)</p></li><li><p>如何监测数组中的数据？</p><p>​通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​(1).调用原生对应的方法对数组进行更新</p><p>​(2).重新解析模板，进而更新页面</p></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><p>​1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​2.Vue.set() 或 vm.$set()</p></li></ul><p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性</p><p><strong>综合案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;student.sex = &#x27;未知&#x27; &quot;&gt;修改性别&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;addFirend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;updateFirstFirendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;removeRap&quot;&gt;过滤掉爱好中的Rap&lt;/button&gt; &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;爱好：&lt;/h3&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123;h&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h3&gt;朋友们：&lt;/h3&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      student: &#123;</span><br><span class="line">        name: &#x27;DouYing&#x27;,</span><br><span class="line">        age: 20,</span><br><span class="line">        hobby: [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;Rap&#x27;],</span><br><span class="line">        friends: [</span><br><span class="line">          &#123; name: &#x27;jerry&#x27;, age: 35 &#125;,</span><br><span class="line">          &#123; name: &#x27;tony&#x27;, age: 36 &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addSex() &#123;</span><br><span class="line">        // Vue.set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span><br><span class="line">        this.$set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      addFirend() &#123;</span><br><span class="line">        this.student.friends.unshift(&#123; name: &#x27;jack&#x27;, age: 70 &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      updateFirstFirendName() &#123;</span><br><span class="line">        this.student.friends[0].name = &#x27;张三&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      addHobby() &#123;</span><br><span class="line">        this.student.hobby.push(&#x27;ikun&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      updateHobby() &#123;</span><br><span class="line">        // this.student.hobby.splice(0, 1, &#x27;开车&#x27;)</span><br><span class="line">        // Vue.set(this.student.hobby, 0, &#x27;开车&#x27;)</span><br><span class="line">        this.$set(this.student.hobby, 0, &#x27;开车&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      removeRap() &#123;</span><br><span class="line">        this.student.hobby = this.student.hobby.filter((h) =&gt; &#123;</span><br><span class="line">          return h !== &#x27;Rap&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><p>  <strong>收集表单数据：</strong></p><ul><li><p><code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值</p></li><li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值</p></li><li><p><code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><p>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>2.配置input的value属性:</p><p>​(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​(2)v-model的初始值是数组，那么收集的的就是value组成的数组</p></li><li><p>备注：v-model的三个修饰符：</p><p>lazy：失去焦点再收集数据</p><p>number：输入字符串转为有效的数字</p><p>trim：输入首尾空格过滤</p></li></ul><p><strong>综合案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;demo&quot;&gt;</span><br><span class="line">    账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    性别：</span><br><span class="line">    男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;</span><br><span class="line">    女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    唱&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;sing&quot;&gt;</span><br><span class="line">    跳&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;dance&quot;&gt;</span><br><span class="line">    Rap&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;rap&quot;&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    所属校区</span><br><span class="line">    &lt;select v-model=&quot;userInfo.city&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;zhejiang&quot;&gt;浙江&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    其他信息：</span><br><span class="line">    &lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.douyingc.cn&quot;&gt;《用户协议》&lt;/a&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      userInfo: &#123;</span><br><span class="line">        account: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;,</span><br><span class="line">        age: &#x27;&#x27;,</span><br><span class="line">        sex: &#x27;female&#x27;,</span><br><span class="line">        hobby: [],</span><br><span class="line">        city: &#x27;beijing&#x27;,</span><br><span class="line">        other: &#x27;&#x27;,</span><br><span class="line">        agree: &#x27;&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      demo() &#123;</span><br><span class="line">        console.log(JSON.stringify(this.userInfo))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><strong>过滤器：</strong></p><ul><li><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p></li><li><p>语法：</p><p>1.注册过滤器：<code>Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;</code></p><p>2.使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></p></li><li><p>备注：</p><p>1.过滤器也可以接收额外参数、多个过滤器也可以串联</p><p>2.并没有改变原本的数据, 是产生新的对应的数据</p></li></ul><p><strong>综合案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;h1&gt;显示格式化后的时间&lt;/h1&gt;</span><br><span class="line">  &lt;!-- 计算属性实现 --&gt;</span><br><span class="line">  &lt;h2&gt;计算属性实现，现在是：&#123;&#123;fmtTime&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- methods 实现 --&gt;</span><br><span class="line">  &lt;h2&gt;methods实现，现在是：&#123;&#123;getFmtTime()&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 过滤器实现 --&gt;</span><br><span class="line">  &lt;h2&gt;过滤器实现，现在是：&#123;&#123;time | timeFormater&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;!-- 过滤器实现（传参） --&gt;</span><br><span class="line">  &lt;h2&gt;过滤器实现（传参），现在是：&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD&#x27;) | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2 :x=&quot;msg | mySlice&quot;&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;root2&quot;&gt;&#123;&#123;msg | mySlice&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  // 全局过滤器</span><br><span class="line">  Vue.filter(&#x27;mySlice&#x27;, function (value) &#123;</span><br><span class="line">    return value.slice(0, 4)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      time: 1660119657557, // 时间戳</span><br><span class="line">      msg: &#x27;hello，DouYing&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fmtTime() &#123;</span><br><span class="line">        return dayjs(this.time).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getFmtTime() &#123;</span><br><span class="line">        return dayjs(this.time).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 局部过滤器</span><br><span class="line">    filters: &#123;</span><br><span class="line">      timeFormater(value, str = &#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#123;</span><br><span class="line">        console.log(&#x27;@&#x27;, value)</span><br><span class="line">        return dayjs(value).format(str)</span><br><span class="line">      &#125;,</span><br><span class="line">      /* mySlice(value) &#123;</span><br><span class="line">        return value.slice(0, 4)</span><br><span class="line">      &#125; */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root2&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: &#x27;你好，DouYing&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><p><strong>常用指令：</strong></p><ul><li>v-text : 更新元素的 textContent（不会解析标签）</li><li>v-html : 更新元素的 innerHTML（会解析标签）</li><li>v-bind  : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for   : 遍历数组&#x2F;对象&#x2F;字符串</li><li>v-on    : 绑定事件监听, 可简写为@</li><li>v-if    : 条件渲染（动态控制节点是否存存在）</li><li>v-else  : 条件渲染（动态控制节点是否存存在）</li><li>v-show  : 条件渲染 (动态控制节点是否展示)</li><li>v-cloak : 如果js文件是在div容器后才引入，那么会出现先渲染div界面，但却没有vue的内容，加上v-cloak，可以使得div容器先隐藏起来，在引入之后再自动出现，与 css 配合: [v-cloak] { display: none }</li></ul><h3 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h3><p><strong>v-text指令：</strong></p><ul><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：v-text会替换掉节点中的内容，则不会</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div v-text=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      str: &#x27;&lt;h2&gt;你好啊！&lt;/h2&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h3><p><strong>v-html指令：</strong></p><ul><li><p>作用：向指定节点中渲染包含html结构的内容</p></li><li><p>与插值语法的区别：</p><p>1.v-html会替换掉节点中所有的内容，则不会</p><p>2.v-html可以识别html结构</p></li><li><p>严重注意：v-html有安全性问题！！！！</p><p>1.在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</p><p>2.一定要在可信的内容上使用v-html，永不要用在用户提交的内容上</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      str: &#x27;&lt;h2&gt;你好啊！&lt;/h2&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>泄露问题</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208101957144.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208101958453.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">      str: &#x27;&lt;h2&gt;你好啊！&lt;/h2&gt;&#x27;,</span><br><span class="line">      str2: &#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;找到你想要的资源了！&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208101958259.png"></p><h3 id="v-clock指令"><a href="#v-clock指令" class="headerlink" title="v-clock指令"></a>v-clock指令</h3><p><strong>v-cloak指令（没有值）：</strong></p><ul><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    [v-clock] &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1 v-clock&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 在 div 后引入 Vue --&gt;</span><br><span class="line">  &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  console.log(1)</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      name: &#x27;DouYing&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><p><strong>v-once指令：</strong></p><ul><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1 v-once&gt;初始化的n值是：&#123;&#123;n&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      n: &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h3><p><strong>v-pre指令：</strong></p><ul><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1 v-pre&gt;Vue其实很简单&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      n: &#x27;1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p><strong>自定义指令总结：</strong></p><ul><li><p>定义语法：</p><p>1.局部指令</p><p>new Vue({ new Vue({</p><p>directives:{指令名:配置对象} 或 directives{指令名:回调函数}</p><p>}) })</p><p>2.全局指令：</p><p>Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</p></li><li><p>配置对象中常用的3个回调</p><p>1.bind：指令与元素成功绑定时调用</p><p>2.inserted：指令所在元素被插入页面时调用</p><p>3.update：指令所在模板结构被重新解析时调用</p></li><li><p>备注</p><p>1.指令定义时不加v-，但使用时要加v-；</p><p>2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p></li></ul><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍<br>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点</p><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><p>函数式 属于 对象式 的简写方式 只是写了 bind、update 没有书写 inserted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">      // big 函数何时会被调用？ 1.指令与元素成功绑定时（一上来） 2.指令所在的模板被重新解析时</span><br><span class="line">      // element 真实的Dom元素 binding 本次绑定的所有信息</span><br><span class="line">      big(element, binding) &#123;</span><br><span class="line">        // 如何验证 element 是真实 DOM</span><br><span class="line">        // 方式一:</span><br><span class="line">        console.dir(element) // 在控制台查看 身上拥有所有真实Dom的属性和方法</span><br><span class="line">        // // 方式二:</span><br><span class="line">        console.log(element instanceof HTMLElement) // instanceof 谁是不是谁的实例 控制台 true</span><br><span class="line"></span><br><span class="line">        element.innerText = binding.value * 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="对象式"><a href="#对象式" class="headerlink" title="对象式"></a>对象式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">      name: &#x27;DouYing&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">      // big 函数何时会被调用？ 1.指令与元素成功绑定时（一上来） 2.指令所在的模板被重新解析时</span><br><span class="line">      // element 真实的Dom元素 binding 本次绑定的所有信息</span><br><span class="line">      big(element, binding) &#123;</span><br><span class="line">        // 如何验证 element 是真实 DOM</span><br><span class="line">        // 方式一:</span><br><span class="line">        console.dir(element) // 在控制台查看 身上拥有所有真实Dom的属性和方法</span><br><span class="line">        // // 方式二:</span><br><span class="line">        console.log(element instanceof HTMLElement) // instanceof 谁是不是谁的实例 控制台 true</span><br><span class="line"></span><br><span class="line">        element.innerText = binding.value * 10</span><br><span class="line">      &#125;,</span><br><span class="line">      fbind: &#123;</span><br><span class="line">        // 指令与元素成功绑定时（一上来）</span><br><span class="line">        bind(element, binding) &#123;</span><br><span class="line">          element.value = binding.value</span><br><span class="line">        &#125;,</span><br><span class="line">        // 指令所在元素被插入页面时调用</span><br><span class="line">        inserted(element, binding) &#123;</span><br><span class="line">          element.focus()</span><br><span class="line">        &#125;,</span><br><span class="line">        // 指令所在的模板被重新解析时</span><br><span class="line">        update(element, binding) &#123;</span><br><span class="line">          element.value = binding.value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>此时的this 是 window</li><li>多个名称一起定义时使用 - ，不是驼峰命名法，如：big-number</li><li>局部指令 和 全局指令</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局指令  和 过滤器一样</span></span><br><span class="line"><span class="comment">// 对象式</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line"><span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line"><span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="title function_">focus</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line"><span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,<span class="keyword">function</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line"><span class="comment">// 如何验证 element 是真实Dom元素</span></span><br><span class="line"><span class="comment">// 方式一:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(element) <span class="comment">// 在控制台查看 身上拥有所有真实Dom的属性和方法</span></span><br><span class="line"><span class="comment">// 方式二:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) <span class="comment">// instanceof 谁是不是谁的实例 控制台 true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span><br><span class="line"><span class="comment">// console.log(&#x27;big&#x27;)</span></span><br><span class="line">element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>Vue实例有一个完整的生命周期，也就是从开始创建初始化数据、编译模板、挂载DOM、渲染一更新一渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期</p><h3 id="生命周期流程图"><a href="#生命周期流程图" class="headerlink" title="生命周期流程图"></a>生命周期流程图</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111706995.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111706994.png"></p><h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><ul><li><p>初始化显示：</p><p>beforeCreate()</p><p>created()</p><p>beforeMount()</p><p>mounted() （常用）</p></li><li><p>更新状态: this.xxx &#x3D; value</p><p>beforeUpdate()</p><p>updated()</p></li><li><p>销毁 vue 实例: vm.$destroyed()</p><p>beforeDestroy()（常用）</p><p>destroyed()</p></li></ul><h3 id="引出Vue的生命周期"><a href="#引出Vue的生命周期" class="headerlink" title="引出Vue的生命周期"></a>引出Vue的生命周期</h3><p><strong>生命周期：</strong></p><ul><li>又名：生命周期回调函数、生命周期函数、生命周期钩子</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li><li>生命周期函数中的this指向是vm 或 组件实例对象</li></ul><p><strong>案例：给定初始透明度为1，透明度不断减少，减少到0又重新变为1</strong></p><ul><li>基本代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;引出生命周期&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">           &lt;!--opacity 表示css的属性(不透明) opacity 表示数据的名--&gt;</span><br><span class="line">&lt;h2 :style=&quot;&#123;opacity: opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">           &lt;!-- 重名 对象的简写形式--&gt;    </span><br><span class="line">           &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line"> new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">opacity:1</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>方法1：设置外部定时器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 方式一：不推荐，逻辑操作，Vue实例，代码层面是割裂开的</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">opacity:1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">// 通过外部的定时器实现（不推荐）</span><br><span class="line">// 循环定时器</span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">vm.opacity -= 0.01</span><br><span class="line">if(vm.opacity &lt;= 0) vm.opacity = 1 // 在透明度小于等于0时,让其变为1</span><br><span class="line">&#125;,16)  //16 毫秒</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><ul><li>方法2：mounted 钩子函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line"> new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">opacity:1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">mounted()&#123;</span><br><span class="line">console.log(&#x27;mounted&#x27;,this)</span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">this.opacity -= 0.01</span><br><span class="line">if(this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">&#125;,16)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="分析Vue的生命周期"><a href="#分析Vue的生命周期" class="headerlink" title="分析Vue的生命周期"></a>分析Vue的生命周期</h3><h4 id="总体观察"><a href="#总体观察" class="headerlink" title="总体观察"></a>总体观察</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1 v-text=&quot;n&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;bye&quot;&gt;点我销毁vm&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    // template: `</span><br><span class="line">    //   &lt;div&gt;</span><br><span class="line">    //     &lt;h1&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    //     &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">    //   &lt;/div&gt;</span><br><span class="line">    // `,</span><br><span class="line">    data: &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;</span><br><span class="line">        this.n++</span><br><span class="line">      &#125;,</span><br><span class="line">      bye() &#123;</span><br><span class="line">        console.log(&#x27;bye&#x27;)</span><br><span class="line">        this.$destroy()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      n() &#123;</span><br><span class="line">        console.log(&#x27;n变了&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">      console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      console.log(&#x27;created&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount() &#123;</span><br><span class="line">      console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      console.log(&#x27;mounted&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate() &#123;</span><br><span class="line">      console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line">      console.log(&#x27;updated&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      console.log(&#x27;beforeDestroy&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed() &#123;</span><br><span class="line">      console.log(&#x27;destroyed&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="逐个分析"><a href="#逐个分析" class="headerlink" title="逐个分析"></a>逐个分析</h4><ul><li><p><strong>生命周期的创建</strong></p><p><strong>① beforeCreate</strong></p><p>在创建vue实例化之前，此时没有_data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   <span class="keyword">debugger</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617746.png"></p><p><strong>② created</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617167.png"></p></li><li><p><strong>生命周期的挂载</strong></p><p><strong>③ beforeMount</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   <span class="keyword">debugger</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>页面数据未被解析<img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617169.png"></p></li><li><p>对所有DOM的操作<strong>最终</strong>都没有用（因为在这个周期之前的el已经被解析好了，create那一步的绿色框会直接把之前解析好的el插到页面中）</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617170.png"></p></li></ul><p><strong>④ mounted</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h2&#x27;</span>).<span class="property">innerText</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">       <span class="comment">// 验证 el 是不是真实Dom</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span> <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>)</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此时页面解析完成，且对DOM操作有效</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617171.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111617172.png"></p></li><li><p><strong>生命周期的更新</strong></p><p>数据发生更新就会调用这两个函数</p><p><strong>⑤ beforeUpdate</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111645505.png"></p><p><strong>⑥ updated</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111645506.png"></p></li><li><p><strong>生命周期的销毁</strong></p><p>销毁不会销毁基于原生js的方法，即本例中的add()在销毁vm后仍可以使用</p><p><strong>⑦ beforeDestroy</strong></p><p>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111645507.png"></p><p><strong>⑧ destroyed</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111645508.png"></p></li></ul><h3 id="Vue生命周期的总结"><a href="#Vue生命周期的总结" class="headerlink" title="Vue生命周期的总结"></a>Vue生命周期的总结</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208111708219.png"></p><p><strong>总结</strong></p><p><strong>常用的生命周期钩子</strong></p><ol><li>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><p><strong>关于销毁Vue实例</strong></p><ol><li>销毁后借助Vue开发者工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</li></ol><p><strong>案例：设置按钮，停止透明度变化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;h1 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;opacity = 1&quot;&gt;透明度设置为1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;stop&quot;&gt;点我停止变化&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 阻止 vue 在启动时生成生产提示</span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      opacity: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      stop() &#123;</span><br><span class="line">        this.$destroy()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // Vue 完成模板的解析并把初始的真实的 DOM 元素放入页面后调用（挂载完毕） mounted</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">        console.log(&#x27;setInterval&#x27;)</span><br><span class="line">        this.opacity -= 0.01</span><br><span class="line">        if (this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">      &#125;, 16)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      console.log(&#x27;vm即将驾鹤西游了&#x27;)</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="补充知识点-template"><a href="#补充知识点-template" class="headerlink" title="补充知识点 template"></a>补充知识点 template</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot; :x=&quot;n&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    //用es6的模板字符串，在要解析的html代码外套上个div，则一整个div会替换掉上面那个带id的div</span><br><span class="line">    //注意：用这种方法解析的idv是不带:x=&quot;n&quot;的</span><br><span class="line">    template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data:&#123;</span><br><span class="line">        n:1</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库与身份认证</title>
      <link href="/posts/574.html"/>
      <url>/posts/574.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><p>市面上的数据库有很多种，最常见的数据库有如下几个：</p><ul><li>MySQL数据库（目前使用最广泛、流行度最高的开源免费数据库；Community +Enterprise）</li><li>Oracle 数据库（收费）</li><li>SQL Server 数据库（收费）</li><li>Mongodb 数据库（Community +Enterprise）</li></ul><blockquote><p>其中，MySQL、Oracle、SQL Server 属于传统型数据库（又叫做：关系型数据库或 SQL 数据库），这三者的设计理念相同，用法比较类似</p><p>而Mongodb属于新型数据库（又叫做：非关系型数据库 或 NoSQL 数据库），它在一定程度上弥补了传统型数据库的缺陷。</p></blockquote><h2 id="MySQL-的基本使用"><a href="#MySQL-的基本使用" class="headerlink" title="MySQL 的基本使用"></a>MySQL 的基本使用</h2><h3 id="使用-MySQL-Workbench-管理数据库"><a href="#使用-MySQL-Workbench-管理数据库" class="headerlink" title="使用 MySQL Workbench 管理数据库"></a>使用 MySQL Workbench 管理数据库</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208031626998.png"></p><p><strong>创建数据库</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208031629705.png"></p><p><strong>创建数据表</strong></p><p><img src="/C:/Users\Sasha\Documents\202208031629191.png"></p><p>DataType 数据类型：</p><ul><li>int 整数</li><li>varchar(len) 字符串</li><li>tinyint(1) 布尔值</li></ul><p>字段的特殊标识：</p><ul><li>PK（Primary Key）主键、唯一标识</li><li>NN（Not Null）值不允许为空</li><li>UQ（Unique）值唯一</li><li>AI（Auto Increment）值自动增长</li></ul><p><strong>向表中写入数据</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208031631373.png"></p><h3 id="使用-SQL-管理数据库"><a href="#使用-SQL-管理数据库" class="headerlink" title="使用 SQL 管理数据库"></a>使用 SQL 管理数据库</h3><p>SQL（英文全称：Structured Query Language）是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据</p><p>三个关键点：</p><ul><li>SQL 是一门数据库编程语言</li><li>使用 SQL语言编写出来的代码，叫做SQL 语句</li><li>SQL 语言只能在关系型数据库中使用（例如 MySQL、Oracle、SQL Server）。非关系型数据库（例如Mongodb）不支持SQL语言</li></ul><h3 id="SQL-的-SELECT-语句"><a href="#SQL-的-SELECT-语句" class="headerlink" title="SQL 的 SELECT 语句"></a>SQL 的 SELECT 语句</h3><p>SELECT 语句用于从表中查询数据。执行的结果被存储在一个结果表中（称为结果集）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- * 表示选取所有列 </span><br><span class="line">select * from users</span><br><span class="line"></span><br><span class="line">-- 多个列之间，用英文逗号，分割</span><br><span class="line">select username, password from users</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>SQL 语句中的关键字对大小写不敏感。SELECT等效于 select，FROM 等效于 from</p></blockquote><h3 id="SQL-的-INSERT-INTO-语句"><a href="#SQL-的-INSERT-INTO-语句" class="headerlink" title="SQL 的 INSERT INTO 语句"></a>SQL 的 INSERT INTO 语句</h3><p>INSERT INTO 语句用于向数据表中插入新的数据行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 向 user 表中，插入新数据，username 的值为 tony stark，password 的值为 098123</span><br><span class="line">insert into users (username, password) values(&#x27;tony stark&#x27;, &#x27;098123&#x27;)</span><br></pre></td></tr></table></figure><h3 id="SQL-的-UPDATE-语句"><a href="#SQL-的-UPDATE-语句" class="headerlink" title="SQL 的 UPDATE 语句"></a>SQL 的 UPDATE 语句</h3><p>Update 语句用于修改表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 将 id 为 4 的用户密码，更新为 888888</span><br><span class="line">update users set password = &#x27;888888&#x27; where id = 4</span><br><span class="line"></span><br><span class="line">-- 更新 id 为 2 的用户，把密码更新为admin123，同时，把用户的状态更新为 1</span><br><span class="line">update users set password = &#x27;admin123&#x27;, status = 1 where id = 2</span><br></pre></td></tr></table></figure><h3 id="SQL-的-DELETE-语句"><a href="#SQL-的-DELETE-语句" class="headerlink" title="SQL 的 DELETE 语句"></a>SQL 的 DELETE 语句</h3><p>DELETE 语句用于删除表中的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除 users 表中， id为 4 的用户</span><br><span class="line">delete from users where id = 4</span><br></pre></td></tr></table></figure><h3 id="SQL-的-WHERE-子句"><a href="#SQL-的-WHERE-子句" class="headerlink" title="SQL 的 WHERE 子句"></a>SQL 的 WHERE 子句</h3><p>WHERE 子句用于限定选择的标准。在 SELECT、UPDATE、DELETE 语句中，皆可使用 WHERE 子句来限定选择的标准</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 演示 where 子句的使用</span><br><span class="line">select * from users where status = 1</span><br><span class="line">select * from users where id &gt;= 2</span><br><span class="line">select * from users where username != &#x27;ls&#x27;</span><br></pre></td></tr></table></figure><p><strong>可在 WHERE 子句中使用的运算符</strong></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208031843297.png"></p><blockquote><p>注意：</p><p>在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !&#x3D;</p></blockquote><h3 id="SQL-的-AND-和-OR-运算符"><a href="#SQL-的-AND-和-OR-运算符" class="headerlink" title="SQL 的 AND 和 OR 运算符"></a>SQL 的 AND 和 OR 运算符</h3><ul><li>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。</li><li>AND 表示必须同时满足多个条件，相当于 JavaScript 中的 &amp;&amp; 运算符，例如 if (a !&#x3D;&#x3D; 10 &amp;&amp; a !&#x3D;&#x3D; 20) </li><li>OR 表示只要满足任意一个条件即可，相当于 JavaScript 中的 || 运算符，例如 if(a !&#x3D;&#x3D; 10 || a !&#x3D;&#x3D; 20)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 AND 来显示所有状态为 0 且 id &lt; 3 的用户</span><br><span class="line">select * from users where status = 0 and id &lt; 3</span><br><span class="line"></span><br><span class="line">-- 使用 OR 来显示所有状态为 1，或者 username 为 zs 的用户</span><br><span class="line">select * from users where status = 1 or username = &#x27;zs&#x27;</span><br></pre></td></tr></table></figure><h3 id="SQL-的-ORDER-BY-子句"><a href="#SQL-的-ORDER-BY-子句" class="headerlink" title="SQL 的 ORDER BY 子句"></a>SQL 的 ORDER BY 子句</h3><ul><li>ORDER BY 语句用于根据指定的列对结果集进行排序。</li><li>ORDER BY 语句默认按照升序对记录进行排序。</li><li>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 对 users 表中的数据，按照 status 字段进行升序排序</span><br><span class="line">select * from users order by status</span><br><span class="line"></span><br><span class="line">-- 对 users 表中的数据，按照 id 字段进行降序排序</span><br><span class="line">-- desc 表示降序排序，asc 表示升序排序，默认情况下是升序排序</span><br><span class="line">select * from users order by id desc</span><br><span class="line"></span><br><span class="line">-- 对 users 表中的数据，先按照 status 字段进行降序排序，再按照 username 的字母顺序，进行升序排序</span><br><span class="line">select * from users order by status desc, username asc</span><br></pre></td></tr></table></figure><h3 id="SQL-的-COUNT-函数"><a href="#SQL-的-COUNT-函数" class="headerlink" title="SQL 的 COUNT(*) 函数"></a>SQL 的 COUNT(*) 函数</h3><p>COUNT(*) 函数用于返回查询结果的总数据条数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 count(*) 来统计 users 表中，状态为 0 用户的总数量</span><br><span class="line">select count(*) from users where status = 0</span><br><span class="line"></span><br><span class="line">-- 使用 AS 关键字给列起别名</span><br><span class="line">select count(*) as total from users where status = 0</span><br><span class="line">select username as uname, password as upwd from users</span><br></pre></td></tr></table></figure><h2 id="在项目中操作-MySQL"><a href="#在项目中操作-MySQL" class="headerlink" title="在项目中操作 MySQL"></a>在项目中操作 MySQL</h2><ul><li>安装操作 MySQL数据库的第三方模块（mysql）</li><li>通过 mysql模块连接到 MySQL 数据库</li><li>通过 mysql模块执行 SQL 语句</li></ul><h3 id="安装与配置-mysql-模块"><a href="#安装与配置-mysql-模块" class="headerlink" title="安装与配置 mysql 模块"></a>安装与配置 mysql 模块</h3><p><strong>安装 mysql 模块</strong></p><p>mysql模块是托管于npm上的第三方模块。它提供了在Node.js项目中连接和操作MySQL数据库的能力</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure><p><strong>配置 mysql 模块</strong></p><p>在使用 mysql 模块操作 MySQL 数据库之前，必须先对 mysql 模块进行必要的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 mysql 模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">// 建立与 MySQL 数据库的连接关系</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 数据的 IP 地址</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 登录数据库的账号</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;jxy123321&#x27;</span>, <span class="comment">// 登录数据库的密码</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;my_db_01&#x27;</span> <span class="comment">// 指定要操作哪个数据库</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>测试 mysql 模块能否正常工作</strong></p><p>调用 db.query() 函数，指定要执行的 SQL 语句，通过回调函数拿到执行的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 mysql 模块能否正常工作</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select 1&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// mysql 模块工作期间报错</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 能够成功的执行 SQL 语句</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-mysql-模块操作-MySQL-数据库"><a href="#使用-mysql-模块操作-MySQL-数据库" class="headerlink" title="使用 mysql 模块操作 MySQL 数据库"></a>使用 mysql 模块操作 MySQL 数据库</h3><p><strong>查询数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 users 表中所有的数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;select * from users&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 查询数据失败</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 查询数据成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>插入数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 users 表中新增一条数据，期中 username 的值为 DouYing，password 的值为 123321</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>: <span class="string">&#x27;DouYing&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123321&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//定义待执行的 SQL 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users (username, password) values (?, ?)&#x27;</span></span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行 SQL 语句失败</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 执行 SQL 语句成功</span></span><br><span class="line">    <span class="comment">// 如果执行的是 insert into 插入语句，则 results 是一个对象</span></span><br><span class="line">    <span class="comment">// 可以通过 affectedRows 属性，来判断是否插入数据成功</span></span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>插入数据的便捷方式</strong></p><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>: <span class="string">&#x27;DouYing1&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123321&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 定义待执行的 SQL 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into users set ?&#x27;</span></span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, user, <span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>更新数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新用户的信息</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">username</span>: <span class="string">&#x27;DouYingccc&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123321&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 定义 SQL 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set username=?, password=? where id=?&#x27;</span></span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRow</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>更新数据的便捷方式</strong></p><p>更新表数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速更新表数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据的便捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">username</span>: <span class="string">&#x27;DouYingcc&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;10086&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 定义 SQL 语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set ? where id=?&#x27;</span></span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRow</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong></p><p>在删除数据时，推荐根据 id 这样的唯一标识，来删除对应的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除 id 为 5 的用户</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;delete from users where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">5</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">// 执行 delete 语句之后，结果也是一个对象，也会包含 affectedRows 属性</span></span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除数据成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>标记删除</strong></p><ul><li>使用 DELETE 语句，会把真正的把数据从表中删除掉。为了保险起见，推荐使用标记删除的形式，来模拟删除的动作</li><li>所谓的标记删除，就是在表中设置类似于 status 这样的状态字段，来标记当前这条数据是否被删除</li><li>当用户执行了删除的动作时，我们并没有执行 DELETE 语句把数据删除掉，而是执行了 UPDATE 语句，将这条数据对应的 status 字段标记为删除即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记删除</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;update users set status=? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[<span class="number">1</span>, <span class="number">6</span>], <span class="function">(<span class="params">err,results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标记删除成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="前后端的身份认证"><a href="#前后端的身份认证" class="headerlink" title="前后端的身份认证"></a>前后端的身份认证</h2><h3 id="Web-开发模式"><a href="#Web-开发模式" class="headerlink" title="Web 开发模式"></a>Web 开发模式</h3><p>目前主流的 Web 开发模式有两种，分别是：</p><ul><li>基于服务端渲染的传统 Web 开发模式</li><li>基于前后端分离的新型 Web 开发模式</li></ul><p><strong>服务端渲染的 Web 开发模式</strong></p><p>服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用 Ajax 这样的技术额外请求页面的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bruce&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="string">`&lt;h1&gt;username:<span class="subst">$&#123;user.name&#125;</span>, age:<span class="subst">$&#123;user.age&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">  res.<span class="title function_">send</span>(html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>优点：</p><p>① 前端耗时少。因为服务器端负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电</p><p>② 有利于SEO。因为服务器端响应的是完整的HTML页面内容，所以爬虫更容易爬取获得信息，更有利于SEO。</p></li><li><p>缺点：</p><p>① 占用服务器端资源。即服务器端完成HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力</p><p>② 不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发。</p></li></ul><p><strong>前后端分离的 Web 开发模式</strong></p><p>前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。简而言之，前后端分离的 Web 开发模式，就是后端只负责提供 API 接口，前端使用 Ajax 调用接口的开发模式</p><ul><li><p>优点：</p><p>① 开发体验好。前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性。</p><p>② 用户体验好。Ajax技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。</p><p>③ 减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</p></li><li><p>缺点：</p><p>① 不利于 SEO。因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方案：利用Vue、React等前端框架的SSR（serverside render）技术能够很好的解决SEO问题！）</p></li></ul><p><strong>如何选择 Web 开发模式</strong></p><p>不谈业务场景而盲目选择使用何种开发模式都是耍流氓</p><ul><li>企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染</li><li>后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离</li><li>为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服务器端渲染 + 其他页面前后端分离的开发模式</li></ul><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><ul><li><strong>身份认证</strong>又称“身份验证”、“鉴权”，是指通过一定的手段，完成对用户的确认</li><li>如各大网站的手机验证码登录、账号密码验证等</li><li>服务端渲染推荐使用<code>Session认证机制</code></li><li>前后端分离推荐使用<code>JWT认证机制</code></li></ul><blockquote><p>身份认证的目的，是为了确认当前所声称为某种身份的用户，确实是所声称的用户。例如，你去找快递员取快递，你要怎么证明这份快递是你的</p></blockquote><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3><p><strong>1.HTTP 协议的无状态性</strong></p><ul><li>了解 HTTP 协议的无状态性是进一步学习 Session 认证机制的必要前提</li><li>HTTP 协议的无状态性，指的是客户端的每次 HTTP 请求都是独立的，连续多个请求之间没有直接的关系，服务器不会主动保留每次 HTTP 请求的状态</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032025021.png"></p><p><strong>2.如何突破 HTTP 无状态的限制</strong></p><p>对于超市来说，为了方便收银员在进行结算时给 VIP 用户打折，超市可以为每个 VIP 用户发放会员卡</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032028635.png"></p><blockquote><p>注意：</p><p>现实生活中的会员卡身份认证方式，在 Web 开发中的专业术语叫做 Cookie</p></blockquote><p><strong>3.关于Cookie</strong></p><ul><li><p>Cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。</p></li><li><p>不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie 一同发送到服务器</p></li><li><p>Cookie的几大特性：</p><p>①自动发送</p><p>②域名独立</p><p>③过期时限</p><p>④4KB 限制</p></li></ul><p><strong>4.Cookie 在身份认证中的作用</strong></p><ul><li>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动将 Cookie 保存在浏览器中</li><li>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie，通过请求头的形式发送给服务器，服务器即可验明客户端的身份</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032040462.png"></p><p><strong>5.Cookie不具有安全性</strong></p><ul><li>由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全性</li><li>因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器</li><li>注意区分伪造跟盗取的不同</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032044498.png"></p><p><strong>6.提高身份认证的安全性</strong></p><ul><li>为了防止客户伪造会员卡，收银员在拿到客户出示的会员卡之后，可以在收银机上进行刷卡认证。只有收银机确认存在的会员卡，才能被正常使用</li><li>这种“会员卡 + 刷卡认证”的设计理念，就是 Session 认证机制的精髓</li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032046219.png"></p><h3 id="Express-中使用-Session-认证"><a href="#Express-中使用-Session-认证" class="headerlink" title="Express 中使用 Session 认证"></a>Express 中使用 Session 认证</h3><p><strong>安装 express-session 中间件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p><strong>配置 express-session 中间件</strong></p><p>express-session 中间件安装成功后，需要通过 app.use() 来注册 session 中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_01：请配置 Session 中间件</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;DouYing&#x27;</span>, <span class="comment">// secret 属性的值可以为任意字符串</span></span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>, <span class="comment">// 固定写法</span></span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">// 固定写法</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><strong>向 session 中存数据</strong></p><p>当 express-session 中间件配置成功后，即可通过 req.session 来访问和使用 session 对象，从而存储用户的关键信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录的 API 接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断用户提交的登录信息是否正确</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录失败&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO_02：请将登录成功后的用户信息，保存到 Session 中</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">// 将用户的信息，存储到 Session 中</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span> <span class="comment">// 将用户的登录状态，存储到 Session 中</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>从 session 中取数据</strong></p><p>可以直接从 req.session 对象上获取之前存储的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户姓名的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// TODO_03：请从 Session 中获取用户的名称，响应给客户端</span></span><br><span class="line">  <span class="comment">// 判断用户是否登录</span></span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">islogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>清空 session</strong></p><p>调用 req.session.destroy() 函数，即可清空服务器保存的 session 信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// TODO_04：清空 Session 信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;退出登录成功&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a>JWT 认证机制</h3><ul><li>Session 认证机制需要配合 Cookie 才能实现。</li><li>由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证</li><li><strong>JWT（英文全称：JSON Web Token）</strong> 是目前最流行的跨域认证解决方案</li></ul><blockquote><p>注意：</p><p>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制</p><p>当前端需要跨域请求后端接口的时候，推荐使用 JWT 认证机制</p></blockquote><p><strong>JWT 的工作原理</strong></p><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208032115143.png"></p><p><strong>JWT 的组成部分</strong></p><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）</p><ul><li>Payload 是真正的用户信息，加密后的字符串</li><li>Header 和 Signature 是安全性相关部分，保证 Token 安全性</li><li>三者使用 . 分隔</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br><span class="line"></span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoiQnJ1Y2UiLCJwYXNzd29yZCI6IiIsIm5pY2tuYW1lIjoiaGVsbG8iLCJlbWFpbCI6InNjdXRAcXEuY29tIiwidXNlcl9waWMiOiIiLCJpYXQiOjE2NDE4NjU3MzEsImV4cCI6MTY0MTkwMTczMX0.bmqzAkNSZgD8IZxRGGyVlVwGl7EGMtWitvjGD-a5U5c</span><br></pre></td></tr></table></figure><p><strong>JWT 的使用方式</strong></p><ul><li>客户端收到服务器返回的 JWT 之后，通常会将它储存在 localStorage 或 sessionStorage 中</li><li>此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。推荐的做法是把 JWT 放在 HTTP 请求头的 Authorization 字段中</li><li>加上 Bearer 前缀</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure><h3 id="Express-中使用-JWT"><a href="#Express-中使用-JWT" class="headerlink" title="Express 中使用 JWT"></a>Express 中使用 JWT</h3><p><strong>安装 JWT 相关的包</strong></p><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装多个包中间用空格隔开</span><br><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>导入 JWT 相关的包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>定义 secret 密钥</strong></p><p>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的 secret 密钥：</p><ul><li>当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串</li><li>当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27; DouYing 好好学习~&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>在登录成功后生成 JWT 字符串</strong></p><p>调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录成功</span></span><br><span class="line"><span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">  <span class="comment">// jwt.sign() 生成 JWT 字符串</span></span><br><span class="line">  <span class="comment">// 参数：用户信息对象、加密密钥、配置对象 token 有效期</span></span><br><span class="line">  <span class="comment">// 尽量不保存敏感信息，因此只有用户名，没有密码</span></span><br><span class="line">  <span class="attr">token</span>: jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userinfo.<span class="property">username</span>&#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span> &#125;) <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>将 JWT 字符串还原为 JSON 对象</strong></p><ul><li>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段，将 Token 字符串发送到服务器进行身份认证</li><li>此时，服务器可以通过 express-jwt 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br></pre></td></tr></table></figure><p><strong>使用 req.user 获取用户信息</strong></p><p>当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 req.user 对象，来访问从 JWT 字符串中解析出来的用户信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个有权限的 API 接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span>, <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>捕获解析 JWT 失败后产生的错误</strong></p><p>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行。我们可以通过 Express 的错误中间件，捕获这个错误并进行相关的处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, net</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这次错误是由 token 解析失败导致的</span></span><br><span class="line">  <span class="keyword">if</span>(err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;未知的错误&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express</title>
      <link href="/posts/50480.html"/>
      <url>/posts/50480.html</url>
      
        <content type="html"><![CDATA[<h2 id="Express-基本定义与使用"><a href="#Express-基本定义与使用" class="headerlink" title="Express 基本定义与使用"></a>Express 基本定义与使用</h2><p><a href="https://www.expressjs.com.cn/">Express中文网</a></p><ul><li>Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架</li><li>Express 是用于快速创建web服务器或API接口服务器的第三方模块</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure><h3 id="创建基本的-web-服务器"><a href="#创建基本的-web-服务器" class="headerlink" title="创建基本的 web 服务器"></a>创建基本的 web 服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 启动 web 服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听-GET-请求"><a href="#监听-GET-请求" class="headerlink" title="监听 GET 请求"></a>监听 GET 请求</h3><p>通过 app.get() 方法，可以监听客户端的 GET 请求，具体的语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个 JSON 对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>参数1：客户端请求的 URL 地址</p><p>参数2：请求对应的处理函数</p><ul><li>req：请求对象（包含了与请求相关的属性与方法）</li><li>res：响应对象（包含了与响应相关的属性与方法）</li></ul></blockquote><h3 id="监听-POST-请求"><a href="#监听-POST-请求" class="headerlink" title="监听 POST 请求"></a>监听 POST 请求</h3><p>通过 app.post() 方法，可以监听客户端的 POST 请求，具体的语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个文本字符串</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>参数1：客户端请求的 URL 地址</p><p>参数2：请求对应的处理函数</p><ul><li>req：请求对象（包含了与请求相关的属性与方法）</li><li>res：响应对象（包含了与响应相关的属性与方法）</li></ul></blockquote><h3 id="把内容响应给客户端"><a href="#把内容响应给客户端" class="headerlink" title="把内容响应给客户端"></a>把内容响应给客户端</h3><p>通过 res.send() 方法，可以把处理好的内容，发送给客户端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个 JSON 对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 express 提供的 res.send() 方法，向客户端响应一个文本字符串</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取-URL-中携带的查询参数"><a href="#获取-URL-中携带的查询参数" class="headerlink" title="获取 URL 中携带的查询参数"></a>获取 URL 中携带的查询参数</h3><p>通过 req.query 对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//通过 req.query 可以获取到客户端发送过来的查询参数</span></span><br><span class="line">    <span class="comment">// 默认情况下，req.query 是一个空对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取-URL-中的动态参数"><a href="#获取-URL-中的动态参数" class="headerlink" title="获取 URL 中的动态参数"></a>获取 URL 中的动态参数</h3><p>通过 req.params 对象，可以访问到 URL 中，通过 : 匹配到的动态参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 :id 是一个动态参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.params 是动态匹配到的 URL 参数，默认也是一个空对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">    req.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><h3 id="express-static"><a href="#express-static" class="headerlink" title="express.static()"></a>express.static()</h3><p>express 提供了一个非常好用的函数，叫做 express.static()，通过它，我们可以非常方便地创建一个静态资源服务器，例如，通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 express.static() 方法，快速的对外提供静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./clock&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在就可以访问public目录中的所有文件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/images/bg.jpg</span><br><span class="line">http://localhost:3000/css/style.css</span><br><span class="line">http://localhost:3000/js/login.js</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。因此，存放静态文件的目录名不会出现在 URL 中</p></blockquote><h3 id="托管多个静态资源目录"><a href="#托管多个静态资源目录" class="headerlink" title="托管多个静态资源目录"></a>托管多个静态资源目录</h3><p>如果要托管多个静态资源目录，请多次调用 express.static() 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 express.static() 方法，快速的对外提供静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./clock&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./files&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>访问静态资源文件时，express.static() 函数会根据目录的添加顺序查找所需的文件</p></blockquote><h3 id="挂载路径前缀"><a href="#挂载路径前缀" class="headerlink" title="挂载路径前缀"></a>挂载路径前缀</h3><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>现在，你就可以通过带有 &#x2F;public 前缀地址来访问 public 目录中的文件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/public/images/kitten.jpg</span><br><span class="line">http://localhost:3000/public/css/style.css</span><br><span class="line">http://localhost:3000/public/js/app.js</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p>作用：</p><ul><li><p>在编写调试 Node.js 项目的时候，如果修改了项目的代码，则需要频繁的手动 close 掉，然后再重新启动，非常繁琐</p></li><li><p>现在，我们可以使用 nodemon（<a href="https://www.npmjs.com/package/nodemon%EF%BC%89">https://www.npmjs.com/package/nodemon）</a> 这个工具，它能够监听项目文件的变动，当代码被修改后，nodemon 会自动帮我们重启项目，极大方便了开发和调试</p></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>在终端中，运行如下命令，即可将 nodemon 安装为全局可用的工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h3 id="使用-nodemon"><a href="#使用-nodemon" class="headerlink" title="使用 nodemon"></a>使用 nodemon</h3><p>将 node 命令替换为 nodemon 命令，使用 nodemon app.js 来启动项目。使得代码被修改之后，会被 nodemon 监听到，从而实现自动重启项目的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node 1.js</span><br><span class="line">nodemon 1.js</span><br><span class="line">//若无法使用nodemon，管理员权限打开终端输入：set-ExecutionPolicy RemoteSigned 之后按Y</span><br></pre></td></tr></table></figure><h2 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h2><ul><li>在 Express 中，路由指的是客户端的请求与服务器处理函数之间的映射关系</li><li>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数</li><li>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的 URL 同时匹配成功，则 Express 会将这次请求，转交给对应的 function 函数进行处理</li><li>理解：打电话给运营商客服，按下1到0的键对应不同服务，这种按键和服务绑定的映射关系，就叫路由</li></ul><p>Express 中的路由分 3 部分组成，分别是请求的类型、请求的 URL 地址、处理函数，格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>, <span class="variable constant_">HANDLER</span>)</span><br></pre></td></tr></table></figure><blockquote><p>路由匹配的注意点：</p><p>①按照定义的先后顺序进行匹配</p><p>②请求类型和请求的URL同时匹配成功，才会调用对应的处理函数</p></blockquote><h3 id="最简单的用法"><a href="#最简单的用法" class="headerlink" title="最简单的用法"></a>最简单的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器，命名为 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Post Request.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 web 服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h3><p>为了方便对路由进行模块化的管理，Express不建议将路由直接挂载到app上，而是推荐将路由抽离为单独的模块</p><p>将路由抽离为单独模块的步骤如下：</p><p>​①创建路由模块对应的 .js文件</p><p>​②调用 express.Router()函数创建路由对象</p><p>​③向路由对象上挂载具体的路由</p><p>​④使用 module.exports 向外共享路由对象</p><p>​⑤使用 app.use()函数注册路由模块</p><h3 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js文件是路由模块</span></span><br><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><h3 id="注册路由模块"><a href="#注册路由模块" class="headerlink" title="注册路由模块"></a>注册路由模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./05-router&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// app.user() 函数的作用，就是来注册全局中间件</span></span><br></pre></td></tr></table></figure><h3 id="为路由模块添加前缀"><a href="#为路由模块添加前缀" class="headerlink" title="为路由模块添加前缀"></a>为路由模块添加前缀</h3><p>类似于托管静态资源时，为静态资源统一挂载访问前缀一样，路由模块添加前缀的方式也非常简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;/api&#x27;, 是统一挂载的访问前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br></pre></td></tr></table></figure><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><ul><li><p>中间件（Middleware ），特指业务流程的中间处理环节</p></li><li><p>当一个请求到达 Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理</p></li><li><p>Express 的中间件，本质上就是一个 function 处理函数，Express 中间件的格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含 req, res, next 三个参数，next() 参数把流转关系交给下一个中间件或路由</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由</p></li></ul><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208012019835.png"></p><blockquote><p>中间件注意事项：</p><p>①一定要在路由之前注册中间件</p><p>②客户端发送过来的请求，可以连续调用多个中间件进行处理</p><p>③执行完中间件的业务代码之后，不要忘记调用 next() 函数</p><p>④为了防止代码逻辑混乱，调用 next() 函数后不要再写额外的代码</p><p>⑤连续调用多个中间件时，多个中间件之间，共享req和res对象</p></blockquote><p><strong>定义中间件函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个最简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把流转关系，转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p>客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件<br>通过调用 app.use(中间件函数)，即可定义一个全局生效的中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个最简单的中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把流转关系，转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 mw 注册为全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure><p><strong>定义全局中间件的简化形式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局中间件的简化形式</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>中间件的作用</strong></p><p>多个中间件之间，共享同一份 req 和 res。基于这样的特性，我们可以在上游的中间件中，统一为 req 或 res 对象添加自定义的属性或方法，供下游的中间件或路由进行使用</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202208012019836.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到请求到达服务器的时间</span></span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 为 req 对象挂载自定义属性，从而把时间共享给后面的所有路由</span></span><br><span class="line">    req.<span class="property">startTime</span> = time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>定义多个全局中间件</strong></p><p>可以使用 app.use() 连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是第一个全局中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是第二个全局中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><p>不使用 app.use() 定义的中间件，叫做局部生效的中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了局部生效的中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>定义多个局部中间件</strong></p><p>可以在路由中，通过如下两种等价的方式，使用多个局部中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h2><p>为了方便大家理解和记忆中间件的使用，Express官方把常见的中间件用法，分成了 5 大类，分别是：</p><p>​① 应用级别的中间件</p><p>​② 路由级别的中间件</p><p>​③ 错误级别的中间件</p><p>​④ Express 内置的中间件</p><p>​⑤ 第三方的中间件</p><h3 id="应用级别的中间件"><a href="#应用级别的中间件" class="headerlink" title="应用级别的中间件"></a>应用级别的中间件</h3><p>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 app 实例上的中间件，叫做应用级别的中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用级别的中间件 (全局中间件)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 应用级别的中间件 (局部中间件)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><ul><li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件</li><li>用法和应用级别中间件没有区别，应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><h3 id="错误级别的中间件"><a href="#错误级别的中间件" class="headerlink" title="错误级别的中间件"></a>错误级别的中间件</h3><ul><li>作用：用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>格式：错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 (err, req, res, next)</li><li>注意：错误级别的中间件必须注册在所有路由之后，否则无法捕获路由抛出的错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 人为的制造错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了错误&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error:&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express-内置的中间件"><a href="#Express-内置的中间件" class="headerlink" title="Express 内置的中间件"></a>Express 内置的中间件</h3><p>错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)</p><ul><li>express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li><li>express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置解析 application/json 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// 配置解析 application/x-www-form-urlencoded 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><p><strong>演示express.json 和 express.urlencoded</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了错误级别的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过 express.json() 这个中间件，解析爆弹中的 JSON 格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// 通过 express.urlencoded() 这个中间件，来解析表单中的 url-encoded 格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器里可以使用 req.body 这个属性，来接受客户端发送过来的请求体数据</span></span><br><span class="line">    <span class="comment">// 默认情况下，如果不配做解析表单数据的中间件，则 req.body 默认等于 undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/book&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器里可以通过 req.body 来获取 JSON 格式的表单数据和 url-encoded 格式的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h3><p>非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率</p><ul><li><p>例如：在<a href="mailto:&#x65;&#120;&#x70;&#114;&#x65;&#115;&#115;&#64;&#52;&#x2e;&#x31;&#54;&#x2e;&#48;">&#x65;&#120;&#x70;&#114;&#x65;&#115;&#115;&#64;&#52;&#x2e;&#x31;&#54;&#x2e;&#48;</a>之前的版本中，经常使用body-parser这个第三方中间件，来解析请求体数据。使用步骤如下：</p><p>①运行 npm install body-parser安装中间件</p><p>②使用 require 导入中间件</p><p>③调用 app.use()注册并使用中间件</p></li></ul><blockquote><p>注意：</p><p>Express 内置的 express.urlencoded 中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的</p></blockquote><h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><p>自己手动模拟一个类似于express.urlencoded这样的中间件，来解析 POST 提交到服务器的表单数据</p><p>实现步骤：</p><p>​①定义中间件</p><p>​②监听 req的data事件</p><p>​③监听 req的end事件</p><p>​④使用 querystring模块解析请求体数据</p><p>​⑤将解析出来的数据对象挂载为 req.body</p><p>​将自定义中间件封装为模块</p><h3 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h3><p>使用 app.use() 来定义全局生效的中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义中间件具体的业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听-req-的-data-事件"><a href="#监听-req-的-data-事件" class="headerlink" title="监听 req 的 data 事件"></a>监听 req 的 data 事件</h3><ul><li>在中间件中，需要监听req对象的data事件，来获取客户端发送到服务器的数据</li><li>如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data事件可能会触发多次，每一次触发data事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 监听 req 的 data 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听-req-的-end-事件"><a href="#监听-req-的-end-事件" class="headerlink" title="监听 req 的 end 事件"></a>监听 req 的 end 事件</h3><ul><li>当请求体数据接收完毕之后，会自动触发 req 的 end 事件</li><li>因此，我们可以在 req 的 end 事件中，拿到并处理完整的请求体数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 req 的 end 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在 str 中存放的是完整的请求体数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-querystring-模块解析请求体数据"><a href="#使用-querystring-模块解析请求体数据" class="headerlink" title="使用 querystring 模块解析请求体数据"></a>使用 querystring 模块解析请求体数据</h3><p>Node.js 内置了一个 querystring 模块，专门用来处理查询字符串。通过这个模块提供的 parse() 函数，可以轻松把查询字符串，解析成对象的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 Node.js 内置的 querystring 模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用qs.parse() 方法，把查询字符串解析为对象</span></span><br><span class="line"><span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br></pre></td></tr></table></figure><h3 id="将解析出来的数据对象挂载为-req-body"><a href="#将解析出来的数据对象挂载为-req-body" class="headerlink" title="将解析出来的数据对象挂载为 req.body"></a>将解析出来的数据对象挂载为 req.body</h3><p>上游的中间件和下游的中间件及路由之间，共享同一份 req 和 res。因此，我们可以将解析出来的数据，挂载为 req 的自定义属性，命名为 req.body，供下游使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 req 的 end 事件</span></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在 str 中存放的是完整的请求体数据</span></span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">    req.<span class="property">body</span> = body</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="将自定义中间件封装为模块"><a href="#将自定义中间件封装为模块" class="headerlink" title="将自定义中间件封装为模块"></a>将自定义中间件封装为模块</h3><p>为了优化代码的结构，我们可以把自定义的中间件函数，封装为独立的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 Node.js 内置的 querystring 模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 定义中间件具体的业务逻辑</span></span><br><span class="line">    <span class="comment">// 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 监听 req 的 data 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 监听 req 的 end 事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在 str 中存放的是完整的请求体数据</span></span><br><span class="line">        <span class="comment">// console.log(str)</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">        req.<span class="property">body</span> = body</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br><span class="line"></span><br><span class="line">--------------分割线-------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入自己封装的中间件模块</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser = <span class="built_in">require</span>(<span class="string">&#x27;./16-custom-body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">// 将自定义的中间件函数，注册为全局可用的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(customBodyParser)</span><br></pre></td></tr></table></figure><h2 id="使用-Express-写接口"><a href="#使用-Express-写接口" class="headerlink" title="使用 Express 写接口"></a>使用 Express 写接口</h2><h3 id="创建基本的服务器"><a href="#创建基本的服务器" class="headerlink" title="创建基本的服务器"></a>创建基本的服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">800</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:800&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建-API-路由模块"><a href="#创建-API-路由模块" class="headerlink" title="创建 API 路由模块"></a>创建 API 路由模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apiRouter.js (路由模块)</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里挂载对应的路由</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js (导入并注册路由模块)</span></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./18-apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">// 把路由模块，注册到 app 上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br></pre></td></tr></table></figure><h3 id="编写-GET-接口"><a href="#编写-GET-接口" class="headerlink" title="编写 GET 接口"></a>编写 GET 接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 req.query 获取客户端通过查询字符串，发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    <span class="comment">// 调用 res.send() 方法，向客户端响应处理的结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0 表示处理成功, 1 表示处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;GET 请求成功！&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: query <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="编写-POST-接口"><a href="#编写-POST-接口" class="headerlink" title="编写 POST 接口"></a>编写 POST 接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 POST 接口</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 req.body 获取请求体中包含的 url-encoded 格式的数据</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">// 调用 res.send() 方法，向客户端响应结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">// 0 表示处理成功, 1 表示处理失败</span></span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;POST 请求成功！&#x27;</span>, <span class="comment">// 状态的描述</span></span><br><span class="line">        <span class="attr">data</span>: body <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>如果要获取 URL-encoded 格式的请求体数据，必须配置中间件 app.use(express.urlencoded({ extended: false }))</p></blockquote><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><p><strong>接口的跨域问题</strong></p><p>刚才编写的 GET 和 POST接口，存在一个很严重的问题：不支持跨域请求<br>解决接口跨域问题的方案主要有两种：</p><ul><li>CORS（主流的解决方案，推荐使用）</li><li>JSONP（有缺陷的解决方案：只支持 GET 请求）</li></ul><p><strong>使用 cors 中间件解决跨域问题</strong></p><p>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题<br>使用步骤分为如下 3 步：</p><ul><li>运行 npm install cors 安装中间件</li><li>使用 const cors &#x3D; require(‘cors’) 导入中间件</li><li>在路由之前调用 app.use(cors()) 配置中间件</li></ul><p><strong>CORS</strong></p><ul><li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</li><li>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li><li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口</li><li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）</li></ul><p><strong>CORS 响应头部 - Access-Control-Allow-Origin</strong> </p><p>响应头部中可以携带一个 Access-Control-Allow-Origin 字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure><p>其中，origin 参数的值指定了允许访问该资源的外域 URL</p><p>例如，下面的字段值将只允许来自 <a href="http://itcast.cn/">http://itcast.cn</a> 的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://itcast.cn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果指定了 Access-Control-Allow-Origin 字段的值为通配符 *，表示允许来自任何域的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>CORS 响应头部 - Access-Control-Allow-Headers</strong></p><ul><li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text&#x2F;plain、multipart&#x2F;form-data、application&#x2F;x-www-form-urlencoded 三者之一）</li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外的请求头进行声明，否则这次请求会失败</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>CORS 响应头部 - Access-Control-Allow-Methods</strong></p><ul><li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。</li><li>如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Allow-Methods来指明实际请求所允许使用的 HTTP 方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHEader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>CORS请求的分类</strong></p><p>客户端在请求 CORS 接口时，根据请求方式和请求头的不同，可以将 CORS 的请求分为两大类，分别是：</p><ul><li>简单请求</li><li>预检请求</li></ul><p><strong>简单请求</strong></p><p>同时满足以下两大条件的请求，就属于简单请求：</p><ul><li>请求方式：GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain）</li></ul><p><strong>预检请求</strong></p><p>只要符合以下任何一个条件的请求，都需要进行预检请求：</p><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application&#x2F;json 格式的数据</li><li>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</li></ul><p><strong>简单请求和预检请求的区别</strong></p><ul><li>简单请求的特点：客户端与服务器之间只会发生一次请求</li><li>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求</li></ul><h3 id="JSONP-接口"><a href="#JSONP-接口" class="headerlink" title="JSONP 接口"></a>JSONP 接口</h3><p>浏览器端通过 script 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做 JSONP</p><p>特点：</p><ul><li>JSONP 不属于真正的 Ajax 请求，因为它没有使用XMLHttpRequest 这个对象。</li><li>JSONP 仅支持 GET 请求，不支持 POST、PUT、DELETE 等请求</li></ul><p><strong>创建 JSONP 接口的注意事项</strong></p><p>如果项目中已经配置了 CORS 跨域资源共享，为了防止冲突，必须在配置 CORS 中间件之前声明 JSONP 的接口。否则 JSONP 接口会被处理成开启了 CORS 的接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须在配置 cors 中间件之前，配置 JSONP 的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 定义 JSONP 接口具体的实现过程</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>实现 JSONP 接口的步骤</strong></p><p>​①获取客户端发送过来的回调函数的名字</p><p>​②得到要通过JSONP形式发送给客户端的数据</p><p>​③根据前两步得到的数据，拼接出一个函数调用的字符串</p><p>​④把上一步拼接得到的字符串，响应给客户端的 script 标签进行解析执行</p><p><strong>实现 JSONP 接口的具体代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须在配置 cors 中间件之前，配置 JSONP 的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 定义 JSONP 接口具体的实现过程</span></span><br><span class="line">    <span class="comment">// 获取客户端发送过来的回调函数的名字</span></span><br><span class="line">    <span class="keyword">const</span> funcName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line">    <span class="comment">// 定义要发送到客户端的数据对象</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;</span><br><span class="line">    <span class="comment">// 拼接出一个函数的调用</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr = <span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">    <span class="comment">// 把拼接的字符串响应给客户端</span></span><br><span class="line">    res.<span class="title function_">send</span>(scriptStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>在网页中使用 jQuery 发起 JSONP 请求</strong></p><p>调用 $.ajax() 函数，提供 JSONP 的配置选项，从而发起 JSONP 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为 JSONP 按钮绑定点击事件处理函数</span></span><br><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:800/api/jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="/posts/46203.html"/>
      <url>/posts/46203.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块化基本概念"><a href="#模块化基本概念" class="headerlink" title="模块化基本概念"></a>模块化基本概念</h2><p><strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元</p><p><strong>模块化作用</strong>：</p><ul><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ul><p><strong>模块化规范</strong>是对代码进行模块化拆分和组合时需要遵守的规则，如使用何种语法格式引用模块和向外暴露成员</p><h2 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h2><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p><ul><li><p>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> custon = <span class="built_in">require</span>(<span class="string">&#x27;./custom&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;monent&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：</p><p>使用 require()方法加载其它模块时，会执行被加载模块中的代码</p></blockquote><h2 id="Node-js-中的模块作用域"><a href="#Node-js-中的模块作用域" class="headerlink" title="Node.js 中的模块作用域"></a>Node.js 中的模块作用域</h2><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong></p><p><strong>模块作用域作用</strong>：防止全局变量污染</p><h2 id="向外共享模块作用域中的成员"><a href="#向外共享模块作用域中的成员" class="headerlink" title="向外共享模块作用域中的成员"></a>向外共享模块作用域中的成员</h2><h3 id="module-对象"><a href="#module-对象" class="headerlink" title="module 对象"></a>module 对象</h3><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207311550103.png"></p><h3 id="module-exports-对象"><a href="#module-exports-对象" class="headerlink" title="module.exports 对象"></a>module.exports 对象</h3><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模块.js</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 username 属性</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 sayHello 方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">age</span> = age</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模块.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./06-自定义模块&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br></pre></td></tr></table></figure><blockquote><p>外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象</p></blockquote><h3 id="共享成员时的注意点"><a href="#共享成员时的注意点" class="headerlink" title="共享成员时的注意点"></a>共享成员时的注意点</h3><p>使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准</p><ul><li>默认情况下，exports 和 module.exports 指向同一个对象。</li><li>最终共享的结果，以 module.exports 指向的对象为准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模块.js</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 username 属性</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 sayHello 方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">age</span> = age</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">    sayHi () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用模块.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./06-自定义模块&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br></pre></td></tr></table></figure><h3 id="exports-和-module-exports-的使用误区"><a href="#exports-和-module-exports-的使用误区" class="headerlink" title="exports 和 module.exports 的使用误区"></a>exports 和 module.exports 的使用误区</h3><p>时刻谨记，require() 模块时，得到的永远是 module.exports 指向的对象：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207311612484.png"></p><blockquote><p>注意：</p><p>为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports</p></blockquote><h2 id="Node-js-中的模块化规范"><a href="#Node-js-中的模块化规范" class="headerlink" title="Node.js 中的模块化规范"></a>Node.js 中的模块化规范</h2><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖</p><ul><li>每个模块内部，module 变量代表当前模块</li><li>module 变量是一个对象，它的exports属性（即module.exports）是对外的接口</li><li>加载某个模块，其实是加载该模块的 module.exports属性。require() 方法用于加载模块</li></ul><h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li><p>Node.js 中的第三方模块又叫做包</p></li><li><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用</p><blockquote><p>Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用</p></blockquote></li><li><p>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低</p></li><li><p>包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率</p></li><li><p>包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系</p></li></ul><p><strong>使用</strong>：</p><ul><li>包查找地址： <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>包下载地址：<a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></li><li>用npm下载包，下载node的同时也将npm下载了下来，可以在终端中用<code>npm -v</code>查看npm的版本</li><li>可在官网看对应包的使用说明</li></ul><h3 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h3><p><strong>在项目中安装包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">// 简写</span><br><span class="line">npm i 完整的包名称</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入需要的包</span></span><br><span class="line"><span class="comment">// 注意：导入的名称，就是安装包时的名称</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dt = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt)</span><br></pre></td></tr></table></figure><p><strong>初次装包后多了哪些文件</strong></p><p>初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件</p><ul><li><p>node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包</p></li><li><p>package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等</p><blockquote><p>注意：</p><p>程序员不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们</p></blockquote></li></ul><p><strong>安装指定版本的包</strong></p><p>默认情况下，使用 npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@2.22.2</span><br></pre></td></tr></table></figure><h3 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h3><p>npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。例如：</p><ul><li>项目的名称、版本号、描述等</li><li>项目中都用到了哪些包</li><li>哪些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ul><p><strong>快速创建package.json</strong></p><p>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格</p><p>运行 <code>npm install</code> 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中</p></blockquote><p><strong>denpendencies 节点</strong></p><p>package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包</p><p><strong>一次性安装所有的包</strong></p><p>可以运行 <code>npm install</code> 命令（或 <code>npm i</code>）一次性安装所有的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 执行命令时，npm包管理工具会先读取 package.json 中的 dependencies 节点，然后会把这些包一次性下载到项目中</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><p><strong>卸载包</strong></p><p>可以运行 <code>npm uninstall</code> 命令，来卸载指定的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用 npm uninstall 具体的包名，来卸载包</span><br><span class="line">npm uninstall moment</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。</p></blockquote><p><strong>devDependencies 节点</strong></p><ul><li>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中</li><li>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中</li></ul><p>可以使用如下的命令，将包记录到 devDependencies 节点中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装指定的包，并记录到 devDependencies 节点中</span><br><span class="line">npm i 包名 -D</span><br><span class="line">// 完整写法</span><br><span class="line">npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>可以到官网看install安装说明，有–save-dev的就可以用这个方法丢devDependencies 节点里</p></blockquote><p><strong>解决下包速度慢的问题</strong></p><p>为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 将nrm安装为全局可用的工具</span><br><span class="line">npm i nrm -g</span><br><span class="line">// 查看所有可用的镜像源</span><br><span class="line">nrm ls</span><br><span class="line">// 将下包的镜像源切换为taobao 镜像</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h3><p><strong>项目包</strong></p><p>那些被安装到项目的 node_modules 目录中的包，都是项目包</p><p>项目包又分为两类，分别是：</p><ul><li>开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到）</li><li>核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -D //开发依赖包（会被记录到devDependencies节点下）</span><br><span class="line">npm i 包名     //核心依赖包（会被记录到dependencies节点下）</span><br></pre></td></tr></table></figure><p><strong>全局包</strong></p><ul><li>在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包</li><li>全局包会被安装到 C:\Users\用户目录\AppData\Roaming\npm\node_modules 目录下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -g//全局安装指定的包</span><br><span class="line">npm uninstall 包名 -g  //卸载全局安装的包</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令</p><p>判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可</p></blockquote><p><strong>i5ting_toc</strong></p><p>i5ting_toc 是一个可以把 md 文档转为 html 页面的小工具，使用步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 将 i5ting_toc 安装为全局包</span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line">// 调用 i5ting_toc 实现md转html的功能</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h3 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h3><p>一个规范的包，它的组成结构，必须符合以下3点要求：</p><ul><li>包必须以单独的目录而存在</li><li>包的顶级目录下要必须包含 package.json 这个包管理配置文件</li><li>package.json 中必须包含name，version，main这三个属性，分别代表包的名字、版本号、包的入口</li></ul><blockquote><p>注意：</p><p>以上 3 点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址：<a href="https://yarnpkg.com/zh-Hans/docs/package-json">https://yarnpkg.com/zh-Hans/docs/package-json</a></p></blockquote><h3 id="开发属于自己的包"><a href="#开发属于自己的包" class="headerlink" title="开发属于自己的包"></a>开发属于自己的包</h3><p><strong>需要实现的功能</strong></p><ul><li>格式化日期</li><li>转义 HTML 中的特殊字符</li><li>还原 HTML 中的特殊字符</li></ul><p><strong>初始化包的基本结构</strong></p><p>新建 itheima-tools 文件夹，作为包的根目录</p><p>在 itheima-tools 文件夹中，新建如下三个文件：</p><ul><li><p>package.json （包管理配置文件）</p></li><li><p>index.js          （包的入口文件）</p></li><li><p>README.md  （包的说明文档）</p></li></ul><p><strong>初始化 package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;itheima-tools-douying&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供了格式化时间、HTMLEscape相关的功能&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;itheima&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dataFormat&quot;</span><span class="punctuation">,</span> <span class="string">&quot;escape&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义格式化时间的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化时间函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dateStr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">    <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">    <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补零函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span> + n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露需要的成员</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义转义 HTML 的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义转义 HTML 字符的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlEscape</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> htmlStr.<span class="title function_">replace</span>(<span class="regexp">/&lt;|&gt;|&quot;|&amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义还原 HTML 的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义还原 HTML 字符串的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlUnEscape</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将不同的功能进行模块化拆分</strong></p><ul><li>将格式化时间的功能，拆分到 src -&gt; dateFormat.js 中</li><li>将处理 HTML 字符串的功能，拆分到 src -&gt; htmlEscape.js 中</li><li>在 index.js 中，导入两个模块，得到需要向外共享的方法</li><li>在 index.js 中，使用 module.exports把对应的方法共享出去</li></ul><p><strong>编写包的说明文档</strong></p><p>包根目录中的 README.md 文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以markdown 的格式写出来，方便用户参考</p><p>README 文件中具体写什么内容，没有强制性的要求；只要能够清晰地把包的作用、用法、注意事项等描述清楚即可</p><p>我们所创建的这个包的 README.md 文档中，会包含以下 6 项内容：安装方式、导入方式、格式化时间、转义HTML 中的特殊字符、还原 HTML 中的特殊字符、开源协议</p><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><p><strong>登录</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><blockquote><p>记得使用身份验证器，需要一次性的密码</p></blockquote><p><strong>发布包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><blockquote><p>包名不能雷同</p></blockquote><p><strong>删除已发布的包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish 包名 --force</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>npmunpublish 命令只能删除72 小时以内发布的包</p><p>npmunpublish 删除的包，在24 小时内不允许重复发布</p><p>发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包</p></blockquote><h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><p>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次</p><blockquote><p>注意：</p><p>不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</p></blockquote><h3 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a>内置模块的加载机制</h3><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高</p><h3 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a>自定义模块的加载机制</h3><ul><li><p>使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F; 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载</p></li><li><p>在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>①按照确切的文件名进行加载</p><p>②补全 .js 扩展名进行加载&#x3D;</p><p>③补全 .json 扩展名进行加载</p><p>④补全 .node 扩展名进行加载</p><p>⑤加载失败，终端报错</p></li></ul><h3 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h3><ul><li><p>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘.&#x2F;’ 或 ‘..&#x2F;’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 &#x2F;node_modules 文件夹中加载第三方模块</p></li><li><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</p></li><li><p>例如，假设在 ‘C:\Users\itheima\project\foo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找：</p><p>① C:\Users\itheima\project\node_modules\tools</p><p>② C:\Users\itheima\node_modules\tools</p><p>③ C:\Users\node_modules\tools</p><p>④ C:\node_modules\tools</p></li></ul><h3 id="目录作为模块"><a href="#目录作为模块" class="headerlink" title="目录作为模块"></a>目录作为模块</h3><p>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p>①在被加载的目录下查找一个叫做package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>②如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件</p><p>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’</p><p>例：</p><p>1.新建test文件夹，在文件夹中放 a.js，index.js 和 package.json</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312045516.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 package.json 加载了 a.js 文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加载了 index.js 文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//package.json中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./a.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.新建 test.js 并调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./17-test&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049886.png"></p><p>3.删除 package.json 再次调用test.js</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049884.png"></p><p>4.删去index.js 再次调用test.js</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049885.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Node.js与内置模块</title>
      <link href="/posts/26305.html"/>
      <url>/posts/26305.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识Node-js"><a href="#初识Node-js" class="headerlink" title="初识Node.js"></a>初识Node.js</h2><p><a href="https://nodejs.org/zh-cn/">Node.js中文网</a></p><blockquote><p>Node.js®is a JavaScript runtime builton Chrome’s V8 JavaScript engine</p><p>Node.js 是一个基于ChromeV8 引擎的JavaScript 运行环境</p></blockquote><p>Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和API。然而，基于 Node.js 提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位：</p><ul><li>基于 Express 框架（<a href="http://www.expressjs.com.cn/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://www.expressjs.com.cn/），可以快速构建</a> Web 应用</li><li>基于 Electron 框架（<a href="https://electronjs.org/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/），可以构建跨平台的桌面应用</a></li><li>基于 restify 框架（<a href="http://restify.com/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://restify.com/），可以快速构建</a> API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li></ul><h3 id="终端中的快捷键"><a href="#终端中的快捷键" class="headerlink" title="终端中的快捷键"></a>终端中的快捷键</h3><p>①使用 ↑键，可以快速定位到上一次执行的命令</p><p>②使用 tab键，能够快速补全路径</p><p>③使用 esc键，能够快速清空当前已输入的命令</p><p>④输入 cls命令，可以清空终端</p><h2 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h2><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><p>例如：</p><ul><li>fs.readFile()方法，用来读取指定文件中的内容</li><li>fs.writeFile()方法，用来向指定的文件中写入内容</li></ul><p>如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="fs-readFile-读取文件"><a href="#fs-readFile-读取文件" class="headerlink" title="fs.readFile() 读取文件"></a>fs.readFile() 读取文件</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><blockquote><p>path：必选参数，字符串，表示文件的路径。</p><p>options：可选参数，表示以什么编码格式来读取文件。</p><p>callback：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</p></blockquote><h3 id="fs-writeFile-写入文件"><a href="#fs-writeFile-写入文件" class="headerlink" title="fs.writeFile()写入文件"></a>fs.writeFile()写入文件</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><blockquote><p>file：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径</p><p>data：必选参数，表示要写入的内容</p><p>options：可选参数，表示以什么格式写入文件内容，默认值是 utf8</p><p>callback：必选参数，文件写入完成后的回调函数</p></blockquote><h3 id="整理成绩案例"><a href="#整理成绩案例" class="headerlink" title="整理成绩案例"></a>整理成绩案例</h3><p>原数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小红=99 小白=100 小黄=70 小黑=66 小绿=88</span><br></pre></td></tr></table></figure><p>目标处理结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小红：99</span><br><span class="line">小白：100</span><br><span class="line">小黄：70</span><br><span class="line">小黑：66</span><br><span class="line">小绿：88</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用fs.readFile()方法读取文件的内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./成绩.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否读取成功</span></span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;读取文件成功! &#x27; + dataStr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把成绩的数据，按照空格进行分割</span></span><br><span class="line">    <span class="keyword">const</span> arrOld = dataStr.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环分割后的数组，对每一项数据，进行字符串的替换操作</span></span><br><span class="line">    <span class="keyword">const</span> arrNew = []</span><br><span class="line">    arrOld.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        arrNew.<span class="title function_">push</span>(item.<span class="title function_">replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;：&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 把新数组中的每一项，进行合并，得到一个新的字符串</span></span><br><span class="line">    <span class="keyword">const</span> newStr = arrNew.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用fs.writeFile()方法，把处理好的数据，写入到新文件中</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/成绩-ok.txt&#x27;</span>, newStr, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入文件失败!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成绩成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路径动态拼接的问题-dirname"><a href="#路径动态拼接的问题-dirname" class="headerlink" title="路径动态拼接的问题__dirname"></a>路径动态拼接的问题__dirname</h3><ul><li><p>在使用 fs 模块操作文件时，如果提供的操作路径是以 .&#x2F; 或 ..&#x2F; 开头的相对路径时，很容易出现路径动态拼接错误的问题</p></li><li><p>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</p></li><li><p>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供 .&#x2F; 或 ..&#x2F; 开头的相对路径，从而防止路径动态拼接的问题</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件成功&#x27;</span> + dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><p>例如：</p><ul><li>path.join()方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li>path.basename()方法，用来从路径字符串中，将文件名解析出来</li></ul><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="path-join-路径拼接"><a href="#path-join-路径拼接" class="headerlink" title="path.join() 路径拼接"></a>path.join() 路径拼接</h3><p>使用 path.join() 方法，可以把多个路径片段拼接为完整的路径字符串</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure><blockquote><p>…paths<code>&lt;string&gt;</code> 路径片段的序列</p><p>返回值:<code>&lt;string&gt;</code></p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意： ../会抵消前面的路径</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)  <span class="comment">// \a\d\e</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>今后凡是涉及到路径拼接的操作，都要使用 path.join() 方法进行处理。不要直接使用 + 进行字符串的拼接</p></blockquote><h3 id="path-basename-获取路径中的文件名"><a href="#path-basename-获取路径中的文件名" class="headerlink" title="path.basename() 获取路径中的文件名"></a>path.basename() 获取路径中的文件名</h3><p>使用 path.basename() 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[, ext])</span><br></pre></td></tr></table></figure><blockquote><p>path：<code>&lt;string&gt;</code> 必选参数，表示文件路径</p><p>ext：<code>&lt;string&gt;</code> 可选参数，表示文件扩展名</p><p>返回：<code>&lt;string&gt;</code> 表示路径中的最后一部分</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(fullName) <span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">// index</span></span><br></pre></td></tr></table></figure><h3 id="path-extname-获取路径中的文件扩展名"><a href="#path-extname-获取路径中的文件扩展名" class="headerlink" title="path.extname() 获取路径中的文件扩展名"></a>path.extname() 获取路径中的文件扩展名</h3><p>使用 path.extname() 方法，可以获取路径中的扩展名部分</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><blockquote><p>path：<code>&lt;string&gt;</code>必选参数，表示一个路径的字符串</p><p>返回：<code>&lt;string&gt;</code> 返回得到的扩展名字符串</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务</p><p>如果要希望使用 http 模块创建 Web 服务器，则需要先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>服务器和普通电脑的区别在于，服务器上安装了 web 服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件，就能把一台普通的电脑变成一台 web 服务器</p><p>在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。因为我们可以基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务</p></blockquote><h3 id="创建基本的web服务器"><a href="#创建基本的web服务器" class="headerlink" title="创建基本的web服务器"></a>创建基本的web服务器</h3><p>①导入 http 模块</p><p>②创建 web 服务器实例</p><p>③为服务器实例绑定 request 事件，监听客户端的请求</p><p>④启动服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器绑定request事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h3><p>只要服务器接收到了客户端的请求，就会调用通过 server.on() 为服务器绑定的 request 事件处理函数。<br>如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h3><p>在服务器的 request 事件处理函数中，如果想访问与服务器相关的数据或属性，可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="comment">// 调用res.end()方法，向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个字符串，包含中文的内容</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`您请求的URL地址是<span class="subst">$&#123;req.url&#125;</span>，请求的method类型为<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    <span class="comment">// 调用res.setHeader()方法，设置Content-Type响应头，解决中文乱码问题</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// res.end()将内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根据不同的-url-响应不同的-html-内容"><a href="#根据不同的-url-响应不同的-html-内容" class="headerlink" title="根据不同的 url 响应不同的 html 内容"></a>根据不同的 url 响应不同的 html 内容</h3><p>步骤：</p><p>①获取请求的 url 地址</p><p>②设置默认的响应内容为 404 Not found</p><p>③判断用户请求的是否为 &#x2F; 或 &#x2F;index.html首页</p><p>④判断用户请求的是否为 &#x2F;about.html 关于页面</p><p>⑤设置 Content-Type 响应头，防止中文乱码</p><p>⑥使用 res.end()把内容响应给客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的 url 地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// 设置默认的响应内容为 404 Not found</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 Not found&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="comment">// 判断用户请求的是否为 / 或 /index.html 首页</span></span><br><span class="line">    <span class="comment">// 判断用户请求的是否为 /about.html 关于页面</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置 Content-Type 响应头，防止中文乱码</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// 使用 res.end() 把内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(content)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/25246.html"/>
      <url>/posts/25246.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>Git 是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理</p><blockquote><p>特点：</p><p>项目越大越复杂，协同开发者越多，越能体现出 Git 的高性能和高可用性</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Git 之所以快速和高效，主要依赖于它的如下两个特性：</p><p>① 直接记录快照，而非差异比较</p><p>② 近乎所有操作都是本地执行</p><h4 id="SVN的差异比较"><a href="#SVN的差异比较" class="headerlink" title="SVN的差异比较"></a>SVN的差异比较</h4><p>传统的版本控制系统（例如 SVN）是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步累积的差异</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291715338.png"></p><blockquote><p>好处：</p><p>节省磁盘空间</p><p>缺点：</p><p>耗时、效率低</p><p>在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p></blockquote><h4 id="Git的记录快照"><a href="#Git的记录快照" class="headerlink" title="Git的记录快照"></a>Git的记录快照</h4><p>Git 快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291717590.png"></p><blockquote><p>缺点：</p><p>占用磁盘空间较大</p><p>优点：</p><p>版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可</p><p>特点：</p><p>空间换时间</p></blockquote><h4 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a>近乎所有操作都是本地执行</h4><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不<br>需要来自网络上其它计算机的信息</p><blockquote><p>特性：</p><p>① 断网后依旧可以在本地对项目进行版本管理</p><p>② 联网后，把本地修改的记录同步到云端服务器即可</p></blockquote><h3 id="Git中的三个区域"><a href="#Git中的三个区域" class="headerlink" title="Git中的三个区域"></a>Git中的三个区域</h3><p>使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库</p><h3 id="Git中的三种状态"><a href="#Git中的三种状态" class="headerlink" title="Git中的三种状态"></a>Git中的三种状态</h3><p>已修改modified：表示修改了文件，但还没将修改的结果放到暂存区</p><p>已暂存staged：表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中</p><p>已提交committed：表示文件已经安全地保存在本地的 Git 仓库中</p><blockquote><p>注意：</p><p>工作区的文件被修改了，但还没有放到暂存区，就是已修改状态</p><p>如果文件已修改并放入暂存区，就属于已暂存状态</p><p>如果 Git 仓库中保存着特定版本的文件，就属于已提交状态</p></blockquote><h3 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h3><p>基本的 Git 工作流程如下：</p><p>① 在工作区中修改文件</p><p>② 将你想要下次提交的更改进行暂存</p><p>③ 提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291853943.png"></p><h3 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h3><h4 id="获取Git仓库的两种方式"><a href="#获取Git仓库的两种方式" class="headerlink" title="获取Git仓库的两种方式"></a>获取Git仓库的两种方式</h4><p>① 将尚未进行版本控制的本地目录转换为 Git 仓库</p><p>② 从其它服务器克隆一个已存在的 Git 仓库</p><h4 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h4><p>如果自己有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，需要执行如下两个步骤：</p><p>① 在项目目录中，通过鼠标右键打开“Git Bash”</p><p>② 执行<code>git init</code>命令将当前的目录转化为 Git 仓库</p><blockquote><p><code>git init</code>命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分</p></blockquote><h4 id="工作区中文件的-4-种状态"><a href="#工作区中文件的-4-种状态" class="headerlink" title="工作区中文件的 4 种状态"></a>工作区中文件的 4 种状态</h4><p>工作区中的每一个文件可能有 4 种状态，这四种状态共分为两大类，如图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291904605.png"></p><blockquote><p>Git 操作的终极结果：让工作区中的文件都处于“未修改”的状态</p></blockquote><h4 id="检查文件的状态"><a href="#检查文件的状态" class="headerlink" title="检查文件的状态"></a>检查文件的状态</h4><p>可以使用<code>git status</code>命令查看文件处于什么状态，例如：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291911161.png"></p><blockquote><p>在状态报告中可以看到新建的所有文件出现在 Untracked files（未跟踪的文件）下面<br>未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非明确地告诉它“我需要使用 Git 跟踪管理该文件”</p></blockquote><h4 id="以精简的方式显示文件状态"><a href="#以精简的方式显示文件状态" class="headerlink" title="以精简的方式显示文件状态"></a>以精简的方式显示文件状态</h4><p>使用<code>git status</code>输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下两条完全等价的命令，其中 -s 是 –short 的简写形式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br><span class="line">git status --short</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291913465.png"></p><blockquote><p>未跟踪文件前面有红色的 ?? 标记</p></blockquote><h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><p>使用命令 <code>git add</code> 开始跟踪一个文件。 所以，要跟踪 index.html 文件，运行如下的命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br></pre></td></tr></table></figure><p>此时再运行 <code>git status</code> 命令，会看到 index.html 文件在 Changes to be committed 这行的下面，说明已被跟踪，并处于暂存状态：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291915810.png"></p><p>以精简的方式显示文件的状态:</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291915154.png"></p><blockquote><p>新添加到暂存区中的文件前面有绿色的 A 标</p></blockquote><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>现在暂存区中有一个 index.html 文件等待被提交到 Git 仓库中进行保存。可以执行 <code>git commit</code> 命令进行提交,其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;新建了index.html文件&quot;</span><br></pre></td></tr></table></figure><p>提交成功之后，会显示如下的信息：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291919170.png"></p><p>提交成功之后，再次检查文件的状态，得到提示如下：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291919171.png"></p><blockquote><p>证明工作区中所有的文件都处于“未修改”的状态，没有任何文件需要被提交</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291920374.png"></p><h4 id="对已提交的文件进行修改"><a href="#对已提交的文件进行修改" class="headerlink" title="对已提交的文件进行修改"></a>对已提交的文件进行修改</h4><p>目前，所有文件已经被 Git 跟踪，并且工作区和 Git 仓库中的 所有文件内容保持一致。当我们修改了工作区中 index.html 的内容之后，再次运行 <code>git status</code> 和 <code>git status -s</code> 命令，会看到如下的内容：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291923487.png"></p><blockquote><p>文件 index.html 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区</p><p>注意：修改过的、没有放入暂存区的文件前面有红色的 M 标记</p></blockquote><h4 id="暂存已修改的文件"><a href="#暂存已修改的文件" class="headerlink" title="暂存已修改的文件"></a>暂存已修改的文件</h4><p>目前，工作区中的 index.html 文件已被修改，如果要暂存这次修改，需要再次运行 <code>git add</code> 命令，这个命令是个多功能的命令，主要有如下 3 个功效：</p><p>① 可以用它开始跟踪新文件</p><p>② 把已跟踪的、且已修改的文件放到暂存区</p><p>③ 把有冲突的文件标记为已解决状态</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291925938.png"></p><h4 id="提交已暂存的文件"><a href="#提交已暂存的文件" class="headerlink" title="提交已暂存的文件"></a>提交已暂存的文件</h4><p>再次运行 <code>git commit -m &quot;提交消息&quot;</code> 命令，即可将暂存区中记录的 index.html 的快照，提交到 Git 仓库中进行保存：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291929543.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291930248.png"></p><h4 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h4><p>撤销对文件的修改指的是：把对工作区中对应文件的修改，还原成 Git 仓库中所保存的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- index.html</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291932354.png"></p><blockquote><p>操作的结果：所有的修改会丢失，且无法恢复！危险性比较高，请慎重操作！</p><p>撤销操作的本质：用 Git 仓库中保存的文件，覆盖工作区中指定的文件</p></blockquote><h4 id="向暂存区中一次性添加多个文件"><a href="#向暂存区中一次性添加多个文件" class="headerlink" title="向暂存区中一次性添加多个文件"></a>向暂存区中一次性添加多个文件</h4><p>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><blockquote><p>今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区</p></blockquote><h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 要移除的文件名称</span><br></pre></td></tr></table></figure><h4 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h4><p>Git 标准的工作流程是工作区 → 暂存区 → Git 仓库，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了工作区 → Git 仓库</p><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure><h4 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h4><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中同时移除对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> # 从Git仓库和工作区中同时移除文件</span><br><span class="line">git rm -f index.html</span><br><span class="line"># 只从Git仓库中移除文件, 保留工作区中的文件</span><br><span class="line">git rm --cached index.html</span><br></pre></td></tr></table></figure><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式</p><p>文件 .gitignore 的格式规范如下：</p><p>① 以 # 开头的是注释</p><p>② 以 &#x2F; 结尾的是目录</p><p>③ 以 &#x2F; 开头防止递归</p><p>④ 以 ! 开头表示取反</p><p>⑤ 可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><h4 id="glob-模式"><a href="#glob-模式" class="headerlink" title="glob 模式"></a>glob 模式</h4><p>所谓的 glob 模式是指简化了的正则表达式：</p><p>① 星号 * 匹配零个或多个任意字符</p><p>② [abc] 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）</p><p>③ 问号 ? 只匹配一个任意字符</p><p>④ 在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</p><p>⑤ 两个星号 ** 表示匹配任意中间目录（比如 a&#x2F;**&#x2F;z 可以匹配 a&#x2F;z 、a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等）</p><h4 id="gitignore-文件的例子"><a href="#gitignore-文件的例子" class="headerlink" title=".gitignore 文件的例子"></a>.gitignore 文件的例子</h4><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291955214.png"></p><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>如果希望回顾项目的提交历史，可以使用<code>git log</code>这个简单且有效的命令</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292000999.png"></p><h4 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h4><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292003753.png"></p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发，例如：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292025669.png"></p><h3 id="master-主分支"><a href="#master-主分支" class="headerlink" title="master 主分支"></a>master 主分支</h3><p>在初始化本地 Git 仓库的时候，Git 默认已经帮我们创建了一个名字叫做 master 的分支。通常我们把这个master 分支叫做主分支、</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292025669.png"></p><blockquote><p>在实际工作中，master 主分支的作用是：用来保存和记录整个项目已完成的功能代码</p><p>因此，不允许程序员直接在 master 分支上修改代码，因为这样做的风险太高，容易导致整个项目崩溃</p></blockquote><h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p>由于程序员不能直接在 master 分支上进行功能的开发，所以就有了功能分支的概念。</p><p>功能分支指的是专门用来开发新功能的分支，它是临时从 master 主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到 master 主分支上，如图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292028078.png"></p><h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><p>使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292030792.png"></p><blockquote><p>注意：</p><p>分支名字前面的 * 号表示当前所处的分支</p></blockquote><h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><p>使用如下的命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292031947.png"></p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>使用如下的命令，可以切换到指定的分支上进行开发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292032823.png"></p><h3 id="分支的快速创建和切换"><a href="#分支的快速创建和切换" class="headerlink" title="分支的快速创建和切换"></a>分支的快速创建和切换</h3><p>使用如下的命令，可以创建指定名称的新分支，并立即切换到新分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -b 表示创建一个新分支</span><br><span class="line"># checkout 表示切换到刚才新建的分支上</span><br><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292034450.png"></p><blockquote><p>注意：<br>“git checkout -b 分支名称” 是下面两条命令的简写形式：</p><p>① git branch 分支名称</p><p>② git checkout 分支名称</p></blockquote><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"># 在master分支上运行git merge 命令 将login 分支的代码合并到master分支</span><br><span class="line">git merge login</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292036430.png"></p><blockquote><p>合并分支时的注意点：</p><p>假设要把 C 分支的代码合并到 A 分支，则必须先切换到 A 分支上，再运行 git merge 命令，来合并 C 分支！</p></blockquote><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292039522.png"></p><h3 id="遇到冲突时的分支合并"><a href="#遇到冲突时的分支合并" class="headerlink" title="遇到冲突时的分支合并"></a>遇到冲突时的分支合并</h3><p>如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开这些包含冲突的文件然后手动解决冲突</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292041436.png"></p><h3 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h3><p>如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span><br><span class="line">git push -u 远程仓库的别名 本地分支名称:远程分支名称</span><br><span class="line"></span><br><span class="line"># 案例：</span><br><span class="line">git push -u origin payment:pay</span><br><span class="line"></span><br><span class="line"># 如果希望远程分支的名称和本地分支名称保存一致，可以队命令进行简化</span><br><span class="line">git push -u origin payment</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>第一次推送分支需要带 -u 参数，此后可以直接使用 git push 推送代码到远程分支</p></blockquote><h3 id="查看远程仓库中所有的分支列表"><a href="#查看远程仓库中所有的分支列表" class="headerlink" title="查看远程仓库中所有的分支列表"></a>查看远程仓库中所有的分支列表</h3><p> 通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同</span><br><span class="line">git checkout 远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git checkout pay</span><br><span class="line"></span><br><span class="line"># 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span><br><span class="line">git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git checkout -b payment origin/pay</span><br></pre></td></tr></table></figure><h3 id="拉取远程分支的最新的代码"><a href="#拉取远程分支的最新的代码" class="headerlink" title="拉取远程分支的最新的代码"></a>拉取远程分支的最新的代码</h3><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从远程仓库拉去当前分支最新的代码，保存当前分支的代码和远程分支代码一致</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除远程仓库中指定名称的远程分支</span><br><span class="line">git push 远程仓库名称 --delete 远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git push origin --delete pay</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域与JSONP以及HTTP协议加强</title>
      <link href="/posts/23558.html"/>
      <url>/posts/23558.html</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能</p><p>MDN 官方给定的概念：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制</p><blockquote><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>①无法读取非同源网页的Cookie、LocalStorage 和 IndexedDB</p><p>②无法接触非同源网页的DOM</p><p>③无法向非同源地址发送Ajax 请求</p></blockquote><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源</p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的同源检测：</p><table><thead><tr><th align="center">URL</th><th align="center">是否同源</th><th align="center">原因</th></tr></thead><tbody><tr><td align="center"><a href="http://www.test.com/other.html">http://www.test.com/other.html</a></td><td align="center">是</td><td align="center">同源（协议、域名、端口相同）</td></tr><tr><td align="center"><a href="https://www.test.com/about.html">https://www.test.com/about.html</a></td><td align="center">否</td><td align="center">协议不同（http  与  https）</td></tr><tr><td align="center"><a href="http://blog.test.com/movie.html">http://blog.test.com/movie.html</a></td><td align="center">否</td><td align="center">域名不同（<a href="http://www.test.com/">www.test.com</a> 与 blog.test.com）</td></tr><tr><td align="center"><a href="http://www.test.com:7001/home.html">http://www.test.com:7001/home.html</a></td><td align="center">否</td><td align="center">端口不同（默认的  80 端口与  7001 端口）</td></tr><tr><td align="center"><a href="http://www.test.com/main.html">http://www.test.com:80/main.html</a></td><td align="center">是</td><td align="center">同源（协议、域名、端口相同）</td></tr></tbody></table><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域</p><blockquote><p>出现跨域的根本原因：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</p><p>网页：<a href="http://www.test.com/index.html">http://www.test.com/index.html</a></p><p>接口：<a href="http://www.api.com/userlist">http://www.api.com/userlist</a></p></blockquote><h3 id="浏览器对跨域请求的拦截"><a href="#浏览器对跨域请求的拦截" class="headerlink" title="浏览器对跨域请求的拦截"></a>浏览器对跨域请求的拦截</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207281651510.png"></p><blockquote><p>注意：</p><p>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p></blockquote><h3 id="如何实现跨域数据请求"><a href="#如何实现跨域数据请求" class="headerlink" title="如何实现跨域数据请求"></a>如何实现跨域数据请求</h3><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code></p><p>JSONP：出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持 GET 请求，不支持 POST 请求</p><p>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>JSONP (JSON with Padding) 是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。<br>因此，JSONP 的实现原理，就是通过<code> &lt;script&gt;</code> 标签的 src 属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据</p><h3 id="自己实现一个简单的JSONP"><a href="#自己实现一个简单的JSONP" class="headerlink" title="自己实现一个简单的JSONP"></a>自己实现一个简单的JSONP</h3><p>定义一个success回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JSONP响应回来的数据是：&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过 script标签，请求接口数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://www.liulongbin.top:3006/api/jsonp?callback=success&amp;name=ls&amp;age=20&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JSONP的缺点"><a href="#JSONP的缺点" class="headerlink" title="JSONP的缺点"></a>JSONP的缺点</h3><p>由于 JSONP 是通过 <code>&lt;script&gt;</code> 标签的 src 属性，来实现跨域数据获取的，所以，JSONP 只支持 GET 数据请求，不支持 POST 请求。</p><blockquote><p>注意：</p><p>JSONP 和 Ajax 之间没有任何关系，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象</p></blockquote><h3 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a>jQuery中的JSONP</h3><p>jQuery 提供的 $.ajax() 函数，除了可以发起真正的 Ajax 数据请求之外，还能够发起 JSONP 数据请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 代表发起JSONP的请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 callback&#x3D;jQueryxxx 的参数，jQueryxxx 是随机生成的一个回调函数名称</p></blockquote><h3 id="自定义参数及回调函数名称"><a href="#自定义参数及回调函数名称" class="headerlink" title="自定义参数及回调函数名称"></a>自定义参数及回调函数名称</h3><p>在使用 jQuery 发起 JSONP 请求时，如果想要自定义 JSONP 的参数以及回调函数名称，可以通过如下两个参数来指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 代表发起JSONP的请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送到服务端的参数名称，默认为callback</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">    <span class="comment">// 自定义的回调函数名称，默认为jQueryxxx的格式</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery中JSONP的实现过程"><a href="#jQuery中JSONP的实现过程" class="headerlink" title="jQuery中JSONP的实现过程"></a>jQuery中JSONP的实现过程</h3><p>jQuery 中的 JSONP，也是通过 <code>&lt;script&gt;</code>标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是动态创建和移除 <code>&lt;script&gt;</code> 标签的方式，来发起 JSONP 数据请求</p><blockquote><p>在发起 JSONP 请求的时候，动态向<code>&lt;header&gt;</code>中append一个<code>&lt;script&gt;</code>标签</p><p>l在 JSONP 请求成功以后，动态从<code>&lt;header&gt;</code>中移除刚才append进去的<code>&lt;script&gt;</code>标签</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?address=浙江&amp;location=丽水&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>防抖策略（debounce）是当事件被触发后，延迟 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时</p><h4 id="防抖的应用场景"><a href="#防抖的应用场景" class="headerlink" title="防抖的应用场景"></a>防抖的应用场景</h4><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>节流策略（throttle），顾名思义，可以减少一段时间内事件的触发频率</p><h4 id="节流的应用场景"><a href="#节流的应用场景" class="headerlink" title="节流的应用场景"></a>节流的应用场景</h4><p>①鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次</p><p>②懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费CPU资源</p><h4 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h4><p>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作<br>当前操作执行完，必须将节流阀重置为空，表示可以执行下次操作了<br>每次执行操作前，必须先判断节流阀是否为空</p><blockquote><p>高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用<br>假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用<br>上一个人使用完毕后，需要将红灯重置为绿灯，表示下一个人可以使用卫生间<br>下一个人在上卫生间之前，需要先判断控制灯是否为绿色，来知晓能否上卫生间。</p></blockquote><h3 id="防抖和节流的区别"><a href="#防抖和节流的区别" class="headerlink" title="防抖和节流的区别"></a>防抖和节流的区别</h3><p>防抖：如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略<br>节流：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP 协议即超文本传送协议 (HyperText Transfer Protocol) ，它规定了客户端与服务器之间进行网页内容传输时，所必须遵守的传输格式</p><blockquote><p>客户端要以HTTP协议要求的格式把数据提交到服务器</p><p>服务器要以HTTP协议要求的格式把内容响应给客户端</p></blockquote><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>就是信息的传递和交换</p><blockquote><p>通信三要素：主体、内容、方式</p></blockquote><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>通信协议（Communication Protocol）是指通信的双方完成通信所必须遵守的规则和约定</p><blockquote><p>通俗的理解：</p><p>通信双方采用约定好的格式来发送和接收消息，这种事先约定好的通信格式，就叫做通信协议</p></blockquote><h2 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h2><p>由于 HTTP 协议属于客户端浏览器和服务器之间的通信协议。因此，客户端发起的请求叫做 HTTP 请求，客户端发送到服务器的消息，叫做 HTTP 请求消息</p><blockquote><p>注意：</p><p>HTTP 请求消息又叫做 HTTP 请求报文</p></blockquote><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>HTTP 请求消息由请求行（request line）、请求头部（ header ） 、空行 和 请求体 4 个部分组成</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282123894.png"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行由请求方式、URL 和 HTTP 协议版本 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282125845.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282125324.png"></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>请求头部用来描述客户端的基本信息，从而把客户端相关的信息告知服务器</p><p>请求头部由多行 键&#x2F;值对 组成，每行的键和值之间用英文的冒号分隔</p><blockquote><p>比如：</p><p>User-Agent 用来说明当前是什么类型的浏览器</p><p>Content-Type 用来描述发送到服务器的数据格式</p><p>Accept 用来描述客户端能够接收什么类型的返回内容</p><p>Accept-Language 用来描述客户端期望接收哪种人类语言的文本内容</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282129478.png"></p><table><thead><tr><th align="center">头部字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Host</td><td align="center">要请求的服务器域名</td></tr><tr><td align="center">Connection</td><td align="center">客户端与服务器的连接方式(close  或  keepalive)</td></tr><tr><td align="center">Content-Length</td><td align="center">用来描述请求体的大小</td></tr><tr><td align="center">Accept</td><td align="center">客户端可识别的响应内容类型列表</td></tr><tr><td align="center">User-Agent</td><td align="center">产生请求的浏览器类型</td></tr><tr><td align="center">Content-Type</td><td align="center">客户端告诉服务器实际发送的数据类型</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">客户端可接收的内容压缩编码形式</td></tr><tr><td align="center">Accept-Language</td><td align="center">用户期望获得的自然语言的优先顺序</td></tr></tbody></table><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282131186.png"></p><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>最后一个请求头字段的后面是一个空行，通知服务器请求头部至此结束</p><p>请求消息中的空行，用来分隔请求头部与请求体</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282132091.png"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体中存放的，是要通过 POST 方式提交到服务器的数据</p><blockquote><p>注意：</p><p>只有 POST 请求才有请求体，GET 请求没有请求体！</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282133146.png"></p><h2 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h2><p>响应消息就是服务器响应给客户端的消息内容，也叫作响应报文</p><h3 id="组成部分-1"><a href="#组成部分-1" class="headerlink" title="组成部分"></a>组成部分</h3><p>HTTP响应消息由状态行、响应头部、空行 和 响应体 4 个部分组成</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282138488.png"></p><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282140136.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282140137.png"></p><h4 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h4><p>响应头部用来描述服务器的基本信息。响应头部由多行 键&#x2F;值对 组成，每行的键和值之间用英文的冒号分隔</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282141607.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282141608.png"></p><h4 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h4><p>在最后一个响应头部字段结束之后，会紧跟一个空行，用来通知客户端响应头部至此结束</p><p>响应消息中的空行，用来分隔响应头部与响应体</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143562.png"></p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>响应体中存放的，是服务器响应给客户端的资源内容</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143563.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143525.png"></p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明要对服务器上的资源执行的操作。最常用的请求方法是 GET 和 POST</p><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">GET</td><td align="center">(查询)发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td align="center">2</td><td align="center">POST</td><td align="center">(新增)向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td align="center">3</td><td align="center">PUT</td><td align="center">(修改)向服务器提交资源，并使用提交的新资源，替换掉服务器对应的旧资源。</td></tr><tr><td align="center">4</td><td align="center">DELETE</td><td align="center">(删除)请求服务器删除指定的资源。</td></tr><tr><td align="center">5</td><td align="center">HEAD</td><td align="center">HEAD  方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td></tr><tr><td align="center">6</td><td align="center">OPTIONS</td><td align="center">获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。</td></tr><tr><td align="center">7</td><td align="center">CONNECT</td><td align="center">建立一个到由目标资源标识的服务器的隧道。</td></tr><tr><td align="center">8</td><td align="center">TRACE</td><td align="center">沿着到目标资源的路径执行一个消息环回测试，主要用于测试或诊断。</td></tr><tr><td align="center">9</td><td align="center">PATCH</td><td align="center">是对  PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h2><p>HTTP 响应状态码（HTTP Status Code），也属于 HTTP 协议的一部分，用来标识响应的状态</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282148245.png"></p><h3 id="组成和分类"><a href="#组成和分类" class="headerlink" title="组成和分类"></a>组成和分类</h3><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字用来对状态码进行细分</p><table><thead><tr><th align="center">分类</th><th align="center">分类描述</th></tr></thead><tbody><tr><td align="center">1**</td><td align="center">信息，服务器收到请求，需要请求者继续执行操作（实际开发中很少遇到  1**  类型的状态码）</td></tr><tr><td align="center">2**</td><td align="center">成功，操作被成功接收并处理</td></tr><tr><td align="center">3**</td><td align="center">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="center">4**</td><td align="center">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="center">5**</td><td align="center">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h4 id="2-成功相关的响应状态码"><a href="#2-成功相关的响应状态码" class="headerlink" title="2** 成功相关的响应状态码"></a>2** 成功相关的响应状态码</h4><p>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">OK</td><td align="center">请求成功。一般用于  GET 与 POST  请求</td></tr><tr><td align="center">201</td><td align="center">Created</td><td align="center">已创建。成功请求并创建了新的资源，通常用于  POST 或 PUT  请求</td></tr></tbody></table><h4 id="3-重定向相关的响应状态码"><a href="#3-重定向相关的响应状态码" class="headerlink" title="3** 重定向相关的响应状态码"></a>3** 重定向相关的响应状态码</h4><p>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">301</td><td align="center">Moved  Permanently</td><td align="center">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="center">302</td><td align="center">Found</td><td align="center">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="center">304</td><td align="center">Not  Modified</td><td align="center">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table><h4 id="4-客户端错误相关的响应状态码"><a href="#4-客户端错误相关的响应状态码" class="headerlink" title="4** 客户端错误相关的响应状态码"></a>4** 客户端错误相关的响应状态码</h4><p>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">400</td><td align="center">Bad  Request</td><td align="center">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。  2、请求参数有误。</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="center">当前请求需要用户验证。</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="center">服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="center">服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td align="center">408</td><td align="center">Request  Timeout</td><td align="center">请求超时。服务器等待客户端发送的请求时间过长，超时。</td></tr></tbody></table><h4 id="5-服务端错误相关的响应状态码"><a href="#5-服务端错误相关的响应状态码" class="headerlink" title="5** 服务端错误相关的响应状态码"></a>5** 服务端错误相关的响应状态码</h4><p>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">500</td><td align="center">Internal  Server Error</td><td align="center">服务器内部错误，无法完成请求。</td></tr><tr><td align="center">501</td><td align="center">Not  Implemented</td><td align="center">服务器不支持该请求方法，无法完成请求。只有  GET 和 HEAD  请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返回501</td></tr><tr><td align="center">503</td><td align="center">Service  Unavailable</td><td align="center">由于超载或系统维护，服务器暂时的无法处理客户端的请求。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加强</title>
      <link href="/posts/57185.html"/>
      <url>/posts/57185.html</url>
      
        <content type="html"><![CDATA[<h2 id="XMLHttpRequest的基本使用"><a href="#XMLHttpRequest的基本使用" class="headerlink" title="XMLHttpRequest的基本使用"></a>XMLHttpRequest的基本使用</h2><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的</p><h3 id="使用xhr发起GET请求"><a href="#使用xhr发起GET请求" class="headerlink" title="使用xhr发起GET请求"></a>使用xhr发起GET请求</h3><p>步骤：</p><p>①创建 xhr 对象</p><p>②调用 xhr.open() 函数</p><p>③调用 xhr.send() 函数</p><p>④监听 xhr.onreadystatechange 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 调用open函数 指定请求方式和URL地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用send函数 发起Ajax请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 监听onreadystatechange事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器响应的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xhr对象的readyState属性"><a href="#xhr对象的readyState属性" class="headerlink" title="xhr对象的readyState属性"></a>xhr对象的readyState属性</h3><p>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：</p><table><thead><tr><th align="center">值</th><th align="center">状态</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSENT</td><td align="center">XMLHttpRequest  对象已被创建，但尚未调用  open方法。</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">open() 方法已经被调用。</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">数据接收中，此时  response  属性中已经包含部分数据。</td></tr><tr><td align="center">4</td><td align="center">DONE</td><td align="center">Ajax  请求完成，这意味着数据传输已经彻底完成或失败。</td></tr></tbody></table><h3 id="使用xhr发起带参数的GET请求"><a href="#使用xhr发起带参数的GET请求" class="headerlink" title="使用xhr发起带参数的GET请求"></a>使用xhr发起带参数的GET请求</h3><p>使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...省略不必要的代码 同上</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)</span><br><span class="line"><span class="comment">// ...省略不必要的代码 同上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这种在 URL 地址后面拼接的参数，叫做查询字符串</p></blockquote><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）</p><blockquote><p>格式：将英文的 ? 放在URL 的末尾，然后再加上 参数＝值 ，想加上多个参数的话，使用 &amp; 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks</span></span><br><span class="line"><span class="comment">// 带一个参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks?id=1</span></span><br><span class="line"><span class="comment">// 带两个参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</span></span><br></pre></td></tr></table></figure><h4 id="GET请求携带参数的本质"><a href="#GET请求携带参数的本质" class="headerlink" title="GET请求携带参数的本质"></a>GET请求携带参数的本质</h4><p>无论使用<code>$.ajax()</code>，还是使用 <code>$.get()</code>，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br></pre></td></tr></table></figure><h3 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h3><p>URL 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 URL 地址中不允许出现中文字符<br>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行编码（转义）</p><blockquote><p>URL编码的原则：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符<br>URL编码原则的通俗理解：使用英文字符去表示非英文字符</p></blockquote><h4 id="如何对URL进行编码与解码"><a href="#如何对URL进行编码与解码" class="headerlink" title="如何对URL进行编码与解码"></a>如何对URL进行编码与解码</h4><p>浏览器提供了URL编码与解码的API，分别是：</p><p>encodeURI()  编码的函数</p><p>decodeURI()  解码的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">encodeURI</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br><span class="line"><span class="comment">// 输出字符串  %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="built_in">decodeURI</span>(<span class="string">&#x27;%E9%BB%91%E9%A9%AC&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3)</span><br><span class="line"><span class="comment">// 输出字符串  黑马</span></span><br></pre></td></tr></table></figure><blockquote><p>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码与解码操作</p></blockquote><h3 id="使用xhr发起POST请求"><a href="#使用xhr发起POST请求" class="headerlink" title="使用xhr发起POST请求"></a>使用xhr发起POST请求</h3><p>步骤：</p><p>①创建 xhr 对象</p><p>②调用 xhr.open() 函数</p><p>③设置 Content-Type 属性（固定写法）</p><p>④调用 xhr.send() 函数，同时指定要发送的数据</p><p>⑤监听 xhr.onreadystatechange 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用open函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Content-Type属性</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用send函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=海底三万里&amp;author=不知道&amp;publisher=浙江图书出版社&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><p>数据交换格式，就是服务器端与客户端之间进行数据传输与交换的格式</p><blockquote><p>前端领域，经常提及的两种数据交换格式分别是 XML 和 JSON。其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON</p></blockquote><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>XML 的英文全称是 EXtensible Markup Language，即可扩展标记语言。因此，XML 和 HTML 类似，也是一种标记语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>ls<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>通知<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>晚上开会<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>缺点：</p><p>XML 格式臃肿，和数据无关的代码多，体积大，传输效率低</p><p>在 Javascript中解析XML比较麻烦</p></blockquote><blockquote><p>HTML和XML的区别：</p><p>XML和HTML虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><p>HTML 被设计用来描述网页上的内容，是网页内容的载体</p><p>XML 被设计用来传输和存储数据，是数据的载体</p></blockquote><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”，简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串</p><blockquote><p>作用：</p><p>JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、更快、更易解析</p></blockquote><blockquote><p>JSON语法注意事项</p><p>①属性名必须使用双引号包裹</p><p>②字符串类型的值必须使用双引号包裹</p><p>③JSON 中不允许使用单引号表示字符串</p><p>④JSON 中不能写注释</p><p>⑤JSON 的最外层必须是对象或数组格式</p><p>⑥不能使用 undefined或函数作为JSON的值</p><p>JSON 的作用：在计算机与网络之间存储和传输数据。</p><p>JSON 的本质：用字符串来表示Javascript对象数据或数组数据</p></blockquote><h4 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h4><p>对象结构在 JSON 中表示为 { } 括起来的内容。数据结构为 { key: value, key: value, … } 的键值对结构。其中，key 必须是使用英文的双引号包裹的字符串，value 的数据类型可以是数字、字符串、布尔值、null、数组、对象6种类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;打豆豆&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h4><p>数组结构在 JSON 中表示为 [ ] 括起来的内容。数据结构为 [ “java”, “javascript”, 30, true … ] 。数组中数据的类型可以是数字、字符串、布尔值、null、数组、对象6种类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;php&quot;</span> ]</span><br><span class="line">[ <span class="number">100</span>, <span class="number">200</span>, <span class="number">300.5</span> ]</span><br><span class="line">[ <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span> ]</span><br><span class="line">[ &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;, &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125; ]</span><br><span class="line">[ [ <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;榴莲&quot;</span>, <span class="string">&quot;椰子&quot;</span> ], [ <span class="number">4</span>, <span class="number">50</span>, <span class="number">5</span> ] ]</span><br></pre></td></tr></table></figure><h4 id="JSON和JS对象的关系"><a href="#JSON和JS对象的关系" class="headerlink" title="JSON和JS对象的关系"></a>JSON和JS对象的关系</h4><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><p>JSON和JS对象的互转</p><p>要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;world&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// 结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="comment">// 结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><p>把数据对象转换为字符串的过程，叫做序列化，例如：调用 JSON.stringify() 函数的操作，叫做 JSON 序列化</p><p>把字符串转换为数据对象的过程，叫做反序列化，例如：调用JSON.parse()函数的操作，叫做JSON反序列化</p><h2 id="封装自己的Ajax函数"><a href="#封装自己的Ajax函数" class="headerlink" title="封装自己的Ajax函数"></a>封装自己的Ajax函数</h2><h3 id="定义options参数选项"><a href="#定义options参数选项" class="headerlink" title="定义options参数选项"></a>定义options参数选项</h3><p>itheima() 函数是我们自定义的 Ajax 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性</p><p>method   请求的类型</p><p>url           请求的URL地址</p><p>data        请求携带的数据</p><p>success   请求成功之后的回调函数</p><h3 id="处理data参数"><a href="#处理data参数" class="headerlink" title="处理data参数"></a>处理data参数</h3><p>需要把 data 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 resolveData 函数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = k + <span class="string">&#x27;=&#x27;</span> + data[k]</span><br><span class="line">        arr.<span class="title function_">push</span>(str) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">resolveData</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="定义itheima函数"><a href="#定义itheima函数" class="headerlink" title="定义itheima函数"></a>定义itheima函数</h3><p>在 itheima() 函数中，需要创建 xhr 对象，并监听onreadystatechange 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">itheima</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把外界传入的data转换成 查询字符串</span></span><br><span class="line">    <span class="keyword">let</span> qs = <span class="title function_">resolveData</span>(options.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            options.<span class="title function_">success</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断请求类型"><a href="#判断请求类型" class="headerlink" title="判断请求类型"></a>判断请求类型</h3><p>不同的请求类型，对应 xhr 对象的不同操作，因此需要对请求类型进行 if … else … 的判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 发起GET请求</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + qs)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 发起POST请求</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span>)</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>(qs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h2><p>旧版XMLHttpRequest 的缺点</p><blockquote><p>①只支持文本数据的传输，无法用来读取和上传文件</p><p>②传送和接收数据时，没有进度信息，只能提示有没有完成</p></blockquote><p>XMLHttpRequest Level2的新功能</p><blockquote><p>①可以设置 HTTP 请求的时限</p><p>②可以使用 FormData对象管理表单数据</p><p>③可以上传文件</p><p>④可以获得数据传输的进度信息</p></blockquote><h3 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置HTTP请求时限</h3><p>有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个 timeout 事件，用来指定回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请求超时！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FormData对象管理表单数据"><a href="#FormData对象管理表单数据" class="headerlink" title="FormData对象管理表单数据"></a>FormData对象管理表单数据</h3><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，HTML5 新增了一个 FormData 对象，可以模拟表单操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 调用append函数，向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FormData对象也可以用来获取网页表单的值，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 调用append函数，向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>新版 XMLHttpRequest 对象，不仅可以发送文本信息，还可以上传文件</p><p>步骤：</p><p>①定义 UI结构</p><p>②验证是否选择了文件</p><p>③向 FormData中追加文件</p><p>④使用 xhr发起上传文件的请求</p><p>⑤监听 onreadystatechange事件</p><h4 id="定义UI结构"><a href="#定义UI结构" class="headerlink" title="定义UI结构"></a>定义UI结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件的按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- img标签，来显示上传成功以后的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证是否选择了文件"><a href="#验证是否选择了文件" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证上传文件按钮</span></span><br><span class="line"><span class="keyword">let</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>)</span><br><span class="line"><span class="comment">// 给按钮添加click事件监听</span></span><br><span class="line">btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取用户选择的文件列表</span></span><br><span class="line">    <span class="keyword">let</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span></span><br><span class="line">    <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择要上传的文件&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="向FormData中追加文件"><a href="#向FormData中追加文件" class="headerlink" title="向FormData中追加文件"></a>向FormData中追加文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向FormData中追加文件</span></span><br><span class="line"><span class="comment">// 创建FormData 对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 将用户选择的文件添加到FormData中</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="使用-xhr-发起上传文件的请求"><a href="#使用-xhr-发起上传文件的请求" class="headerlink" title="使用 xhr 发起上传文件的请求"></a>使用 xhr 发起上传文件的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 调用open函数 指定请求类型和url地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>)</span><br><span class="line"><span class="comment">// 发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><h4 id="监听onreadystatechange事件"><a href="#监听onreadystatechange事件" class="headerlink" title="监听onreadystatechange事件"></a>监听onreadystatechange事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 上传成功</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 上传失败</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h3><p>新版本的 XMLHttpRequest 对象中，可以通过监听 xhr.upload.onprogress 事件，来获取到文件的上传进度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文件上传进度</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算出上传进度</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(percentComplete)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入需要的库"><a href="#导入需要的库" class="headerlink" title="导入需要的库"></a>导入需要的库</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于Bootstrap渲染进度条"><a href="#基于Bootstrap渲染进度条" class="headerlink" title="基于Bootstrap渲染进度条"></a>基于Bootstrap渲染进度条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bootstrap中的进度条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 15px 10px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50%&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span>&gt;</span></span><br><span class="line">      50%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="监听上传进度的事件"><a href="#监听上传进度的事件" class="headerlink" title="监听上传进度的事件"></a>监听上传进度的事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文件上传进度</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算出上传进度</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(percentComplete)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态设置进度条</span></span><br><span class="line">        $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + percentComplete + <span class="string">&#x27;%;&#x27;</span>).<span class="title function_">html</span>(percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听上传完成的事件"><a href="#监听上传完成的事件" class="headerlink" title="监听上传完成的事件"></a>监听上传完成的事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听上传完成的事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">removeClass</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery高级用法"><a href="#jQuery高级用法" class="headerlink" title="jQuery高级用法"></a>jQuery高级用法</h2><h3 id="jQuery实现文件上传"><a href="#jQuery实现文件上传" class="headerlink" title="jQuery实现文件上传"></a>jQuery实现文件上传</h3><h4 id="定义UI结构-1"><a href="#定义UI结构-1" class="headerlink" title="定义UI结构"></a>定义UI结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证是否选择了文件-1"><a href="#验证是否选择了文件-1" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> files = $(<span class="string">&#x27;#file1&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line">        <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择文件上传&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="向FormData中追加文件-1"><a href="#向FormData中追加文件-1" class="headerlink" title="向FormData中追加文件"></a>向FormData中追加文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 FormData 中追加文件</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="使用jQuery发起上传文件的请求"><a href="#使用jQuery发起上传文件的请求" class="headerlink" title="使用jQuery发起上传文件的请求"></a>使用jQuery发起上传文件的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起jQuery的Ajax请求上传文件</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: fd,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a>jQuery实现loading效果</h3><h4 id="ajaxStart-callback"><a href="#ajaxStart-callback" class="headerlink" title="ajaxStart(callback)"></a>ajaxStart(callback)</h4><p>Ajax 请求开始时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听到Ajax请求发起，显示图片</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意： </p><p>$(document).ajaxStart() 函数会监听当前文档内所有的 Ajax 请求</p></blockquote><h4 id="ajaxStop-callback"><a href="#ajaxStop-callback" class="headerlink" title="ajaxStop(callback)"></a>ajaxStop(callback)</h4><p>Ajax 请求结束时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听到Ajax请求完成，隐藏图片</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>Axios是专注于网络数据请求的库，相比于原生的XMLHttpRequest对象，axios简单易用，相比于jQuery，axios更加轻量化，只专注于网络数据请求</p><h3 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a>axios发起GET请求</h3><p>axios 发起 get 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="comment">/*参数*/</span> &#125; &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> paramsObj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    axios.<span class="title function_">get</span>(url, &#123;<span class="attr">params</span>: paramsObj&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios发起POST请求"><a href="#axios发起POST请求" class="headerlink" title="axios发起POST请求"></a>axios发起POST请求</h3><p>axios 发起 post 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="comment">/*参数*/</span> &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> dataObj = &#123;</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;浙江&#x27;</span>,</span><br><span class="line">        <span class="attr">location</span>: <span class="string">&#x27;丽水&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="直接使用axios发起请求"><a href="#直接使用axios发起请求" class="headerlink" title="直接使用axios发起请求"></a>直接使用axios发起请求</h3><p>axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;,</span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;</span><br><span class="line">&#125;) .<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><h4 id="直接使用axios发起GET请求"><a href="#直接使用axios发起GET请求" class="headerlink" title="直接使用axios发起GET请求"></a>直接使用axios发起GET请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> paramsData = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;钢铁侠&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">35</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">params</span>: paramsData</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="直接使用axios发起POST请求"><a href="#直接使用axios发起POST请求" class="headerlink" title="直接使用axios发起POST请求"></a>直接使用axios发起POST请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;娃哈哈&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form表单与模板引擎</title>
      <link href="/posts/33277.html"/>
      <url>/posts/33277.html</url>
      
        <content type="html"><![CDATA[<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;正常出现在文中就无法上传文档，所以我就用了``&#123;% raw %&#125;&#123;&#123;&#125;&#125;&#123;% endraw %&#125;``的形式加注了一下</span><br></pre></td></tr></table></figure><h2 id="form表单的基本使用"><a href="#form表单的基本使用" class="headerlink" title="form表单的基本使用"></a>form表单的基本使用</h2><p>表单在网页中主要负责数据采集功能。HTML中的<code>&lt;form&gt;</code>标签，就是用于采集用户输入的信息，并通过<code>&lt;form&gt;</code>标签的提交操作，把采集到的信息提交到服务器端进行处理。</p><h3 id="表单组成部分"><a href="#表单组成部分" class="headerlink" title="表单组成部分"></a>表单组成部分</h3><blockquote><p>表单由三个基本部分组成：</p><p>表单标签</p><p>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等</p><p>表单按钮</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email_or_mobile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember_me&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="form标签的属性"><a href="#form标签的属性" class="headerlink" title="form标签的属性"></a>form标签的属性</h3><p><code>&lt;form&gt;</code>标签用来采集数据，<code>&lt;form&gt;</code>标签的属性则是用来规定如何把采集到的数据发送到服务器</p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">URL地址</td><td align="center">规定当提交表单时，向何处发送表单数据</td></tr><tr><td align="center">method</td><td align="center">get或post</td><td align="center">规定以何种方式把表单数据提交到 action  URL</td></tr><tr><td align="center">enctype</td><td align="center">application&#x2F;x-www-form-urlencoded    multipart&#x2F;form-data  text&#x2F;plain</td><td align="center">规定在发送表单数据之前如何对其进行编码</td></tr><tr><td align="center">target</td><td align="center">_blank  _self  _parent  _top  framename</td><td align="center">规定在何处打开 action  URL</td></tr></tbody></table><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p><code>action</code>属性用来规定当提交表单时，向何处发送表单数据</p><p><code>action</code>属性的值应该是后端提供的一个URL地址，这个URL地址专门负责接收表单提交过来的数据</p><p>当<code>&lt;form&gt;</code>表单在未指定<code>action</code>属性值的情况下，<code>action</code>的默认值为当前页面的URL地址</p><blockquote><p>注意：</p><p>当提交表单后，页面会立即跳转到<code>action</code>属性指定的URL地址</p></blockquote><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p><code>target</code> 属性用来规定在何处打开 action URL</p><p>它的可选值有5个，默认情况下，<code>target</code>的值是_self，表示在相同的框架中打开action URL</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">_blank</td><td align="center">在新窗口中打开</td></tr><tr><td align="center">_self</td><td align="center">默认。在相同的框架中打开</td></tr><tr><td align="center">_parent</td><td align="center">在父框架集中打开。（很少用）</td></tr><tr><td align="center">_top</td><td align="center">在整个窗口中打开。（很少用）</td></tr><tr><td align="center">framename</td><td align="center">在指定的框架中打开。（很少用）</td></tr></tbody></table><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><p><code>method</code> 属性用来规定以何种方式把表单数据提交到action URL</p><p>它的可选值有两个，分别是get和post</p><p>默认情况下，<code>method</code>的值为get，表示通过URL地址的形式，把表单数据提交到action URL</p><blockquote><p>注意：</p><p>get方式适合用来提交少量的、简单的数据</p><p>post方式适合用来提交大量的、复杂的、或包含文件上传的数据</p><p>在实际开发中，<code>&lt;form&gt;</code>表单的post提交方式用的最多，很少用get。例如登录、注册、添加数据等表单操作，都需要使用post方式来提交表单</p></blockquote><h4 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h4><p><code>enctype</code> 属性用来规定在发送表单数据之前如何对数据进行编码</p><p>它的可选值有三个，默认情况下，<code>enctype</code>的值为application&#x2F;x-www-form-urlencoded，表示在发送前编码所有的字符</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">application&#x2F;x-www-form-urlencoded</td><td align="center">在发送前编码所有字符（默认）</td></tr><tr><td align="center">multipart&#x2F;form-data</td><td align="center">不对字符编码。  在使用包含文件上传控件的表单时，必须使用该值</td></tr><tr><td align="center">text&#x2F;plain</td><td align="center">空格转换为 “+”  加号，但不对特殊字符编码。（很少用）</td></tr></tbody></table><blockquote><p>注意：</p><p>在涉及到文件上传的操作时，必须将<code>enctype</code>的值设置为multipart&#x2F;form-dat</p><p>如果表单的提交不涉及到文件上传操作，则直接将<code>enctype</code>的值设置为application&#x2F;x-www-form-urlencoded即可</p></blockquote><h3 id="表单的同步提交"><a href="#表单的同步提交" class="headerlink" title="表单的同步提交"></a>表单的同步提交</h3><p>通过点击submit按钮，触发表单提交的操作，从而使页面跳转到action URL 的行为，叫做表单的同步提交</p><blockquote><p>缺点：</p><p><code>&lt;form&gt;</code>表单同步提交后，整个页面会发生跳转，跳转到 action URL 所指向的地址，用户体验很差</p><p><code>&lt;form&gt;</code>表单同步提交后，页面之前的状态和数据会丢失</p></blockquote><blockquote><p>解决方案：</p><p>表单只负责采集数据，Ajax 负责将数据提交到服务器</p></blockquote><h2 id="通过Ajax提交表单数据"><a href="#通过Ajax提交表单数据" class="headerlink" title="通过Ajax提交表单数据"></a>通过Ajax提交表单数据</h2><h3 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h3><p>在jQuery中，可以使用如下两种方式，监听到表单的提交事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="阻止表单默认提交行为"><a href="#阻止表单默认提交行为" class="headerlink" title="阻止表单默认提交行为"></a>阻止表单默认提交行为</h3><p>当监听到表单的提交事件以后，可以调用事件对象的event.preventDefault()函数，来阻止表单的提交和页面的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// 阻止表单的提交和页面的跳转</span></span><br><span class="line">   e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// 阻止表单的提交和页面的跳转</span></span><br><span class="line">   e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="快速获取表单中的数据"><a href="#快速获取表单中的数据" class="headerlink" title="快速获取表单中的数据"></a>快速获取表单中的数据</h3><h4 id="serialize-函数"><a href="#serialize-函数" class="headerlink" title="serialize()函数"></a>serialize()函数</h4><p>为了简化表单中数据的获取操作，jQuery提供了 serialize()函数，其语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><blockquote><p>优点：</p><p>可以一次性获取到表单中的所有的数据</p><p>注意：</p><p>在使用 serialize()函数快速获取表单数据时，必须为每个表单元素添加name属性！</p></blockquote><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面</p><blockquote><p>优点：</p><p>减少了字符串的拼接操作</p><p>使代码结构更清晰</p><p>使代码更易于阅读与维护</p></blockquote><h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><p>art-template 是一个简约、超快的模板引擎。中文官网首页为<a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p><h3 id="使用传统方式渲染UI结构"><a href="#使用传统方式渲染UI结构" class="headerlink" title="使用传统方式渲染UI结构"></a>使用传统方式渲染UI结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>会员：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;isVIP&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>注册时间：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;regTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱好1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱好2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&lt;h3&gt;用户信息&lt;/h3&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">isVIP</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">regTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;吃饭&#x27;</span>, <span class="string">&#x27;睡觉&#x27;</span>, <span class="string">&#x27;打豆豆&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">name</span>)</span><br><span class="line">    $(<span class="string">&#x27;#title&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">title</span>)</span><br><span class="line">    $(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">age</span>)</span><br><span class="line">    $(<span class="string">&#x27;#isVIP&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">isVIP</span>)</span><br><span class="line">    $(<span class="string">&#x27;#regTime&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">regTime</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rows = []</span><br><span class="line">    $.<span class="title function_">each</span>(data.<span class="property">hobby</span>, <span class="keyword">function</span> (<span class="params">i, item</span>) &#123;</span><br><span class="line">        rows.<span class="title function_">push</span>(<span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;#hobby&#x27;</span>).<span class="title function_">html</span>(rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="art-template使用步骤"><a href="#art-template使用步骤" class="headerlink" title="art-template使用步骤"></a>art-template使用步骤</h3><p>导入 art-template</p><p>定义数据</p><p>定义模板</p><p>调用 template函数</p><p>渲染HTML结构</p><h3 id="art-template标准语法"><a href="#art-template标准语法" class="headerlink" title="art-template标准语法"></a>art-template标准语法</h3><p>art-template提供了<code>{{}}</code>这种语法格式，在<code>{{}}</code> 内可以进行变量输出，或循环数组等操作，这种<code>{{}}</code>语法在art-template中被称为标准语法</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value&#125;&#125;</span><br><span class="line">&#123;&#123;obj.<span class="property">key</span>&#125;&#125;</span><br><span class="line">&#123;&#123;obj[<span class="string">&#x27;key&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;a ? b : c&#125;&#125;</span><br><span class="line">&#123;&#123;a || b&#125;&#125;</span><br><span class="line">&#123;&#123;a + b&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>{{}}</code>语法中，可以进行变量的输出、对象属性的输出、三元表达式输出、逻辑或输出、加减乘除等表达式输出</p></blockquote><h4 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;@ value &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要输出的value值中，包含了HTML标签结构，则需要使用原文输出语法，才能保证HTML标签被正常渲染</p></blockquote><h4 id="条件输出"><a href="#条件输出" class="headerlink" title="条件输出"></a>条件输出</h4><p>如果要实现条件输出，则可以在<code>{{}}</code>中使用if… else if …&#x2F;if 的方式，进行按需输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> value&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> v1&#125;&#125; 按需输出的内容 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> v2&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环输出"><a href="#循环输出" class="headerlink" title="循环输出"></a>循环输出</h4><p>如果要实现循环输出，则可以在<code>{{}}</code>内，通过each语法循环数组，当前循环的索引使用<code>$index </code>进行访问，当前的循环项使用<code>$value</code>进行访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each arr&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器的本质，就是一个function处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filterName&#125;&#125;</span><br></pre></td></tr></table></figure><p>过滤器语法类似管道操作符，它的上一个输出作为下一个输入</p><p>定义过滤器的基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">filterName</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="comment">/*return处理的结果*/</span>&#125;</span><br></pre></td></tr></table></figure><p>定义格式化时间过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;注册时间：&#123;&#123;regTime | dateFormat&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = <span class="keyword">function</span>(<span class="params">date</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">   <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">   <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d <span class="comment">// 注意，过滤器最后一定要 return 一个值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎实现原理"><a href="#模板引擎实现原理" class="headerlink" title="模板引擎实现原理"></a>模板引擎实现原理</h2><h3 id="正则与字符串操作"><a href="#正则与字符串操作" class="headerlink" title="正则与字符串操作"></a>正则与字符串操作</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>exec() 函数用于检索字符串中的正则表达式的匹配</p><p>如果字符串中有匹配的值，则返回该匹配值，否则返回 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RegExpObject</span>.<span class="title function_">exec</span>(string)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/o/</span></span><br><span class="line"><span class="keyword">let</span> result = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>正则表达式中 ( ) 包起来的内容表示一个分组，可以通过分组来提取自己想要的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(patternResult)</span><br><span class="line"><span class="comment">// 得到 name 相关的分组信息</span></span><br><span class="line"><span class="comment">// [&quot;&#123;&#123;name&#125;&#125;&quot;, &quot;name&quot;, index: 7, input: &quot;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="字符串的replace函数"><a href="#字符串的replace函数" class="headerlink" title="字符串的replace函数"></a>字符串的replace函数</h4><p>replace() 函数用于在字符串中用一些字符替换另一些字符，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123456&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>) </span><br><span class="line"><span class="comment">// 得到的 result 的值为字符串 &#x27;abc456&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"><span class="keyword">let</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="comment">// console.log(patternResult)</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], patternResult[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h5 id="多次replace"><a href="#多次replace" class="headerlink" title="多次replace"></a>多次replace</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次匹配</span></span><br><span class="line"><span class="keyword">let</span> res1 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line">str = str.<span class="title function_">replace</span>(res1[<span class="number">0</span>], res1[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 输出 &lt;div&gt;name今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二场匹配</span></span><br><span class="line"><span class="keyword">let</span> res2 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line">str = str.<span class="title function_">replace</span>(res2[<span class="number">0</span>], res2[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 输出 &lt;div&gt;name今年age岁了&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三次匹配</span></span><br><span class="line"><span class="keyword">let</span> res3 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)   <span class="comment">//null</span></span><br></pre></td></tr></table></figure><h5 id="使用while循环replace"><a href="#使用while循环replace" class="headerlink" title="使用while循环replace"></a>使用while循环replace</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line"><span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], patternResult[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h5 id="replace替换为真值"><a href="#replace替换为真值" class="headerlink" title="replace替换为真值"></a>replace替换为真值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line"><span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], data[patternResult[<span class="number">1</span>]])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h3 id="实现简易的模板引擎"><a href="#实现简易的模板引擎" class="headerlink" title="实现简易的模板引擎"></a>实现简易的模板引擎</h3><blockquote><p>步骤：</p><p>①定义模板结构</p><p>②预调用模板引擎</p><p>③封装 template函数</p><p>④导入并使用自定义的模板引擎</p></blockquote><p>1.定义模板结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-user&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>性别：</span><span class="template-variable">&#123;&#123;  <span class="name">gender</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>住址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>  &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.预调用模板引擎</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;浙江丽水&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用模板引擎</span></span><br><span class="line"><span class="keyword">let</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-user&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染html结构</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-box&#x27;</span>).<span class="property">innerHTML</span> = htmlStr</span><br></pre></td></tr></table></figure><p>3.封装 template函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">template</span>(<span class="params">id, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">innerHTML</span></span><br><span class="line">  <span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], data[patternResult[<span class="number">1</span>]])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入并使用自定义的模板引擎</p><p>最后导入JS</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器的基本概念与初识Ajax</title>
      <link href="/posts/45118.html"/>
      <url>/posts/45118.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解Ajax</h2><p>Ajax的全称是Asynchronous Javascript And XML（异步 JavaScript和XML）</p><p>通俗的理解：在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式，就是Ajax</p><blockquote><p>作用：</p><p>Ajax能让我们轻松实现网页与服务器之间的数据交互。</p></blockquote><h3 id="Ajax典型应用场景"><a href="#Ajax典型应用场景" class="headerlink" title="Ajax典型应用场景"></a>Ajax典型应用场景</h3><p>1.用户名检测：注册用户时，通过ajax的形式，动态检测用户名是否被占用</p><p>2.搜索提示：当输入搜索关键字时，通过ajax的形式，动态加载搜索提示列表</p><p>3.数据分页显示：当点击页码值的时候，通过ajax的形式，根据页码值动态刷新表格的数据</p><p>4.数据的增删改查：数据的添加、删除、修改、查询操作，都需要通过ajax的形式，来实现数据的交互</p><h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><p>浏览器中提供的XMLHttpRequest 用法比较复杂，所以jQuery对XMLHttpRequest进行了封装，提供了一系列Ajax相关的函数，极大地降低了 Ajax 的使用难度</p><blockquote><p>jQuery中发起Ajax请求最常用的三个方法：</p><p>$.get( )</p><p>$.post( )</p><p>$.ajax( )</p></blockquote><h3 id="get-函数"><a href="#get-函数" class="headerlink" title="$.get()函数"></a>$.get()函数</h3><p>jQuery中<code>$.get()</code>函数的功能单一，专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table><h4 id="get-发起不带参数的请求"><a href="#get-发起不带参数的请求" class="headerlink" title="$.get()发起不带参数的请求"></a>$.get()发起不带参数的请求</h4><p>使用 <code>$.get()</code>函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759402.png"></p><h4 id="get-发起带参数的请求"><a href="#get-发起带参数的请求" class="headerlink" title="$.get()发起带参数的请求"></a>$.get()发起带参数的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnGetInfo&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759850.png"></p><h3 id="post-函数"><a href="#post-函数" class="headerlink" title="$.post()函数"></a>$.post()函数</h3><p>jQuery 中<code>$.post()</code>函数的功能单一，专门用来发起post请求，从而向服务器提交数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">提交数据的地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">要提交的数据</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">数据提交成功时的回调函数</td></tr></tbody></table><h4 id="post-向服务器提交数据"><a href="#post-向服务器提交数据" class="headerlink" title="$.post()向服务器提交数据"></a>$.post()向服务器提交数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;<span class="attr">bookname</span>: <span class="string">&#x27;活着&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;余华&#x27;</span>, <span class="attr">publisher</span>: <span class="string">&#x27;上海图书出版社&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759792.png"></p><h3 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$.ajax()函数"></a>$.ajax()函数</h3><p>相比于<code>$.get()</code>和<code>$.post()</code>函数，jQuery中提供的<code>$.ajax()</code>函数，是一个功能比较综合的函数，它允许我们对Ajax请求进行更详细的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求的方式，例如 GET 或 POST</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; &#125; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ajax-发起GET请求"><a href="#ajax-发起GET请求" class="headerlink" title="$.ajax()发起GET请求"></a>$.ajax()发起GET请求</h4><p>使用 <code>$.ajax()</code>发起GET请求时，只需要将type 属性的值设置为’GET’ 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252002618.png"></p><h4 id="ajax-发起POST请求"><a href="#ajax-发起POST请求" class="headerlink" title="$.ajax()发起POST请求"></a>$.ajax()发起POST请求</h4><p>使用 <code>$.ajax()</code>发起POST请求时，只需要将type 属性的值设置为’POST’ 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; <span class="comment">// 要提交给服务器的数据</span></span><br><span class="line">      <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span><br><span class="line">      <span class="attr">publisher</span>: <span class="string">&#x27;上海图书出版社&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252002619.png"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>使用Ajax请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。</p><h3 id="通过GET方法请求接口的过程"><a href="#通过GET方法请求接口的过程" class="headerlink" title="通过GET方法请求接口的过程"></a>通过GET方法请求接口的过程</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252004250.png"></p><h3 id="通过POST方法请求接口的过程"><a href="#通过POST方法请求接口的过程" class="headerlink" title="通过POST方法请求接口的过程"></a>通过POST方法请求接口的过程</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252004110.png"></p><h3 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h3><p>为了验证接口能否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测。</p><blockquote><p>优点：</p><p>接口测试工具能让我们在不写任何代码的情况下，对接口进行调用和测试。</p></blockquote><h4 id="使用PostMan测试GET接口"><a href="#使用PostMan测试GET接口" class="headerlink" title="使用PostMan测试GET接口"></a>使用PostMan测试GET接口</h4><blockquote><p>步骤：</p><p>1.选择请求的方式</p><p>2.填写请求的URL地址</p><p>3.填写请求的参数</p><p>4.点击 Send按钮发起GET请求</p><p>5.查看服务器响应的结果</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252033869.png"></p><h4 id="使用PostMan测试POST接口"><a href="#使用PostMan测试POST接口" class="headerlink" title="使用PostMan测试POST接口"></a>使用PostMan测试POST接口</h4><blockquote><p>步骤：</p><p>1.选择请求的方式</p><p>2.填写请求的URL地址</p><p>3.选择 Body面板并勾选数据格式</p><p>4.填写要发送到服务器的数据</p><p>5.点击 Send按钮发起POST请求</p><p>6.查看服务器响应的结果</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252033871.png"></p><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL，参数以及输出内容的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p><blockquote><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><p>1.接口名称：用来标识各个接口的简单说明，如<code>登录接口</code>，<code>获取图书列表接口</code>等。</p><p>2.接口URL：接口的调用地址。</p><p>3.调用方式：接口的调用方式，如<code>GET</code>或<code>POST</code>。</p><p>4.参数格式：接口需要传递的参数，每个参数必须包含<code>参数名称</code>、<code>参数类型</code>、<code>是否必选</code>、<code>参数说明</code>这4项内容。</p><p>5.响应格式：接口的返回值的详细描述，一般包含<code>数据名称</code>、<code>数据类型</code>、<code>说明</code>3项内容。</p><p>6.返回示例（可选）：通过对象的形式，例举服务器返回数据的结构。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/posts/38683.html"/>
      <url>/posts/38683.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识jQuery"><a href="#认识jQuery" class="headerlink" title="认识jQuery"></a>认识jQuery</h2><p>jQuery是JavaScript类库（JS文件），封装了很多简单易用的方法（浏览器兼容），绝大多数用来简化DOM操作</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207232007388.png"></p><p>DOM语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  li[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>jQuery 中通过选择器来获取 DOM 节点，功能类似于原生的querySelectorAll 方法，支持的选择器与 CSS 的选择器几乎一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>)</span><br><span class="line"><span class="comment">// 修改背景色</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>, <span class="string">&#x27;yellowgreen&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><p>jQuery 中利用选择器获取到的并非原生的DOM 对象，而是 jQuery对象</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择器获取</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>)</span><br><span class="line"><span class="comment">// dom对象转换</span></span><br><span class="line">$(dom对象)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery对象 和 DOM对象 的语法不能混用</p></blockquote><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>在jQuery中以原生事件类型的名称为依据, 封装了相对应的事件处理方法</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">&#x27;选择器&#x27;</span>).事件名(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 逻辑....</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>事件名开头不需要写on</p><p>回调函数中的 this 就是触发事件的 dom 元素</p></blockquote><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>链式编程 通过点(.) 把多个操作(方法)连续的写下去, 形成和 链子 一样的结构</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.text&#x27;</span>).<span class="title function_">focus</span>(回调函数).<span class="title function_">blur</span>(回调函数).<span class="title function_">change</span>(回调函数)</span><br></pre></td></tr></table></figure><blockquote><p>大部分 jQ对象 方法的返回值还是同一个 jQ对象</p></blockquote><h2 id="内容操纵"><a href="#内容操纵" class="headerlink" title="内容操纵"></a>内容操纵</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(‘选择器’).<span class="title function_">html</span>(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">$(‘选择器’).<span class="title function_">text</span>(‘内容<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">// 读取</span></span><br><span class="line"><span class="string">$(&#x27;</span>选择器<span class="string">&#x27;).html()</span></span><br><span class="line"><span class="string">$(&#x27;</span>选择器<span class="string">&#x27;).text()</span></span><br></pre></td></tr></table></figure><blockquote><p>设置时: html 方法解析标签 ,  text不解析标签</p><p>取值时: html 方法获取标签 ,  text只获取文本</p><p>有一种使用方式支持链式编程</p></blockquote><h2 id="过滤方法"><a href="#过滤方法" class="headerlink" title="过滤方法"></a>过滤方法</h2><p>jQuery 中封装了过滤方法,对 jQuery 对象中的 dom 元素再次筛选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  匹配的第一个元素</span></span><br><span class="line">.<span class="title function_">first</span>()</span><br><span class="line"><span class="comment">// 匹配的最后一个元素</span></span><br><span class="line">.<span class="title function_">last</span>()</span><br><span class="line"><span class="comment">// 根据索引匹配元素</span></span><br><span class="line">.<span class="title function_">eq</span>(索引)</span><br></pre></td></tr></table></figure><blockquote><p>eq方法的索引从0开始</p><p>返回的是jQuery对象</p></blockquote><h2 id="样式操纵"><a href="#样式操纵" class="headerlink" title="样式操纵"></a>样式操纵</h2><p>jQuery 中对样式的操作进行封装 , 可以设置或者获取样式</p><p>键值对方法设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 键值对设置</span></span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;样式名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;200px&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;height&#x27;</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>对象方式设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 对象方式设置</span></span><br><span class="line">.<span class="title function_">css</span>(对象)</span><br><span class="line">.<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>样式获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 样式获取</span></span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;样式名&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>数值类的样式省略单位,默认会使用 px</p><p>获取样式需要传递样式名</p></blockquote><h2 id="属性操纵"><a href="#属性操纵" class="headerlink" title="属性操纵"></a>属性操纵</h2><p>jQuery 中对属性的操作进行封装 , 可以设置、获取和删除属性</p><p>attr方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.赋值</span></span><br><span class="line">.<span class="title function_">attr</span>(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.取值</span></span><br><span class="line">.<span class="title function_">attr</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3.删除属性</span></span><br><span class="line">.<span class="title function_">removeAttr</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>操纵value</p><p>jQuery 中封装了操纵表单元素value属性的方法，可以取值和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 赋值</span></span><br><span class="line">.<span class="title function_">val</span>(<span class="string">&#x27;参数&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 取值</span></span><br><span class="line">.<span class="title function_">val</span>()</span><br></pre></td></tr></table></figure><h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>jQuery 中封装了查找元素的方法，可以基于元素的结构关系查找新的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父元素</span></span><br><span class="line">.<span class="title function_">parent</span>()</span><br><span class="line"><span class="comment">// 2. 子元素 </span></span><br><span class="line">.<span class="title function_">children</span>()</span><br><span class="line"><span class="comment">// 3. 兄弟元素</span></span><br><span class="line">.<span class="title function_">siblings</span>()</span><br><span class="line"><span class="comment">// 4. 后代元素</span></span><br><span class="line">.<span class="title function_">find</span>(<span class="string">&#x27;选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>find方法方法需要传入选择器</p><p>children 、sibings 方法支持传入选择器</p></blockquote><h2 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h2><p>jQuery 中封装了为网页元素添加、移除、检测、切换类名的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 添加类名</span></span><br><span class="line">.<span class="title function_">addClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 移除类名</span></span><br><span class="line">.<span class="title function_">removeClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 判断类名 返回布尔值</span></span><br><span class="line">.<span class="title function_">hasClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 切换类名</span></span><br><span class="line">.<span class="title function_">toggleClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参数都是需要操纵的类名</p></blockquote><h2 id="事件进阶"><a href="#事件进阶" class="headerlink" title="事件进阶"></a>事件进阶</h2><p> jQuery 中封装了更为灵活的 on&#x2F;off、one 方法处理 DOM 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册事件</span></span><br><span class="line">.<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="comment">// 2. 移除指定事件</span></span><br><span class="line">.<span class="title function_">off</span>(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 移除所有事件</span></span><br><span class="line">.<span class="title function_">off</span>()</span><br><span class="line"><span class="comment">// 4. 注册一次性事件</span></span><br><span class="line">.<span class="title function_">one</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>on , one 方法回调函数中的 this 是触发事件的 dom 元素</p></blockquote><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><p> jQuery 中如何通过代码的方式触发绑定的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 直接触发</span></span><br><span class="line">.事件名()</span><br><span class="line"><span class="comment">// 2. trigger触发</span></span><br><span class="line">.<span class="title function_">trigger</span>(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 触发自定义事件</span></span><br><span class="line">.<span class="title function_">trigger</span>(<span class="string">&#x27;自定义事件&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 注册自定义事件</span></span><br><span class="line">.<span class="title function_">on</span>(<span class="string">&#x27;自定义事件&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="window事件绑定"><a href="#window事件绑定" class="headerlink" title="window事件绑定"></a>window事件绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">//  点击</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h2><p>通过jQuery直接获取元素的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">offset</span>()</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">position</span>()</span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">&#123;<span class="attr">top</span>: <span class="number">126</span>, <span class="attr">left</span>: <span class="number">58</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参照物不同：</p><p>offset参照html标签</p><p>position参照离他最近有定位的祖先元素</p><p>margin：</p><p>offset会把外边距margin计算进去</p><p>position以外边距margin为边界,不计算margin</p></blockquote><h2 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h2><p>通过jQuery获取元素的滚动距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollLeft</span>()</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollTop</span>()</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollLeft</span>(值)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollTop</span>(值)</span><br></pre></td></tr></table></figure><h2 id="显示-amp-隐藏动画"><a href="#显示-amp-隐藏动画" class="headerlink" title="显示&amp;隐藏动画"></a>显示&amp;隐藏动画</h2><p>通过jQuery以动画的方式切换元素的显示&amp;隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">show</span>(持续时间)</span><br><span class="line"><span class="comment">// 隐藏</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">hide</span>(持续时间)</span><br><span class="line"><span class="comment">// 显示&amp;隐藏</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">toggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="淡入-amp-淡出动画"><a href="#淡入-amp-淡出动画" class="headerlink" title="淡入&amp;淡出动画"></a>淡入&amp;淡出动画</h2><p>通过jQuery以淡入&amp;淡出的方式切换元素的显示隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 淡入</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeIn</span>(持续时间)</span><br><span class="line"><span class="comment">// 淡出</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeOut</span>(持续时间)</span><br><span class="line"><span class="comment">// 淡入&amp;淡出</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeToggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="展开-amp-收起动画"><a href="#展开-amp-收起动画" class="headerlink" title="展开&amp;收起动画"></a>展开&amp;收起动画</h2><p>通过jQuery以展开(高度增大-显示)&amp;收起(高度减小-隐藏)的方式切换元素的显示隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideDown</span>(持续时间)</span><br><span class="line"><span class="comment">// 收起</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideUp</span>(持续时间)</span><br><span class="line"><span class="comment">// 展开&amp;收起</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideToggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="动画队列及停止方法"><a href="#动画队列及停止方法" class="headerlink" title="动画队列及停止方法"></a>动画队列及停止方法</h2><p>通过jQuery为元素设置的多个动画会依次添加到动画队列中,并根据添加的顺序依次播放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止当前动画</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>()</span><br><span class="line"><span class="comment">// 清空队列 在动画当前状态停止</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 清空队列 直接到当前动画的结束状态</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>(<span class="literal">true</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>动画方法和stop方法返回的是同一个jQuery对象(链式编程)</p><p>传递1个true和传递2个true的区别</p><p>1个:动画停止在执行stop方法的瞬间</p><p>2个:直接到当前播放动画的结束状态</p></blockquote><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><p> jQuery提供了animate方法来实现更为复杂的动画效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(动画属性, 持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>可以写成对象的形式</p><p>数值类样式支持动画,支持多个</p><p>默认单位是px</p><p>支持非样式的特殊属性</p><p>持续时间单位是毫秒</p></blockquote><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>jQuery 中封装了在指定位置动态插入元素节点的方法,可以插入节点或者改变节点位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4个方法参数一样  位置不同</span></span><br><span class="line">$(<span class="string">&#x27;父元素选择器&#x27;</span>).<span class="title function_">append</span>(参数)   <span class="comment">// 父元素结尾</span></span><br><span class="line">$(<span class="string">&#x27;父元素选择器&#x27;</span>).<span class="title function_">prepend</span>(参数)  <span class="comment">// 父元素开头</span></span><br><span class="line">$(<span class="string">&#x27;兄弟元素选择器&#x27;</span>).<span class="title function_">before</span>(参数) <span class="comment">// 兄弟元素前面</span></span><br><span class="line">$(<span class="string">&#x27;兄弟元素选择器&#x27;</span>).<span class="title function_">after</span>(参数) <span class="comment">// 兄弟元素后面</span></span><br></pre></td></tr></table></figure><blockquote><p>插入节点:传入创建的dom元素或者html结构</p><p>改变位置:传入现有的dom元素或者jQuery对象</p></blockquote><h2 id="动画的回调函数"><a href="#动画的回调函数" class="headerlink" title="动画的回调函数"></a>动画的回调函数</h2><p>所有的  jQuery 动画方法都支持传入回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).基础动画方法(回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).基础动画方法(持续时间, 回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(属性, 回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(属性, 持续时间, 回调函数)</span><br></pre></td></tr></table></figure><blockquote><p>回调函数会在动画执行完毕时立刻执行</p><p>回调函数中的this是执行动画的dom元素</p></blockquote><p>动画的延迟方法</p><p>jQuery 不仅可以设置动画执行的速度，还能在动画执行前设置一定的延时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">delay</span>(延迟时间).动画方法()</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">delay</span>(延迟时间).动画方法().<span class="title function_">delay</span>(延迟时间).动画方法()</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="获取尺寸"><a href="#获取尺寸" class="headerlink" title="获取尺寸"></a>获取尺寸</h2><p>jQuery 对获取元素尺寸进行了封装，使得在不同场景中获取元素尺寸十分方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">width</span>() <span class="comment">// 内容宽度</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">height</span>() <span class="comment">// 内容高度</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">innerWidth</span>() <span class="comment">// 内容宽度 + 内边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">innerHeight</span>() <span class="comment">// 内容高度 + 内边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerWidth</span>() <span class="comment">// 内容宽度 + 内边距 + 边框</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerHeight</span>() <span class="comment">// 内容高度 + 内边距 + 边框</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>) <span class="comment">// 内容宽度 + 内边距 + 边框 + 外边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerHeight</span>(<span class="literal">true</span>) <span class="comment">// 内容高度 + 内边距 + 边框 + 外边距</span></span><br></pre></td></tr></table></figure><h2 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h2><p>jQuery 绑定的事件中可以获取事件参数(事件对象),用法和原生js完全一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).事件(<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery已经处理好了事件参数的兼容性</p></blockquote><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>jQuery 中封装了动态删除元素节点的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery对象.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure><blockquote><p>remove方法删除的是调用方法的元素节点</p></blockquote><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>jQuery 中封装了事件委托的支持 , 直接通过 on 方法即可使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接绑定</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="comment">// 事件委托</span></span><br><span class="line">$(<span class="string">&#x27;祖先选择器&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="string">&#x27;后代选择器&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>减少事件注册</p><p>解决动态增加后代元素的事件绑定问题</p><p>原理是事件冒泡</p><p>回调函数中的this是触发事件的dom对象</p></blockquote><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><p>jQuery 中提供了更为简便的入口函数写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQ写法</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 简化写法</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>页面资源加载完毕执行(包括图片、css等等)逻辑代码</p><p>DOM载入完毕就会执行</p></blockquote><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">轮播图效果自动执行</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">arrows</td><td align="center">是否显示翻页按钮</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">prevArrow</td><td align="center">自定义 上一页 按钮</td><td align="center">无</td><td align="center">标签选择器</td></tr><tr><td align="center">nextArrow</td><td align="center">自定义 下一页 按钮</td><td align="center">无</td><td align="center">标签选择器</td></tr><tr><td align="center">dots</td><td align="center">是否显示指示器</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用插件方法初始化</span></span><br><span class="line">$(<span class="string">&#x27;.your-class&#x27;</span>).<span class="title function_">slick</span>(&#123;</span><br><span class="line"><span class="attr">autoplay</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">arrows</span>:<span class="literal">true</span></span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="懒加载插件"><a href="#懒加载插件" class="headerlink" title="懒加载插件"></a>懒加载插件</h2><p>jQuery 的懒加载插件 lazyload</p><p>懒加载：图片用到了再去加载，常见于有大量图片的网页，比如电商</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">data-original</span>=<span class="string">&quot;./images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到希望懒加载的图片并调用lazyload方法</span></span><br><span class="line">$(<span class="string">&#x27;.lazyload&#x27;</span>).<span class="title function_">lazyload</span>()</span><br></pre></td></tr></table></figure><blockquote><p>图片地址设置给 data-original</p></blockquote><h2 id="全屏滚动"><a href="#全屏滚动" class="headerlink" title="全屏滚动"></a>全屏滚动</h2><p>jQuery 的全屏滚动插件 fullpage</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fullpage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第三屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>每个区域必须有 section 这个类名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fullpage&#x27;</span>).<span class="title function_">fullpage</span>(&#123;</span><br><span class="line">....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">navigation</td><td align="center">是否显示导航</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">navigationPosition</td><td align="center">导航位置</td><td align="center">right</td><td align="center">left&#x2F;right</td></tr><tr><td align="center">anchors</td><td align="center">每个区域的锚链接名</td><td align="center">[]</td><td align="center">在地址栏</td></tr><tr><td align="center">afterLoad</td><td align="center">区域加载完毕的回调函数，有2个参数</td><td align="center">无</td><td align="center">参数：锚链接、索引</td></tr></tbody></table><h2 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h2><p>form 标签本身具有提交数据的能力，但是现在基本不这么用</p><blockquote><p>点击提交按钮，输入区域点击回车都会触发表单提交</p><p>表单中的 button 默认就是提交按钮</p></blockquote><p>现在比较流行在表单的 submit 事件中阻止默认行为，自己获取数据并提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line">event.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>返回false 或者 preventDefault 都可以阻止默认行为</p></blockquote><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><p>jQuery 的日期选择器插件 datepicker ,让用户在不同的浏览器下可以用一致的方式来选择日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 准备html结构 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;datapicker&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用插件方法</span></span><br><span class="line">  $(<span class="string">&#x27;.datapicker&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span><br><span class="line">    …</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">autoPick</td><td align="center">是否自动选择当前日期</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">autoHide</td><td align="center">选择日期之后是否自动关闭</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">language</td><td align="center">语言模式</td><td align="center">空</td><td align="center">需要结合语言包使用</td></tr></tbody></table><blockquote><p>默认显示的是英文，需要导入 中文语言包</p></blockquote><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>jQuery 的表单验证插件 validate , 验证用户在表单中输入的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">validate</span>(&#123;</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">onBlur</td><td align="center">失去焦点时验证</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">onSubmit</td><td align="center">提交表单时验证</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">sendForm</td><td align="center">是否提交表单</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">valid</td><td align="center">所有表单项验证通过执行的 回调函数</td><td align="center">无</td><td align="center">this是jQ对象</td></tr><tr><td align="center">invalid</td><td align="center">至少一个表单项为通过验证时执行的 回调函数</td><td align="center">无</td><td align="center">this是jQ对象</td></tr><tr><td align="center">description</td><td align="center">错误提示信息</td><td align="center">无</td><td align="center">Object</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-required</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-pattern</span>=<span class="string">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">自定义属性</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">data-required</td><td align="center">验证表单项不能为空</td><td align="center">不需要值</td></tr><tr><td align="center">data-pattern</td><td align="center">基于正则表达式验证</td><td align="center">正则表达式</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-required</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-describedby</span>=<span class="string">&quot;password-error&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-description</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-pattern</span>=<span class="string">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password-error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">validate</span>(&#123;</span><br><span class="line">  <span class="attr">description</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: &#123;</span><br><span class="line">      <span class="attr">required</span>: <span class="string">&#x27;密码不能为空!&#x27;</span>,</span><br><span class="line">      <span class="attr">pattern</span>: <span class="string">&#x27;密码不能少于6位!&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>自定义属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>data-describedby</td><td>指定显示错误信息的标签</td><td>标签的id</td></tr><tr><td>data-description</td><td>指定错误信息的内容</td><td>和description中的属性对应</td></tr></tbody></table><blockquote><p>这2个属性需要结合 description 配置使用</p></blockquote><blockquote><p>表单元素要放在form里面</p></blockquote><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>jQuery 中封装了克隆(复制)，节点的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带事件</span></span><br><span class="line">.<span class="title function_">clone</span>()</span><br><span class="line"><span class="comment">// 带事件</span></span><br><span class="line">.<span class="title function_">clone</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>方法返回的还是 jQuery对象  </p><p>传入 true 事件也会一起克隆</p></blockquote><h2 id="获取dom对象"><a href="#获取dom对象" class="headerlink" title="获取dom对象"></a>获取dom对象</h2><p>jQuery 封装了获取内部dom对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get方法获取</span></span><br><span class="line">.<span class="title function_">get</span>(索引)</span><br><span class="line"><span class="comment">// 中括号获取</span></span><br><span class="line">[索引]</span><br></pre></td></tr></table></figure><blockquote><p>索引从 0 开始  </p><p>获取到的是dom对象</p></blockquote><p>表单序列化</p><p>jQuery 中封装了快速获取表单数据的方法 , 叫做序列化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><blockquote><p>表单元素要有 name 属性才可以获取到value 值</p><p>获取到的数据格式是 name1&#x3D;value1&amp;name2&#x3D;value2 的字符串</p></blockquote><h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>插件是 jQuery 提供的扩展机制 , 本质是往 jQuery 原型对象上添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  插件名 (参数) &#123;</span><br><span class="line">    <span class="comment">// 逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery 是$ 的别名</p><p>jQuery 内部也是通过这种方式添加方法</p></blockquote><h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><p> jQuery 除了封装了大量的 DOM操作外，还提供了一些工具方法，这些方法通过 $ 或 jQuery 直接调用 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 遍历数组</span></span><br><span class="line">$.<span class="title function_">each</span>(数组, <span class="keyword">function</span> (<span class="params">下标, 值</span>) &#123;&#125;)</span><br><span class="line"> <span class="comment">// 遍历并返回新数组</span></span><br><span class="line">$.<span class="title function_">map</span>(数组,<span class="keyword">function</span>(<span class="params">值</span>)&#123;</span><br><span class="line">  <span class="comment">// 返回新的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不仅仅只有这2个方法</p><p>逐步被 ES6 及更高级的版本新增特性取代</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶技巧</title>
      <link href="/posts/38983.html"/>
      <url>/posts/38983.html</url>
      
        <content type="html"><![CDATA[<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝拷贝的是地址</p><p>常见方法：</p><p>1.拷贝对象：<code>Object.assgin() / 展开运算符&#123;...obj&#125;拷贝对象</code></p><p>2.拷贝数组：<code>Array.prototype.concat() 或者[...arr]</code></p><blockquote><p>问题：</p><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p></blockquote><blockquote><p>直接赋值和浅拷贝的区别：</p><p>直接赋值的方法，主要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址</p><p>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响</p></blockquote><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝拷贝的是对象，不是地址</p><p>常见方法：</p><h4 id="通过递归实现深拷贝"><a href="#通过递归实现深拷贝" class="headerlink" title="通过递归实现深拷贝"></a>通过递归实现深拷贝</h4><p>函数递归：如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="comment">// 拷贝函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        <span class="comment">// 处理数组问题</span></span><br><span class="line">        <span class="comment">// 必须先写数组再写对象</span></span><br><span class="line">        <span class="keyword">if</span>(oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            newObj[k]= [] </span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj[k]= &#123;&#125;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// k是属性名 oldObj[k]是属性值</span></span><br><span class="line">            <span class="comment">// newObj[k] === o.uname</span></span><br><span class="line">            newObj[k] = oldObj[k]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>(o, obj) <span class="comment">// 函数调用 o 新对象 obj 旧对象</span></span><br><span class="line">o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>由于递归很容易发生“栈溢出”错误(stack overflow)，所以必须加退出条件 return</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`这是第<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>利用递归函数实现 setTimeout 模拟 setInterval效果**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(getTime, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><h4 id="lodash-x2F-cloneDeep"><a href="#lodash-x2F-cloneDeep" class="headerlink" title="lodash&#x2F;cloneDeep"></a>lodash&#x2F;cloneDeep</h4><p>首先引入lodash.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="通过JSON-stringify-实现"><a href="#通过JSON-stringify-实现" class="headerlink" title="通过JSON.stringify()实现"></a>通过JSON.stringify()实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把对象转换成 JSON字符串</span></span><br><span class="line"><span class="comment">// JSON.stringify(obj)</span></span><br><span class="line"><span class="comment">// 字符串转换成对象</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="throw-抛异常"><a href="#throw-抛异常" class="headerlink" title="throw 抛异常"></a>throw 抛异常</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || !y) &#123;</span><br><span class="line">        <span class="comment">// throw `没有参数传递进来`</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;没有参数传递进来&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.throw 抛出异常信息，程序也会终止执行</p><p>2.throw 后面跟的是错误提示信息</p><p>3.Error 对象配合 throw 使用，能够设置更详细的错误信息</p></blockquote><h3 id="try-x2F-catch-捕获异常"><a href="#try-x2F-catch-捕获异常" class="headerlink" title="try&#x2F;catch  捕获异常"></a>try&#x2F;catch  捕获异常</h3><p>我们可以通过try &#x2F; catch 捕获错误信息（浏览器提供的错误信息）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 可能有问题的代码写在这里</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">        <span class="comment">// 中断</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;执行&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.try…catch 用于捕获错误信息</p><p>2.将预估可能发生错误的代码写在 try 代码段中</p><p>3.如果 try 代码段中出现错误后，会执行 catch 代码段，并截获到错误信息</p></blockquote><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>我们可以通过try &#x2F; catch 捕获错误信息（浏览器提供的错误信息）</p><h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p>普通函数的调用方式决定了this的值，即谁调用this的值指向谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>普通函数没有明确调用者时 this 值为 window，严格模式下没有调用者时 this 的值为 undefined</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数中的 this 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 this</p><blockquote><p>1.箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的</p><p>2.箭头函数中的this引用的就是最近作用域中的this</p><p>3.向外层作用域中，一层一层查找this，直到有this的定义</p></blockquote><blockquote><p>总结：</p><p>1.函数内不存在this，沿用上一级的</p><p>2.不适用：构造函数，原型函数，dom事件函数等等</p><p>3.适用：需要使用上层this的地方</p><p>4.使用正确的话，它会在很多地方带来方便，后面我们会大量使用慢慢体会</p></blockquote><h3 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h3><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h4><p>使用call方法调用函数，同时指定被调用函数中this的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在 fun 函数运行时指定的 this 值</p><p>arg1，arg2：传递的其他参数</p><p>返回值就是函数的返回值，因为它就是调用函数</p></blockquote><h4 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a>apply()方法</h4><p>使用apply方法调用函数，同时指定被调用函数中的this的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在fun函数运行时指定的 this 值</p><p>argsArray：传递的值，必须包含在数组里面</p><p>返回值就是函数的返回值，因为它就是调用函数</p><p>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</p></blockquote><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><p>bind() 方法不会调用函数。但是能改变函数内部this 指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在 fun 函数运行时指定的 this 值</p><p>arg1，arg2：传递的其他参数</p><p>返回由指定的 this 值和初始化参数改造的 原函数拷贝</p><p>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind，比如改变定时器内部的this指向</p></blockquote><blockquote><p>相同点: </p><p>都可以改变函数内部的this指向.</p><p>区别点: </p><p>call 和 apply 会调用函数, 并且改变函数内部this指向.</p><p>call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply 必须数组形式[arg]</p><p>bind 不会调用函数, 可以改变函数内部this指向.</p><p>主要应用场景: </p><p>call 调用函数并且可以传递参数</p><p>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</p><p>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向</p></blockquote><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>所谓节流，就是指连续触发事件但是在n秒中只执行一次函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  box.<span class="property">innerHTML</span> = ++i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流函数 throttle</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 得到当前时间</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 判断如果大于等于 500 就调用函数</span></span><br><span class="line">    <span class="keyword">if</span>(now - startTime &gt;= t) &#123;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">      <span class="comment">// 起始时间=当前时间    写在调用函数下面</span></span><br><span class="line">      startTime = now</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">throttle</span>(mouseMove, <span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  box.<span class="property">innerHTML</span> = ++i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流函数 throttle</span></span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeId </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timeId) <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入面向对象</title>
      <link href="/posts/61213.html"/>
      <url>/posts/61213.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个依次调用</p><blockquote><p>优点：性能比面向对象高，适合跟硬件联系很紧密的对象，比如单片机就采用的面向过程编程</p><p>缺点：没有面向对象易维护、易复发、易扩展</p></blockquote><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>把事物分解成一个个对象，然后由对象之间分工与合作</p><blockquote><p>特性：封装性、继承性、多态性</p></blockquote><blockquote><p>优点：易维护。易复发、易扩展，由于面向对象有封装、继承、多态性的特效，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p><p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是彼此不影响的</p><blockquote><p>总结：</p><p>1.构造函数体现了面向对象的封装特性</p><p>2.构造函数实例创建的对象彼此独立、互不影响</p></blockquote><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>构造函数通过原型分配的函数是所有对象所 共享的。<br>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象<br>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存<br>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><p><code>构造函数和原型对象中的this都指向实例化对象</code></p><h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>该属性指向该原型对象的构造函数</p><blockquote><p>使用场景：</p><p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值</p><p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p><p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数</p></blockquote><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>对象都会有一个属性<code>__proto__</code>指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有<code>__proto__</code>原型的存在</p><blockquote><p>注意：</p><p><code>__proto__</code> 是JS非标准属性</p><p>[[prototype]]和<code>__proto__</code>意义相同</p><p>用来表明当前实例对象指向哪个原型对象prototype</p><p><code>__proto__</code>对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207191002805.jpg"></p><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">eays</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">head</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span> () &#123;</span><br><span class="line">    <span class="comment">// this.eays = 2</span></span><br><span class="line">    <span class="comment">// this.head = 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Woman 通过原型来继承Person</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span></span><br><span class="line"><span class="comment">// 指回原来的构造函数</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line"><span class="keyword">const</span> red = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(red)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.eays = 2</span></span><br><span class="line">    <span class="comment">// this.head = 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"><span class="keyword">const</span> pink = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pink)</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果我们给男人添加了一个吸烟的方法，发现女人也自动添加了这个方法</p><p>原因：男人和女人都同时使用了同一个对象，根据引用类型的特点，他们指向同一个对象，修改一个就会都影响</p><p>解决：构造函数new 每次都会创建一个新的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207191315750.png"></p><blockquote><p>查找规则：</p><p>1.当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p><p>2.如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 prototype 原型对象</p><p>3.如果还没有就查找原型对象的原型（Object的原型对象）</p><p>4.依此类推一直找到 Object 为止（null）</p><p>5.<code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数&amp;数据常用函数</title>
      <link href="/posts/62774.html"/>
      <url>/posts/62774.html</url>
      
        <content type="html"><![CDATA[<h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><h3 id="创建对象三种方式"><a href="#创建对象三种方式" class="headerlink" title="创建对象三种方式"></a>创建对象三种方式</h3><p>1.利用对象字面量创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.利用new Object 创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span>&#125;)</span><br><span class="line">obj.<span class="property">unmae</span> = <span class="string">&#x27;jxy&#x27;</span></span><br></pre></td></tr></table></figure><p>3.利用构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new Pig(&#x27;佩奇&#x27;, 6))</span></span><br><span class="line"><span class="keyword">const</span> peppa = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peppa)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>是一种特殊的函数，主要用来初始化对象，可以快速创建多个类似的对象</p><blockquote><p>1.命名以大写字母开头</p><p>2.只能由“new”操作符来执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new Pig(&#x27;佩奇&#x27;, 6))</span></span><br><span class="line"><span class="keyword">const</span> peppa = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peppa)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>1.使用 new 关键字调用函数的行为被称为实例化</p><p>2.实例化构造函数时没有参数时可以省略 ()</p><p>3.构造函数内部无需写return，返回值即为新创建的对象</p><p>4.构造函数内部的 return 返回的值无效，所以不要写return</p><p>5.new Object（） new Date（） 也是实例化构造函数</p></blockquote><p>实例化执行过程</p><blockquote><p>1.创建新的空对象</p><p>2.构造函数this指向新对象</p><p>3.执行构造函数代码，修改this，添加新的属性</p><p>4.返回新对象</p></blockquote><h3 id="实例成员-amp-静态成员"><a href="#实例成员-amp-静态成员" class="headerlink" title="实例成员&amp;静态成员"></a>实例成员&amp;静态成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Per</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> uname = <span class="keyword">new</span> <span class="title class_">Per</span>()</span><br><span class="line"><span class="comment">// uname就是实例成员</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="comment">//调用实例方法</span></span><br><span class="line">uname.<span class="title function_">sayHi</span>(uname.<span class="property">sayHi</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1.实例对象的属性和方法即为实例成员</p><p>2.为构造函数传入参数，动态创建结构相同但值不同的对象</p><p>3.构造函数创建的实例对象彼此独立互不影响</p></blockquote><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>构造函数的属性和方法被称为静态成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">walks</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`走路`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>1.构造函数的属性和方法被称为静态成员</p><p>2.一般公共特征的属性或方法静态成员设置为静态成员</p><p>3.静态成员方法中的this指向构造函数本身</p></blockquote><h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><p>在JavaScript中最主要的数据类型有6种</p><p>基本数据类型：字符串、数值、布尔、underfined、null</p><p>引用类型：对象 Object，Array，RegExp，Date等</p><p>包装类型：String、Number、Boolean等 </p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object是内置的构造函数，用于创建普通对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用字面量方式声明对象，而不是Object构造函数</p></blockquote><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>1.Object.keys 静态方法获取对象中所有属性（键）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 获取所有的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))</span><br></pre></td></tr></table></figure><blockquote><p>注意：返回的是一个数组</p></blockquote><p>2.Object.values 静态方法获取对象中所有属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 获取所有的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))</span><br></pre></td></tr></table></figure><blockquote><p>注意：返回的是一个数组</p></blockquote><p>3.Object.assign 静态方法常用于对象拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 对象拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>经常使用的场景给对象添加属性</p></blockquote><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Array是内置的构造函数，用于创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><table><thead><tr><th align="center">方法</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">forEach</td><td align="center">遍历数组</td><td align="center">不返回，用于不改变值，经常用于查找打印输出值</td></tr><tr><td align="center">filter</td><td align="center">过滤数组</td><td align="center">筛选数组元素，并生成新数组</td></tr><tr><td align="center">map</td><td align="center">迭代数组</td><td align="center">返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</td></tr><tr><td align="center">reduce</td><td align="center">累计器</td><td align="center">返回函数累计处理的结果，经常用于求和等</td></tr></tbody></table><p>1.reduce 返回函数累计处理的结果，经常用于求和等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev + item</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><blockquote><p>prev是累计值，item是当前元素</p></blockquote><blockquote><p>累计值参数：</p><p>1.如果有起始值，则以起始值为准开始累计， 累计值 &#x3D; 起始值</p><p>2.如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计</p><p>3.后面每次遍历就会用后面的数组元素 累计到 累计值 里面 （类似求和里面的 sum ）</p></blockquote><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>5.实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spec = &#123; <span class="attr">size</span>: <span class="string">&#x27;40cm*40cm&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 用values取出所有的值</span></span><br><span class="line"><span class="comment">// console.log(Object.values(spec))</span></span><br><span class="line"><span class="comment">// 转换为字符串</span></span><br><span class="line"><span class="comment">// Object.values(spec).join(&#x27;/&#x27;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="title class_">Object</span>.<span class="title function_">values</span>(spec).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>6.实例方法 <code>find</code> 查找元素，返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回undefined(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="number">1000</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line"><span class="attr">salary</span>: <span class="number">2000</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line"><span class="attr">salary</span>: <span class="number">5000</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === <span class="string">&#x27;小米&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><p>7.实例方法 <code>every</code> 检测数组所有元素是否都符合指定条件，如果所有元素都通过检测返回true，否则返回false(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">       <span class="keyword">const</span> re = arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">10</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><p>8.实例方法 <code>some</code> 检测数组中的元素是否满足指定条件如果数组中有元素满足条件返回true，否则返回false</p><p>9.实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p><p>10.实例方法 <code>sort</code> 对原数组单元值排序</p><p>11.实例方法 <code>splice</code> 删除或替换原数组单元心</p><p>12.实例方法 <code>reverse</code> 反转数组</p><p>13.实例方法 <code>findIndex</code> 查找元素的索引值</p><h4 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form()"></a>Array.form()</h4><p>伪数组转换为真数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(li)</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="title class_">Array</span>.<span class="title function_">from</span>(li)</span><br><span class="line">lis.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis)</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>1.实例属性<code>length</code>用来获取字符串的度长(重点)</p><p>2.实例方法<code>split(&#39;分隔符&#39;)</code>用来将字符串拆分成数组(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;pink,red&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p>3.实例方法<code>substring(需要截取的第一个字符的索引[ ,结束的索引号])</code>用于字符串截取(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天又要做核酸了&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">5</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>4.实例方法<code>startsWith(检测字符串[，检测位置索引号])</code>检测是否以某字符开头(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天我很开心&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;今天&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>5.实例方法<code>includes(搜索的字符串[，检测位置索引号])</code>判断一个字符串是否包含在另一个字符串中，根据情况返回true或false(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;jxy最帅&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;jxy&#x27;</span>))</span><br></pre></td></tr></table></figure><p>6.实例方法<code>toUpperCase</code>用于将字母转换成大写</p><p>7.实例方法<code>toLowerCase</code>用于将就转换成小写</p><p>8.实例方法<code>indexOf</code>检测是否包含某字符</p><p>9.实例方法<code>endsWith</code>检测是否以某字符结尾</p><p>10.实例方法<code>replace</code>用于替换字符串，支持正则匹配</p><p>11.实例方法<code>match</code>用于查找字符串，支持正则匹配</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>toFixed()设置保留小数位的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">10.1234</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// 10.12</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域&amp;解构&amp;箭头函数</title>
      <link href="/posts/2979.html"/>
      <url>/posts/2979.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没学习了，发现电脑有两个问题</p><h2 id="1-vscode-tab创建不了html模板了"><a href="#1-vscode-tab创建不了html模板了" class="headerlink" title="1.vscode !+ tab创建不了html模板了"></a>1.vscode !+ tab创建不了html模板了</h2><p>解决方法：</p><blockquote><p>设置里搜索Trigger Expansion On Tab，找到后打上勾就好了</p></blockquote><h2 id="2-Chrome浏览器F12控制台打开慢"><a href="#2-Chrome浏览器F12控制台打开慢" class="headerlink" title="2.Chrome浏览器F12控制台打开慢"></a>2.Chrome浏览器F12控制台打开慢</h2><p>解决方法：</p><blockquote><p>f12打开后，点设置，把language改为English US就OK了！</p></blockquote><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>了解作用域队程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染</p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><h4 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//函数内部是函数作用域属于局部变量</span></span><br><span class="line">    <span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)<span class="comment">//此处报错，函数外部不能使用局部作用域变量</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.函数内部声明的变量，在函数外部无法被访问</p><p>2.函数的参数也是函数内部的局部变量</p><p>3.不同函数内部声明的变量无法相互访问</p><p>4.函数执行完毕后，函数内部的变量实际被清空了</p></blockquote><h4 id="块作用域："><a href="#块作用域：" class="headerlink" title="块作用域："></a>块作用域：</h4><p>在JavaScript中使用{}包裹的代码称为代码块，代码块内部声明的变量外部将<em><strong>有可能</strong></em>无法被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span><br><span class="line">    <span class="comment">// t 只能在该代码块中被访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t)<span class="comment">//正常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超出了t的作用域</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t)<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.let声明的变量会产生块作用域，var不会产生块作用域</p><p>2.const声明的常量也会产生块作用域</p><p>3.不同代码块之间的变量无法互相访问</p><p>4.推荐使用let或const</p></blockquote><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p> script标签和.js文件的最外层就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问，全局作用域中声明的变量，任何其他作用域都可以被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域下声明num变量</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//函数内部可以使用全局作用域的变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.为Window对象动态添加的属性默认也是全局的，不推荐！</p><p>2.函数中未使用任何关键字声明的变量为全局变量，不推荐！！</p><p>3.尽可能少的声明全局变量，防止全局变量被污染</p></blockquote><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链本质上是底层的变量查找机制</p><p>在函数被执行时，会优先查找当前函数作用域中查找变量</p><p>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</p><blockquote><p>总结：</p><p>1.嵌套关系的作用域串联起来形成了作用域链</p><p>2.相同作用域链中按着从小到大的规则查找变量</p><p>3.子作用域能够访问父作用域，父级作用域无法访问子级作用域</p></blockquote><h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a>JS垃圾回收机制</h3><p>JS中内存你的分配和回收都是自动完成的，内存你在不使用的时候会被垃圾回收器自动回收</p><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>不再用到的内存，没有及时释放，就叫做内存泄露</p><h4 id="内存的生命周期"><a href="#内存的生命周期" class="headerlink" title="内存的生命周期"></a>内存的生命周期</h4><p>JS环境中分配的内存，一般有如下生命周期：</p><p>1.内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p><p>2.内存使用：即读写内存，也就是使用变量、函数等</p><p>3.内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</p><blockquote><p>注意：</p><p>1.全局变量一般不会回收（关闭页面回收）</p><p>2.一般情况下局部变量的值，不用了，会被自动回收掉</p></blockquote><h4 id="引用技术法："><a href="#引用技术法：" class="headerlink" title="引用技术法："></a>引用技术法：</h4><p>IE采用的引用计数算法，定义“内存不再使用”的标签很简单，就是看一个对象是否有指向它的引用</p><p>算法：</p><p>1.跟踪记录每个值被引用的次数</p><p>2.如果这个值的被引用了一次，那么就记录次数1</p><p>3.多次引用会累加</p><p>4.如果减少一个引用就减1 </p><p>5.如果引用次数是0，则释放内存</p><blockquote><p>缺陷：</p><p>嵌套引用，如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露</p></blockquote><h4 id="标记清除法："><a href="#标记清除法：" class="headerlink" title="标记清除法："></a>标记清除法：</h4><p>1.标记清除算法将“不再使用的对象”定义为“无法到达的对象”</p><p>2.从根部（JS中就是全局对象）触发定时扫描内存中的对象。凡是能从根部到达的对象，都是还需要使用的</p><p>3.那些无法由更不触发触及到的对象被标记为不再使用，稍后进行回收</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域（闭包 &#x3D; 内层函数 + 外层函数的变量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036231.jpg"></p><blockquote><p>作用：</p><p>封闭数据，提供操作，外部也可以访问函数内部的变量</p></blockquote><h4 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h4><p>实现数据的私有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用了<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>i在外部是全局变量，很容易被修改</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036562.jpg"></p><p>闭包的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用了<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">count</span>()</span><br></pre></td></tr></table></figure><blockquote><p>这样就实现了数据私有，无法直接修改i</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036561.png"></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>是JavaScript中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.所有var声明的变量提升到当前作用域的最前面</span></span><br><span class="line"><span class="comment">// 2.只提升声明，不提升赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;件&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的两行代码相当于</span></span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;件&#x27;</span>)</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.变量在未声明即被访问时会报语法错误</p><p>2.变量在var声明之前即被访问，变量的值为underfined</p><p>3.let&#x2F;const声明的变量不存在变量提升</p><p>4.变量提升出现在相同作用域当中</p><p>5.实际开发中推荐先声明再访问变量</p></blockquote><h2 id="二、函数进阶"><a href="#二、函数进阶" class="headerlink" title="二、函数进阶"></a>二、函数进阶</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">// 1.会把所有函数声明提升到当前作用域的最前面</span></span><br><span class="line">       <span class="comment">// 2.只提升函数声明，不提升函数调用</span></span><br><span class="line">       <span class="title function_">fn</span>()</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数提升`</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//函数表达式必须先声明和赋值，后调用，否则报错</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line">       <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数表达式`</span>)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.函数提升能够使函数的声明调用更灵活</p><p>2.函数表达式不存在提升的现象</p><p>3.函数提升出现在相同作用域当中</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>arguments是函数内部内置的伪数组变量，它包含了调用函数时所传入的所有实参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//arguments 动态参数 只存在于函数里面</span></span><br><span class="line">    <span class="comment">//是伪数组</span></span><br><span class="line">    <span class="comment">// console.log(arguments)</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.arguments是一个伪数组，只存在于函数中</p><p>2.arguments的作用是动态获取函数的实参</p><p>3.可以通过for循环依次得到传递过来的实参</p></blockquote><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p><blockquote><p>…是语法符号，置于最末函数形参之前，用于获取多余的实参</p><p>借助…获取的剩余实参，是个真数组</p></blockquote><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><p>展开运算符(…)，将一个数组进行展开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 展开运算符，可以展开数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组最大小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr1)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr = [...arr1, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><blockquote><p>1.不会修改原数组</p><p>典型运用场景：求数组最大值（最小值）、合并数组等</p></blockquote><blockquote><p>剩余参数：函数参数使用，得到真数组</p><p>展开运算符：数组中使用，数组展开</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>引入箭头函数的目的是更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁</p><blockquote><p>使用场景：箭头函数更适用于那些本来需要匿名函数的地方</p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>语法1：基本写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>语法2：只有一个参数可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>语法3：如果函数体只有一行代码，可以写到一行上，并且无需写return直接返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x, y</span>) =&gt; x + y</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>语法4：加括号的函数体返回对象字面量表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">uname</span>) =&gt; (&#123;<span class="attr">uname</span>: uname&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;刘德华&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h4><blockquote><p>普通函数有arguments动态参数</p><p>箭头函数没有arguments动态参数，但是有剩余参数…args</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="箭头函数this"><a href="#箭头函数this" class="headerlink" title="箭头函数this"></a>箭头函数this</h4><p>箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数中的this     是上一层的作用域的this</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象方法箭头函数 this</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">// this 指向 window</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向 obj</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">count</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><blockquote><p>事件回调函数使用箭头函数时，this为全局的Window，因此DOM事件回调函数为了简便，不推荐使用箭头函数</p></blockquote><h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><p>1.赋值运算符 &#x3D; 左侧的[]用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</p><p>2.变量的顺序对应数组单元值的位置依次进行赋值操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">80</span>]</span><br><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">const</span> [max, min, avg] = arr</span><br><span class="line"><span class="comment">// 相当于下面的三行</span></span><br><span class="line"><span class="comment">// const max = arr[0]</span></span><br><span class="line"><span class="comment">// const min = arr[1]</span></span><br><span class="line"><span class="comment">// const avg = arr[2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(avg)</span><br></pre></td></tr></table></figure><p>典型应用交互2个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[b, a] = [a, b]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br></pre></td></tr></table></figure><blockquote><p>加; 的原因</p><p>1.立即执行函数</p><p>2.数组解构</p></blockquote><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p>变量多 单元值少的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// underfined</span></span><br></pre></td></tr></table></figure><p>变量少 单元值多的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [e, f] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>利用剩余参数解决变量少 单元值多的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// [3, 4] 真数组</span></span><br></pre></td></tr></table></figure><p>防止有underfined传递单元值的情况，可以设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="string">&#x27;手机&#x27;</span>, b = <span class="string">&#x27;华为&#x27;</span>] = [<span class="string">&#x27;小米&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 华为</span></span><br></pre></td></tr></table></figure><p>按需导入，忽略某些返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, , d] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;格力&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 华为</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 格力</span></span><br></pre></td></tr></table></figure><p>支持多维数组的解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象结构是将对象属性和方法快速批量赋值给一系列变量的简洁语法</p><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><p>1.赋值运算符 &#x3D; 左侧的 {} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</p><p>2.对象属性的值将被赋值给与属性名相同的变量</p><p>3.注意解构的变量名不要和外面的变量名冲突否则报错</p><p>4.对象中找不到与变量名一致的属性时变量值为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; uname, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><p>给新的变量名赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  对象解构的变量名 可以重新改名 旧变量名：新变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">uname</span>: username, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><p>数组对象解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构数组对象</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> [&#123; uname, age &#125;] = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>多级对象解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">        <span class="attr">sister</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="attr">family</span>: &#123; mother, father, sister &#125;&#125; = pig</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mother)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sister)        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遍历数组forEach方法"><a href="#遍历数组forEach方法" class="headerlink" title="遍历数组forEach方法"></a>遍历数组forEach方法</h3><p>forEach()方法用于调用数组的每个元素，并将元素传递给回调函数</p><blockquote><p>主要使用场景：遍历数组的每个元素</p></blockquote><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">//数组元素 red green pink</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 索引号</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.forEach主要是遍历数组</p><p>2.参数当前数组元素是必须写的，索引号可选</p></blockquote><h3 id="筛选数组filter方法"><a href="#筛选数组filter方法" class="headerlink" title="筛选数组filter方法"></a>筛选数组filter方法</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p><blockquote><p> 主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组</p><p>参数：currentValue 必须写， index 可选</p><p>因为返回新数组，所以不会影响原数组</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习笔记</title>
      <link href="/posts/16321.html"/>
      <url>/posts/16321.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>是一种运行在客户端（浏览器）的编程语言，实现人机交互效果</p><h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><p>网页特效（监听用户的一些行为让网页做出对应的反馈）</p><p>表单验证（针对表单数据的合法性进行判断）</p><p>数据交互（获取后台的数据，渲染到前端）</p><p>服务端编程（node.js）</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p>目的：规定JS基础语法核心知识</p><p>比如：变量、分支语句、循环语句、对象等等</p><h4 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h4><h5 id="DOM（页面文档对象模型）"><a href="#DOM（页面文档对象模型）" class="headerlink" title="DOM（页面文档对象模型）"></a>DOM（页面文档对象模型）</h5><p>目的：操作文档</p><p>比如：对页面元素进行移动、大小、添加删除等操作</p><h5 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h5><p>目的：操作浏览器</p><p>比如：页面弹窗，检测窗口高度、存储数据到浏览器等等</p><h3 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h3><h4 id="内联JavaScript"><a href="#内联JavaScript" class="headerlink" title="内联JavaScript"></a>内联JavaScript</h4><p>代码写在标签内部</p><p><strong>注意：后面vue框架会用这种模式</strong></p><h4 id="内部JavaScript"><a href="#内部JavaScript" class="headerlink" title="内部JavaScript"></a>内部JavaScript</h4><p>直接写在html文件中，用script标签包住</p><p>规范：script标签写在上面</p><blockquote><p>拓展：alert(‘你好，js’)      页面弹出警告对话框</p></blockquote><h4 id="外部JavaScript"><a href="#外部JavaScript" class="headerlink" title="外部JavaScript"></a>外部JavaScript</h4><p>代码写在以.js结尾的文件里</p><p>语法：通过script标签，引入到html页面中</p><h3 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>符号：&#x2F;&#x2F;</p><p>作用：&#x2F;&#x2F;右边这一行的代码会被忽略</p><p>快捷键：ctrl+&#x2F;</p><h4 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h4><p>符号：&#x2F;* *&#x2F;</p><p>作用：在之间的内容会被忽略</p><p>快捷键：shift+alt+A</p><h3 id="了解JavaScript结束符"><a href="#了解JavaScript结束符" class="headerlink" title="了解JavaScript结束符"></a>了解JavaScript结束符</h3><p>结束符：英文分号;</p><p>可写可不写</p><p>换行符（回车）会被识别成结束符，所以一个完整的语句，不要手动换行</p><p>为了风格统一，要么都写，要么都不写</p><h3 id="JavaScript输入输出语法"><a href="#JavaScript输入输出语法" class="headerlink" title="JavaScript输入输出语法"></a>JavaScript输入输出语法</h3><h4 id="输出语法"><a href="#输出语法" class="headerlink" title="输出语法"></a>输出语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p>向body内输出内容</p><p>如果输出的内容写的是标签，也会被解析网页元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p>页面弹出警告对话框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;控制台打印&#x27;</span>)</span><br></pre></td></tr></table></figure><p>控制台输出语法，程序员调试使用</p><h4 id="输入语句"><a href="#输入语句" class="headerlink" title="输入语句"></a>输入语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名：&#x27;</span>);</span><br></pre></td></tr></table></figure><p>显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>在计算机科学中，字面量（literal）是在计算机中描述事&#x2F;物</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h3><p>变量是计算机中用来存储数据的“容器”，简单理解就是一个盒子</p><p>变量是用来存放数据的。变量是容器而不是数据</p><h3 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h3><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>要想使用变量，首先需要创建变量</p><p>声明变量有两部分构成：声明关键字、变量名（标识）</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名</span><br></pre></td></tr></table></figure><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p>变量名（标识符）+   &#x3D;   字面量</p><h4 id="更新变量"><a href="#更新变量" class="headerlink" title="更新变量"></a>更新变量</h4><p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p><h3 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h3><p>是程序在内存中申请的一块用于存放数据的小空间</p><h3 id="变量命名规则与规范"><a href="#变量命名规则与规范" class="headerlink" title="变量命名规则与规范"></a>变量命名规则与规范</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>不能用关键字</p><p>只能用下划线、字母、数字、$组成，且数字不能开头</p><p>字母严格区分大小写</p><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><p>起名要有意义</p><p>遵循小驼峰命名法：第一个单词首字母小写，后面每个单词首字母大写</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数字型（number）"><a href="#数字型（number）" class="headerlink" title="数字型（number）"></a>数字型（number）</h4><p>JavaScript中的正数、负数、小数等统一称为数字类型</p><p>JS是弱数据类型，变量到底属于那种类型，只有赋值之后才知道</p><h4 id="字符串型（string）"><a href="#字符串型（string）" class="headerlink" title="字符串型（string）"></a>字符串型（string）</h4><p>通过<strong>单引号（’’）</strong>、<strong>双引号（“”）</strong>或反引号（&#96;&#96;）包裹的数据叫字符串，推荐<strong>单引号</strong></p><blockquote><p>注意:无论单引号或是双引号必须成对使用</p><p>​单引号&#x2F;双引号可以互相嵌套（外双内单，外单内双）</p></blockquote><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我叫&#x27;</span> + <span class="string">&#x27;刘德华&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>作用：拼接字符串和变量</p><p>符号：&#96;&#96;</p><p>​内容拼接变量时，用${}包住变量</p><h4 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h4><p>两个固定的值true（真）和false（假）</p><h4 id="未定义型（undefined）"><a href="#未定义型（undefined）" class="headerlink" title="未定义型（undefined）"></a>未定义型（undefined）</h4><p>只声明变量，不赋值的情况下，变量的默认值为underfined</p><h4 id="空类型（null）"><a href="#空类型（null）" class="headerlink" title="空类型（null）"></a>空类型（null）</h4><p>null表示值为空</p><p>null表示赋值了，但是内容为空</p><h3 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h3><p>通过typeof关键字检测数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> 变量)</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="为什么要类型转换"><a href="#为什么要类型转换" class="headerlink" title="为什么要类型转换"></a>为什么要类型转换</h3><p>JavaScript是弱数据类型，JavaScript也不知道变量到底属于那种数据类型，只有赋值了才清楚</p><p>注意：使用表单、prompt获取过来的数据默认是<strong>字符串类型</strong>的，此时就不能简单的进行加分运算</p><p>通俗来说，就是把一种数据类型的变量转换成我们需要的数据类型</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换</p><h4 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h4><p>+号俩边只要有一个是字符串，都会把另外一个转换成字符串</p><p>除了+以外的算术运算符，比如-  *  &#x2F;  等都会把数据转成数字类型</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>转换类型不明确，靠经验才能总结</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>+号作为正号解析可以转换成Number</p><h3 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h3><p>自己写代码告诉系统该转换成什么类型</p><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><h5 id="Number（数据）"><a href="#Number（数据）" class="headerlink" title="Number（数据）"></a>Number（数据）</h5><p>转成数字类型</p><p>如果字符串内容里有非数字，转换失败时结果为NaN(Not a Number) 即不是一个数字</p><p>NaN也是number类型的数据，代表非数字</p><h5 id="parselnt（数据）"><a href="#parselnt（数据）" class="headerlink" title="parselnt（数据）"></a>parselnt（数据）</h5><p>只保留整数</p><h5 id="parseFloat（数据）"><a href="#parseFloat（数据）" class="headerlink" title="parseFloat（数据）"></a>parseFloat（数据）</h5><p>可以保留小数</p><h4 id="转换为字符型"><a href="#转换为字符型" class="headerlink" title="转换为字符型"></a>转换为字符型</h4><h5 id="String（数据）"><a href="#String（数据）" class="headerlink" title="String（数据）"></a>String（数据）</h5><h5 id="变量-toString（进制）"><a href="#变量-toString（进制）" class="headerlink" title="变量.toString（进制）"></a>变量.toString（进制）</h5><h2 id="JavaScript流程控制"><a href="#JavaScript流程控制" class="headerlink" title="JavaScript流程控制"></a>JavaScript流程控制</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><blockquote><p>优先级</p><p>先乘除后加减，有括号先算括号里面的</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><blockquote><p>+&#x3D;        *&#x3D;        &#x2F;&#x3D;</p><p>作用：简化代码</p></blockquote><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>自增：++</p><p>自减：–</p><blockquote><p>前置自增和后置自增单独使用没有区别</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前置自增：先自加，再使用（记忆口诀：++在前 先加）</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++i + <span class="number">2</span>)      <span class="comment">//结果是4</span></span><br><span class="line"><span class="comment">//注意：i是2，i先自加1，变成2之后，再和后面的2相加</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">后置自增：先使用，再自加（记忆口诀：++在后 后加）</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + <span class="number">2</span>)        <span class="comment">//结果是3</span></span><br><span class="line"><span class="comment">//注意：此时的i是1，先和2相加，先运算输出完毕后，i再自加是2</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><h5 id="比较运算符的介绍"><a href="#比较运算符的介绍" class="headerlink" title="比较运算符的介绍"></a>比较运算符的介绍</h5><p>作用：比较两个数据大小、是否相等</p><h5 id="比较运算符的使用"><a href="#比较运算符的使用" class="headerlink" title="比较运算符的使用"></a>比较运算符的使用</h5><blockquote><p>&#x3D;&#x3D;  只要值一样就是true，不管数据类型</p><p>判断要用&#x3D;&#x3D;&#x3D;      开发常用  要求值和数据类型完全一样</p></blockquote><h5 id="比较运算符的细节"><a href="#比较运算符的细节" class="headerlink" title="比较运算符的细节"></a>比较运算符的细节</h5><blockquote><p>字符串比较，比较的是字符对应的ASCII码</p><p>NaN不等于任何值，包括它本身</p><p>尽量不要比较小数，因为小数有精度问题</p><p>不同类型之间比较会发生隐式转换</p></blockquote><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="逻辑运算符的介-绍"><a href="#逻辑运算符的介-绍" class="headerlink" title="逻辑运算符的介 绍"></a>逻辑运算符的介 绍</h5><blockquote><p>&amp;&amp;逻辑与符号两边都为true，结果才为true一假则假                      3</p><p>||逻辑或符号两边有一个true就为true  一真则真                      2</p><p>!逻辑非true变false，false变true真变假，假变真                 1</p></blockquote><blockquote><p>优先级</p><p>非       与       或</p></blockquote><h5 id="逻辑运算符里的短路"><a href="#逻辑运算符里的短路" class="headerlink" title="逻辑运算符里的短路"></a>逻辑运算符里的短路</h5><blockquote><p>只存在于&amp;&amp;和||中，当满足一定条件会让右边代码不执行</p><p>&amp;&amp;左边为false就短路</p><p>||左边为true就短路</p></blockquote><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><blockquote><p>顺序：小括号          一元运算符（++  – !）     算术运算符（先*&#x2F;% 后+-）  关系运算符       相等运算符 逻辑运算符    赋值运算符         逗号运算符</p></blockquote><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><blockquote><p>表达式是一组代码的集合，JavaScript解释器会将其计算出一个结果</p></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p>JavaScript整句或命令</p></blockquote><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><h5 id="IF分支语句"><a href="#IF分支语句" class="headerlink" title="IF分支语句"></a>IF分支语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    满足条件要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">双分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    满足条件要执行的代码</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    不满足条件执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">多分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">   代码<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    代码n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 满足条件执行的代码 : 不满足条件执行的代码</span><br></pre></td></tr></table></figure><h5 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Switch</span>语句</span><br><span class="line"><span class="keyword">switch</span> (数据) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        代码<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        代码<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        代码n</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若没有全等&#x3D;&#x3D;&#x3D;的则执行default里的代码</p><p>switch case 语句一般用于等值判断，不适合于区间判断</p><p>switch case 一般需要配合break关键字使用，没有break会造成case穿透</p></blockquote><h5 id="断点操作"><a href="#断点操作" class="headerlink" title="断点操作"></a>断点操作</h5><p>在某句代码上加标记，当程序执行到这句有标记的代码时会暂停</p><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    要重复执行的代码(循环体)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环三要素</p><p>1.起始值</p><p>2.终止条件（没有终止条件，循环会一直执行，造成死循环）</p><p>3.变量变化量（用自增或自减）</p></blockquote><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="for循环语法"><a href="#for循环语法" class="headerlink" title="for循环语法"></a>for循环语法</h5><blockquote><p>优点</p><p>声明起始值、循环条件、变化值写到一起，一目了然</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值)&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for循环的最大价值：循环数组</p><p>循环另一个叫法遍历</p></blockquote><blockquote><p>长度length arr.length可以得到数组的长度</p></blockquote><blockquote><p>明确循环次数用for循环</p><p>不明确循环次数用while循环</p></blockquote><h5 id="循环退出"><a href="#循环退出" class="headerlink" title="循环退出"></a>循环退出</h5><blockquote><p>continue：结束本次循环，继续下次循环</p><p>break：跳出所在循环</p></blockquote><h5 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值) &#123;</span><br><span class="line">    <span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值) &#123;</span><br><span class="line">            循环体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">let</span> 数组名 = [数据<span class="number">1</span>, 数据<span class="number">2</span>, ...., 数据n]</span><br></pre></td></tr></table></figure><blockquote><p>数组中，数据的编号也叫索引或下标</p></blockquote><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>用循环把数组中每个元素都访问到，for循环遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; 数组名.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    数组名[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>数组的本质是数据集合，操作数据即<strong>增删改查</strong></p><blockquote><p>查： 数组[下标]</p><p>改：数组[下标]&#x3D;新值</p><p>增：arr.push(新增的内容)arr.unshift(新增的内容)</p><p>删：arr.pop( )arr.shift( )arr.splice(操作的下标，删除的个数)</p></blockquote><h4 id="利用push向数组添加元素（数据）"><a href="#利用push向数组添加元素（数据）" class="headerlink" title="利用push向数组添加元素（数据）"></a>利用push向数组添加元素（数据）</h4><p>数组.push()方法将一个或多个元素添加到数组的<strong>末尾</strong>，<strong>并返回该数组的新长度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">push</span>(元素<span class="number">1</span>, ........,元素n)</span><br></pre></td></tr></table></figure><p>arr.unshift(新增的内容)方法将一个或多个元素添加到数组的<strong>开头</strong>，<strong>并返回该数组的新长度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">unshift</span>(元素<span class="number">1</span>, ........,元素n)</span><br></pre></td></tr></table></figure><h4 id="数组删除元素"><a href="#数组删除元素" class="headerlink" title="数组删除元素"></a>数组删除元素</h4><p>数组.pop()方法从数组中删除最后一个元素，并返回该元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">pop</span>( )</span><br></pre></td></tr></table></figure><p>数组.shift()方法从数组中删除第一个元素，并返回该元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">shift</span>( )</span><br></pre></td></tr></table></figure><p>数组.splice( )方法  删除指定元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">splice</span>(start, deleteCount)</span><br><span class="line">arr.<span class="title function_">splice</span>(起始位置, 删除几个元素)</span><br></pre></td></tr></table></figure><blockquote><p>start起始位置（从0开始）</p><p>deleteCount不写的话就是从起始位置删到最后</p><p>使用场景</p></blockquote><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        例子</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><p>function，是被设计为执行特定任务的代码块</p><blockquote><p>优点</p><p>精简代码，方便使用</p></blockquote><h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><h4 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 ( ) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><blockquote><p>命名规范</p><p>和变量命名基本一致</p><p>使用小驼峰命名法</p><p>前缀应该为动词</p><p>命名建议常用动词约定</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353116.png"></p><h4 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名( )</span><br></pre></td></tr></table></figure><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><blockquote><p>优点</p><p>若函数完成功能需要调用者传入数据，那么久需要用有参数的函数</p><p>极大提高函数的灵活性</p></blockquote><h4 id="声明语法-1"><a href="#声明语法-1" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数列表</p><p>传入数据列表</p><p>声明这个函数需要传入几个数据</p><p>多个数据用逗号隔开</p></blockquote><h4 id="调用语法-1"><a href="#调用语法-1" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(传递的参数列表)</span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p><p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p><blockquote><p>形参可以理解为是在这个函数内声明的变量</p><p>实参可以理解为是给这个变量赋值</p><p>开发中保持形参和实参的个数一致</p></blockquote><h4 id="逻辑中断"><a href="#逻辑中断" class="headerlink" title="逻辑中断"></a>逻辑中断</h4><p>形参如果不被赋值，就是undefined</p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>当调用某个函数，这个函数会返回结果</p><h4 id="return返回数据"><a href="#return返回数据" class="headerlink" title="return返回数据"></a>return返回数据</h4><p>当函数需要返回数据出去时，用return关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 数据</span><br></pre></td></tr></table></figure><blockquote><p>细节</p><p>函数体中使用return关键字能将内部的执行结果交给函数外部使用</p><p>函数内部只能出现一次return，并且return后面代码不会再被执行，return后面的数据不要换行写</p><p>return会立即结束当前函数</p><p>函数可以没有return，这种情况函数默认返回值为underfined</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一段程序代码中所用到的名字并不总是有效可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的作用域</p><blockquote><p>优点</p><p>提高程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突</p></blockquote><blockquote><p>全局作用域：</p><p>作用于所有代码执行的环境（整个script标签内部）或者一个独立的js文件全局有效</p><p>局部作用域：</p><p>作用于函数内的代码环境也称之为函数作用域</p><p>块级作用域：</p><p>块作用域由{ }包括，if语句和for语句里面的{ }等</p></blockquote><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>在JavaScript中，根据作用域的不同，变量可以分为</p><blockquote><p>全局变量：</p><p>函数外部let的变量——全局变量在任何区域都可以访问和修改</p><p>局部变量：</p><p>函数内部let的变量——局部变量只能在当前函数内部访问和修改</p><p>块级变量：</p><p>{ }内部的let变量——let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问</p></blockquote><blockquote><p>注意</p><p>如果函数内部或者块级作用域内部，变量没有声明，直接赋值，也可以当做全局变量来看</p><p>另一种特殊情况，函数内部的形参可以看做局部变量</p></blockquote><h4 id="变量访问原则——作用域链"><a href="#变量访问原则——作用域链" class="headerlink" title="变量访问原则——作用域链"></a>变量访问原则——作用域链</h4><p>根据在内部函数可以访问外部函数变量的机制，用链式查找决定哪些数据能被内部函数访问</p><p><strong>采用就近原则</strong></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>将匿名函数赋值给一个变量，并且通过变量名进行调用</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">fn ( )        <span class="comment">//函数名 ( )</span></span><br></pre></td></tr></table></figure><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>避免全局变量之间的污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"> </span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125; )   ( );</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"> </span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125;   ( )   );</span><br><span class="line"><span class="comment">//不需要调用，立即执行</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h2><h3 id="对象是什么"><a href="#对象是什么" class="headerlink" title="对象是什么"></a>对象是什么</h3><p>JavaScript里的一种数据类型，是一种无序的数据集合</p><h3 id="对象使用"><a href="#对象使用" class="headerlink" title="对象使用"></a>对象使用</h3><p>掌握对象语法，保存多个数据</p><h4 id="声明语法-2"><a href="#声明语法-2" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="对象有属性和方法组成"><a href="#对象有属性和方法组成" class="headerlink" title="对象有属性和方法组成"></a>对象有属性和方法组成</h4><blockquote><p>属性：信息或叫特征（名词）</p><p>方法：功能或叫行为（动词）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">    属性名：属性值,</span><br><span class="line">    方法名：函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>数据描述性的信息称为属性</p><blockquote><p>属性都是成对出现的，包括属性名和值，用英文的:分隔</p><p>多个属性之间使用英文,分隔</p><p>属性就是依附在对象上的变量（外面是变量，对象内是属性）</p><p>属性名可以使用“”或 ‘’，<strong>一般情况下省略</strong>，除非名称遇到特殊符号</p></blockquote><h5 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h5><p>声明对象，添加若干属性后，可以使用.或[]获取对象中属性对应的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  person  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  person  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>数据行为性的信息称为方法，其本质是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法是由方法名和函数两部分构成，它们之间使用：分隔</p><p>多个属性之间使用英文，分隔</p><p>方法是依附在对象中的函数</p><p>方法名可以使用“”或 ‘’，<strong>一般情况下省略</strong>，除非名称遇到特殊符号</p></blockquote><h5 id="方法访问"><a href="#方法访问" class="headerlink" title="方法访问"></a>方法访问</h5><p>声明对象，添加若干方法后，可以使用.调用对象中函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象名.方法名 ( )</span></span><br><span class="line">person.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h3 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h3><p>对象本质是无序的数据集合</p><blockquote><p>查（查询对象）：</p><p>对象.属性或者对象[‘属性’]对象.方法( )</p><p>改（重新赋值）：</p><p>对象.属性 &#x3D; 值对象.方法 &#x3D; function ( ) { }</p><p>增（对象添加新的数据）：</p><p>对象名.新属性名 &#x3D; 新值</p><p>删（删除对象中属性）：</p><p>delete 对象名.属性名</p></blockquote><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><blockquote><p>注意</p><p>对象没有像数组一样的length属性，所以无法确定长度</p><p>对象里面是无序的键值队，没有规律，不像数组里面有规律的下标</p></blockquote><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span>循环语句</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> 对象名) &#123; &#125;</span><br><span class="line">k   变量属性名</span><br></pre></td></tr></table></figure><blockquote><p>k是获得对象的属性名，对象名[k]是获得属性值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  obj  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> boj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)<span class="comment">//打印属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])<span class="comment">//打印属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="内置对象是什么"><a href="#内置对象是什么" class="headerlink" title="内置对象是什么"></a>内置对象是什么</h4><p>JavaScript内部提供的对象，包含各种属性和方法给开发者调用</p><h4 id="内置对象Math"><a href="#内置对象Math" class="headerlink" title="内置对象Math"></a>内置对象Math</h4><p>Math对象是JavaScript提供的一个“数学高手”对象，提供了一系列做数学运算的方法</p><blockquote><p>random：生成0-1之间的随机数（包含0不包括1）</p><p>ceil：向上取整</p><p>floor：向下取整</p><p>max：找最大数</p><p>min：找最小数</p><p>pow：幂运算</p><p>abs：绝对值</p></blockquote><p>生成N-M之间的随机数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>( ) * (M - N + <span class="number">1</span>)) + N</span><br></pre></td></tr></table></figure><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353117.png"></p><h3 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h3><h4 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>简单类型又叫做基本数据类型或者值类型</p><blockquote><p>值类型：简单数据类型&#x2F;基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型 </p><p>string ，number，boolean，undefined，null</p></blockquote><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><p> 值类型变量的数据直接存放在变量（栈空间）中</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>复杂类型又叫做引用类型</p><blockquote><p>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p></blockquote><h5 id="内存分配-1"><a href="#内存分配-1" class="headerlink" title="内存分配"></a>内存分配</h5><p>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><h4 id="堆栈空间分配区别"><a href="#堆栈空间分配区别" class="headerlink" title="堆栈空间分配区别"></a>堆栈空间分配区别</h4><blockquote><p>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中 的栈</p><p>简单数据类型存放到栈里面</p><p>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收</p><p>引用数据类型存放到堆里面</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353118.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刚接触计算机时学的一些小知识</title>
      <link href="/posts/24871.html"/>
      <url>/posts/24871.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客的重要性"><a href="#博客的重要性" class="headerlink" title="博客的重要性"></a>博客的重要性</h1><ol><li><p><em><strong>总结和思考</strong></em></p></li><li><p><em><strong>提升文笔组织能力</strong></em></p></li><li><p><em><strong>提升学习总结能力(小章学完总结，大章学完总结，进行体系的思考规划)</strong></em></p></li><li><p><em><strong>提升逻辑思维能力（总分，体系要学什么，再进行细分）</strong></em></p></li></ol><h3 id="哪几种方式"><a href="#哪几种方式" class="headerlink" title="哪几种方式"></a>哪几种方式</h3><ol><li><em><strong>博客网</strong></em></li><li><em><strong>CSDN</strong></em></li><li><em><strong>自己搭建网站</strong></em></li></ol><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p><em><strong>标题：Ctrl+1-6</strong></em></p><p><em><strong>字体：</strong></em></p><ol><li><em><strong>斜体（Ctrl+I）</strong></em></li><li><em><strong>粗体（Ctrl+B）</strong></em></li></ol><p><em><strong>分割线：3个+，3个-，3个</strong></em></p><p><em><strong>代码：3个&#96;+Enter</strong></em></p><p><em><strong>链接：[链接文字]+(链接地址)或者&lt;链接地址&gt;</strong></em></p><h1 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h1><p><em><strong>能够按照程序运行，自动，高速处理海量数据的现代化智能电子设备，由硬件和软件组成</strong></em></p><h1 id="Windows常用快捷键"><a href="#Windows常用快捷键" class="headerlink" title="Windows常用快捷键"></a>Windows常用快捷键</h1><p><em><strong>Ctrl+A：全选</strong></em></p><p><em><strong>Ctrl+X：剪切</strong></em></p><p><em><strong>Ctrl+Z：撤销</strong></em></p><p><em><strong>Ctrl+S：保存</strong></em></p><p><em><strong>Alt+F4：关闭</strong></em></p><p><em><strong>Shift+Delete：永久删除</strong></em></p><p><em><strong>Ctrl+Shift+Esc：打开任务管理器</strong></em></p><h1 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h1><h2 id="打开cmd的方法"><a href="#打开cmd的方法" class="headerlink" title="打开cmd的方法"></a>打开cmd的方法</h2><ol><li><em><strong>开始+系统+命令提示符</strong></em></li><li><em><strong>Win键+R 输入cmd打开控制台</strong></em></li><li><em><strong>任意的文件夹下面，按住Shift+鼠标右键点击，打开命令行窗口</strong></em></li><li><em><strong>资源管理器的地址栏前加上cmd路径</strong></em></li></ol><p><em><strong>管理员方式运行：选择以管理员方式运行</strong></em></p><h1 id="常用的Dos命令"><a href="#常用的Dos命令" class="headerlink" title="常用的Dos命令"></a>常用的Dos命令</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#盘符切换   D:(英文)</span><br><span class="line">#查看当前目录下的所有文件 <span class="built_in">dir</span></span><br><span class="line">#切换目录 <span class="built_in">cd</span> (change directory)</span><br><span class="line">#返回上一级 <span class="built_in">cd</span>..</span><br><span class="line">#清理屏幕 <span class="built_in">cls</span> (clear screen)</span><br><span class="line">#退出终端 <span class="keyword">exit</span></span><br><span class="line">#查看电脑ip <span class="built_in">ipconfig</span></span><br><span class="line">#打开应用</span><br><span class="line"><span class="number">1</span>. calc 计算器</span><br><span class="line"><span class="number">2</span>. mspaint 画图</span><br><span class="line"><span class="number">3</span>. notepad 记事本</span><br><span class="line">#<span class="built_in">ping</span>命令</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br><span class="line">#文件命令</span><br><span class="line">    <span class="built_in">md</span> 创建文件夹</span><br><span class="line">    <span class="built_in">rd</span> 移除文件</span><br><span class="line">    <span class="built_in">cd</span>&gt;文件名  创建文件</span><br><span class="line">    <span class="built_in">del</span>文件名 删除文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习笔记</title>
      <link href="/posts/42876.html"/>
      <url>/posts/42876.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础选择器-字体文本相关样式"><a href="#基础选择器-字体文本相关样式" class="headerlink" title="基础选择器+字体文本相关样式"></a>基础选择器+字体文本相关样式</h2><h3 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h3><h4 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h4><p>CSS：层叠样式表</p><h4 id="CSS语法规则"><a href="#CSS语法规则" class="headerlink" title="CSS语法规则"></a>CSS语法规则</h4><p>写在style标签中</p><h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><h4 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h4><p>CSS写在style标签中</p><h4 id="外嵌式"><a href="#外嵌式" class="headerlink" title="外嵌式"></a>外嵌式</h4><p>CSS写在单独的.css文件中（需要用link标签引入）</p><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>CSS写在标签的style属性中（配合JS使用）</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>结构：标签名{css属性名:属性值;}</p><p>作用：通过标签名，找到页面中所有此类标签，设置样式</p><p>注意：无论嵌套多深，都能此类标签并设置样式</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>结构：.类名{css属性名:属性值;}</p><p>作用：通过类名，找到页面中所有带这个类名的标签，设置样式</p><p>注意：所有标签都有class属性，class属性的属性值为类名</p><p>类名不能以数字或者中划线开头</p><p>一个标签可有多个类名，类名间用空格隔开</p><p>类名可有重复，一个类选择器可以选中多个标签</p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>结构：#id属性值{css属性名:属性值;}</p><p>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式</p><p>注意：所有标签上都有id属性</p><p>id属性值是唯一的</p><p>一个标签上只能有一个id属性值</p><p>一个id选择器只能选中一个标签</p><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>结构：*{css属性名：属性值;}</p><p>作用：找到页面中所有的标签，设置样式</p><p>注意：开发中极少使用，特殊情况下才使用</p><p>最常用于去除标签默认的margin和padding</p><h2 id="字体和文本样式"><a href="#字体和文本样式" class="headerlink" title="字体和文本样式"></a>字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>属性名：font-size</p><p>取值：数字+px</p><p>注意：谷歌浏览器默认文字大小16px</p><p>单位要设置，否则无效</p><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>属性名：font-weight</p><p>取值：关键字：正常：normal加粗：bold</p><p>纯数字：100-900的整百数</p><p>正常：400加粗：700</p><p>注意：不是所有字体都提供了9种粗细</p><h4 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h4><p>属性名：font-style</p><p>取值：正常（默认值）：normal倾斜：italic</p><h4 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h4><p>属性名：font-family</p><p>取值：具体字体名字</p><p>注意：如果字体名称种存在多个单词，推荐使用引号包裹</p><p>最后一项字体系列不需要引号包裹</p><p>尽量使用系统常见自带字体</p><h4 id="样式层叠问题"><a href="#样式层叠问题" class="headerlink" title="样式层叠问题"></a>样式层叠问题</h4><p>如果给同一个标签设置相同的属性，此时样式会层叠，写在最下面的会生效</p><h4 id="字体font相关属性的连写"><a href="#字体font相关属性的连写" class="headerlink" title="字体font相关属性的连写"></a>字体font相关属性的连写</h4><p>属性名：font（复合属性）</p><p>取值：font:style weight size family;</p><p>注意：只能省略前俩个，省略了相当于设置了默认值</p><p>如果需要同时设置单独和连写形式</p><p>要么把单独的样式写在连写下面</p><p>要么把单独的样式写在连写的里面</p><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>属性名：text-indent</p><p>取值：数字+px 数字+em（1em&#x3D;当前标签的font-size的大小）</p><h4 id="文本水平对齐方式"><a href="#文本水平对齐方式" class="headerlink" title="文本水平对齐方式"></a>文本水平对齐方式</h4><p>属性名：text-align</p><p>取值：left：左对齐center：居中对齐right： 右对齐</p><h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><p>属性名：text-decoration</p><p>取值：underline：下划线line-through：删除线</p><p>​   overline：上划线none：无装饰线</p><p>注意：text-decoration:none用于清除a标签默认的下划线</p><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>属性名：line-height</p><p>作用：控制一行的上下行间距</p><p>取值：数字+px倍数（当前font-size的倍数）</p><p>应用：让单行文本垂直居中可以设置line-height：文字父元素高度</p><p>​网页精准布局时，会设置line-height:1 可以取消上下间距</p><blockquote><p>注意：font: style weight size&#x2F;line-height family;</p></blockquote><h4 id="标签水平居中"><a href="#标签水平居中" class="headerlink" title="标签水平居中"></a>标签水平居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><h2 id="选择器进阶-背景属性-元素显示模式-三大特性"><a href="#选择器进阶-背景属性-元素显示模式-三大特性" class="headerlink" title="选择器进阶+背景属性+元素显示模式+三大特性"></a>选择器进阶+背景属性+元素显示模式+三大特性</h2><h3 id="选择器进阶"><a href="#选择器进阶" class="headerlink" title="选择器进阶"></a>选择器进阶</h3><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><h5 id="后代选择器：空格"><a href="#后代选择器：空格" class="headerlink" title="后代选择器：空格"></a>后代选择器：空格</h5><p>作用：根据HTML标签的嵌套关系，选择父元素后代中满足条件的元素</p><p>选择器语法： 选择器1 选择器2{css}</p><h5 id="子代选择器：-gt"><a href="#子代选择器：-gt" class="headerlink" title="子代选择器：&gt;"></a>子代选择器：&gt;</h5><p>作用：根据HTML标签的嵌套关系，选择父元素子代中满足的元素</p><p>选择器语法：选择器1&gt;选择器2{css}</p><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>写法：,</p><p>作用：同时选中多组标签，设置相同的样式</p><p>选择器语法：选择器1,选择器2{css}</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>写法：紧挨着</p><p>作用：选中页面中同时满足多个选择器的标签</p><p>选择器语法：选择器1选择器2{css}</p><p>注意：如果有标签选择器，标签选择器必须写在最前面</p><h4 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h4><p> 作用：选中鼠标悬停在元素上的状态，设置样式 </p><p>选择器语法：选择器:hover{css}</p><p>注意：伪类选择器选中的元素的某种状态</p><h4 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h4><p>作用：简写，快速生成代码 </p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353109.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353110.png"></p><p>首字母+具体指的形式生成CSS代码片段</p><h3 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h3><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p>属性名：background-color（bgc）</p><p>属性值：颜色取值：关键字，rgb表示法，rgba表示法，十六进制</p><p>注意点：背景颜色默认值是透明：rgba(0,0,0,0)，transparent</p><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>属性名：background-image（bgi）</p><p>属性值：background-image:url(‘图片路径’)；</p><p>注意：背景图片默认是水平和垂直方向平铺的</p><h4 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h4><p>属性名：background-repeat（bgr）</p><p>属性值：repeat：默认，水平垂直都平铺no-repeat：不平铺</p><p>repeat-x：水平方向（x轴）平铺repeat-y：垂直方向（y轴）平铺</p><h4 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h4><p>属性名：background-position（bgp）</p><p>属性值：background-position:水平方向 垂直方向;</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353111.png"></p><h4 id="背景相关属性连写"><a href="#背景相关属性连写" class="headerlink" title="背景相关属性连写"></a>背景相关属性连写</h4><p>属性名：background（bg）</p><p>属性值：单个属性值的合写，之间空格隔开</p><p>书写顺序：background：color image repeat position（顺序不限）</p><blockquote><p>注意：如果需要同时设置单独和连写形式</p><p>​   要么把单独的样式写在连写下面</p><p>​  要么把单独的样式写在连写的里面</p></blockquote><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>显示特点：独占一行</p><p>宽度默认是父元素的宽度，高度默认由内容撑开</p><p>可以设置宽高</p><blockquote><p>代表标签：div p h系列 ul li dl dt dd form header     nav footer……</p></blockquote><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>显示特点：一行可以显示多个</p><p>宽度和高度默认由内容撑开</p><p>不可以设置宽高</p><blockquote><p>代表标签：a span b u i s strong ins em del…….</p></blockquote><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>显示特点：一行可以显示多个</p><p>可以设置宽高</p><blockquote><p>代表标签：input textarea button select…..</p></blockquote><blockquote><p>特殊情况：img标签由行内块元素特点，但是Chrome调试工具显示inline</p></blockquote><h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>目的：改变元素默认的显示特点，让元素符号布局要求</p><p>语法：display: block转换成块级元素</p><p>​   display: inline-block转换成行内块元素</p><p>​   display: inline转换成行内元素</p><h4 id="HTML嵌套规范注意点"><a href="#HTML嵌套规范注意点" class="headerlink" title="HTML嵌套规范注意点"></a>HTML嵌套规范注意点</h4><p>块级元素嵌套：文本，块级元素，行内元素，行内块元素</p><p>但是：p标签中不要嵌套div，p，h等块级元素</p><p>a标签内部可以嵌套任意元素</p><p>但是：a标签不能嵌套a标签</p><h3 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h3><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><p>特性：子元素有默认继承父元素样式的特点</p><p>可以继承的常见属性</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353112.png"></p><blockquote><p>注意：可以通过调试工具判断样式是否可以继承</p></blockquote><blockquote><p>如果元素有浏览器默认样式，此时继承性依然存在，但是a标签的color会继承失效,h系列标签的font-size会继承失效</p></blockquote><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><p>特性：给同一个标签设置不同的样式——此时样式会层叠叠加——会共同作用在标签上</p><p>​给同一个标签设置相同的样式——此时样式会层叠覆盖——最终写在最后的样式会生效</p><blockquote><p>注意：当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p></blockquote><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>特性：不同选择器具有不同的优先级，优先级高的覆盖优先级低的选择器样式</p><p>优先级公式：继承&lt;通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important</p><blockquote><p>注意：!important写在属性值后面，分号前面</p><p>​!important不能提升继承的优先级，只要是继承优先级最低</p><p>​实际开发中不建议!important</p></blockquote><h5 id="权重叠加计算"><a href="#权重叠加计算" class="headerlink" title="权重叠加计算"></a>权重叠加计算</h5><p>场景：复合选择器，通过权重叠加计算方法，最终判断哪个选择器优先级最高会生效</p><h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="盒子模型的介绍"><a href="#盒子模型的介绍" class="headerlink" title="盒子模型的介绍"></a>盒子模型的介绍</h4><p>概念：每一个标签，都可看做是一个“盒子”</p><p>CSS中规定每个盒子分别由：<strong>内容区域（content）、内边距区域（padding）、边框（border）、外边距区域（margin）</strong>构成</p><h4 id="内容的宽度和高度"><a href="#内容的宽度和高度" class="headerlink" title="内容的宽度和高度"></a>内容的宽度和高度</h4><p>属性：width &#x2F; height</p><p>取值：数字+px</p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>属性名：border</p><p>属性值：border: 10px solid red;   </p><p>实线：solid 虚线：dashed       点线：dotted</p><p>快捷键：bd + tab</p><h4 id="边框-单方向设置"><a href="#边框-单方向设置" class="headerlink" title="边框-单方向设置"></a>边框-单方向设置</h4><p>属性名：border-方向名</p><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><p>属性名：padding</p><p>属性值：padding:10px 10px 20px 20px;</p><h4 id="CSS盒模型（自动内减）"><a href="#CSS盒模型（自动内减）" class="headerlink" title="CSS盒模型（自动内减）"></a>CSS盒模型（自动内减）</h4><p>给盒子设置属性box-sizing: border-box;</p><p>会自动计算多余大小，自动在内容中减去</p><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><p>属性名：margin</p><p>属性值：margin:10px 10px 20px 20px;</p><h4 id="清楚默认内外边距"><a href="#清楚默认内外边距" class="headerlink" title="清楚默认内外边距"></a>清楚默认内外边距</h4><p>*{margin:0;     padding:0;}</p><h4 id="版心居中"><a href="#版心居中" class="headerlink" title="版心居中"></a>版心居中</h4><p>版心：网页的有效内容</p><p>属性名：margin: 0 auto;</p><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>场景：垂直布局的块级元素，上下的margin会合并</p><p>结果：最终两者距离为margin的最大值</p><p>解决：只给一个盒子设置margin</p><h4 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h4><p>场景：互相嵌套的块级元素，子元素的margin-top会作用在父元素上</p><p>结果：导致父元素一起往下移动</p><blockquote><p>解决方法：父元素设置border-top或者padding-top</p><p>父元素设置overflow: hidden</p><p>转换成行内块元素</p><p>设置浮动</p></blockquote><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><p>作用：根据元素在HTML中的结构关系查找元素</p><p>优势：减少对于HTML中类的依赖，有利于保持代码整洁</p><p>场景：常用语查找某父级选择器中的子元素</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353113.png"></p><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>元素：HTML设置的标签</p><p>伪元素：由CSS模拟出的标签效果</p><p>种类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: :before在父元素内容的最前添加一个伪元素</span><br><span class="line">: :after 在父元素内容的最后添加一个伪元素</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>必须设置content属性才能生效</p><p>伪元素默认是行内元素 </p></blockquote><h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>又称文档流，是浏览器在渲染显示页面内容时默认采用的一套排版规则，规定应该以何种方式排列元素</p><h4 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h4><h5 id="行内块问题"><a href="#行内块问题" class="headerlink" title="行内块问题"></a>行内块问题</h5><blockquote><p>注意：浏览器解析行内块或行内元素时，如果标签换行书写会产生一个空隙</p></blockquote><h5 id="浮动的作用"><a href="#浮动的作用" class="headerlink" title="浮动的作用"></a>浮动的作用</h5><p>早期：图文环绕</p><p>现在：网页布局</p><h5 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h5><p>浮动元素会脱离标准流，在标准流中不占位置</p><p>浮动 元素比标准流高半个级别，可以覆盖标准流中的元素</p><p>浮动找浮动，下一个浮动元素会在上一个浮动浓盐酸后面左右浮动</p><p>浮动元素有特殊的显示效果：一行可以显示多个 可以设置宽高</p><blockquote><p>注意：</p><p>浮动的元素不能通过text-align: center 或者margin: 0 auto</p><p>父级的宽度不够，子级会自动换行</p></blockquote><h5 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h5><blockquote><ol><li>浮动 &#x2F; display</li><li>盒子模型：margin border padding 宽度高度背景色</li><li>文字样式</li></ol></blockquote><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><p>含义：清除浮动带来的影响——子元素浮动了，此时子元素不能撑开标准流的块级父元素</p><p>原因：子元素浮动后脱标（<strong>父级没有高度</strong>）——不占位置</p><p>目的：需要父元素有高度，从而不影响其他网页元素的布局</p><h5 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h5><p>1.直接设置父元素高度</p><p>2.额外标签法</p><blockquote><p>1.在父元素内容的最后添加一个块级元素</p><p>2.给添加的块级元素设置clear : both</p><p>缺点：会在页面中添加额外的标签，会让页面的HTML结构变得复杂</p></blockquote><p>3.单伪元素清除法</p><blockquote><p>操作：用伪元素替代了额外标签</p><p>优点：项目中使用，直接给标签加类即可清除浮动</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本写法</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">补充写法</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.双伪元素清除法</p><blockquote><p>优点：项目中使用，直接给标签加类即可清除浮动</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> :: before,</span><br><span class="line">.clearfix :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.给父元素设置overflow : hidden</p><blockquote><p>操作：</p><p>直接给父元素设置overflow : hidden</p><p>优点：方便</p></blockquote><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="定位的基本介绍"><a href="#定位的基本介绍" class="headerlink" title="定位的基本介绍"></a>定位的基本介绍</h4><p>可以让元素自由的摆放在网页的任意位置</p><p>一般用于盒子之间层叠情况</p><h4 id="定位的基本使用"><a href="#定位的基本使用" class="headerlink" title="定位的基本使用"></a>定位的基本使用</h4><p>属性名：position</p><blockquote><p>相对定位：relative</p><p>绝对定位：absolute</p><p>固定定位：fixed</p></blockquote><h5 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: static;</span><br></pre></td></tr></table></figure><p>就是标准流，默认值</p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: relative;</span><br></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>不占位</p><blockquote><p>绝对定位的盒子显示模式具备行内块特点,加宽高生效，如果没有宽度也没有内容，盒子的尺寸就是0</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: absolute;</span><br></pre></td></tr></table></figure><h5 id="子绝父相（子级绝对定位，父级相对定位）"><a href="#子绝父相（子级绝对定位，父级相对定位）" class="headerlink" title="子绝父相（子级绝对定位，父级相对定位）"></a>子绝父相（子级绝对定位，父级相对定位）</h5><blockquote><p>使用子绝父相，水平居中</p><p>绝对定位了不能使用margin: 0 auto;</p><p>居中：</p><p>left: 50%;</p><p>margin-left: 盒子宽度的一半;</p><p>top: 50%;</p><p>margin-top: 盒子高度的一半;</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">位移：自己宽度高度的一半</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>代码：position: fixed;</p><blockquote><p>特点：</p><p>需要配合方位属性实现移动</p><p>相对于浏览器可视区域进行移动</p><p>在页面不占位置——脱标</p></blockquote><h5 id="元素的层级关系"><a href="#元素的层级关系" class="headerlink" title="元素的层级关系"></a>元素的层级关系</h5><blockquote><p>不同布局方式元素的层级关系：</p><p>标准流&lt;浮动&lt;定位</p></blockquote><blockquote><p>不同定位之间的层级关系：</p><p>相对、绝对、固定默认层级相同</p><p>此时HTML中写在下面的元素层级更高，会覆盖上面的元素</p><p>z-index: ;</p></blockquote><h3 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h3><h4 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h4><p>属性名：vertical-align</p><p>先给父级加行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baseline        默认，基线对齐</span><br><span class="line"><span class="attribute">top</span>      顶部对齐</span><br><span class="line">middle      中部对齐</span><br><span class="line"><span class="attribute">bottom</span>     底部对齐</span><br></pre></td></tr></table></figure><h4 id="光标类型"><a href="#光标类型" class="headerlink" title="光标类型"></a>光标类型</h4><p>属性名：cursor</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default默认值，通常是箭头</span><br><span class="line">pointer小手效果，提示用户可以点击</span><br><span class="line">text工字型，提示用户可以选择文字</span><br><span class="line">move     十字光标，提示用户可以移动</span><br></pre></td></tr></table></figure><h4 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h4><p>属性名：border-radius</p><p>取值：数字+px、百分比</p><h4 id="overflow溢出部分显示效果"><a href="#overflow溢出部分显示效果" class="headerlink" title="overflow溢出部分显示效果"></a>overflow溢出部分显示效果</h4><p>属性名：overflow</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">visible默认值，溢出部分可见</span><br><span class="line">hidden    溢出部分隐藏</span><br><span class="line">scroll无论是否溢出，都显示滚动条</span><br><span class="line">auto     根据是否溢出，自动显示或隐藏滚动条</span><br></pre></td></tr></table></figure><h4 id="元素本身隐藏"><a href="#元素本身隐藏" class="headerlink" title="元素本身隐藏"></a>元素本身隐藏</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常见属性</span><br><span class="line"><span class="attribute">visibility</span>: hidden占位隐藏</span><br><span class="line">display: none</span><br></pre></td></tr></table></figure><h4 id="元素的整体透明度"><a href="#元素的整体透明度" class="headerlink" title="元素的整体透明度"></a>元素的整体透明度</h4><p>属性名：opacity</p><p>属性值：0~1之间的数字</p><h4 id="边框合并"><a href="#边框合并" class="headerlink" title="边框合并"></a>边框合并</h4><p>让相邻表格边框进行合并，得到细边框效果（给table标签）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><blockquote><p>1.设置一个盒子</p><p>2.设置四周不同颜色的边框</p><p>3.将盒子宽高设置为0，仅保留边框</p></blockquote><h4 id="焦点伪类选择器"><a href="#焦点伪类选择器" class="headerlink" title="焦点伪类选择器"></a>焦点伪类选择器</h4><p>常用于表单控件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> : focus</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>通过元素上的HTML属性来选择元素，常用于选择input标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E<span class="selector-attr">[attr]</span>选择具有attr属性的E元素</span><br><span class="line">E<span class="selector-attr">[attr=<span class="string">&quot;val&quot;</span>]</span>  选择具有attr属性并且属性值等于val的E元素</span><br></pre></td></tr></table></figure><h3 id="CSS样式补充"><a href="#CSS样式补充" class="headerlink" title="CSS样式补充"></a>CSS样式补充</h3><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>将多张小图片，合并成一张大图片</p><blockquote><p>1.创建一个盒子，设置盒子的尺寸和小图尺寸相同</p><p>2.将精灵图设置为盒子的背景图片</p><p>3.修改背景图位置（通过PxCook测量小图片左上角左边，分别取负值设置给盒子的background-position: x y）</p></blockquote><h4 id="背景图大小"><a href="#背景图大小" class="headerlink" title="背景图大小"></a>背景图大小</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background-size</span>: 宽度 高度 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>数字+px简单方便，常用</p><p>百分比   相对于盒子自身宽高的百分比</p><p>contain 包含，将背景图片等比例缩放，直到不会超出盒子的最大</p><p>cover 覆盖，将背景图片等笔试缩放，直到刚好填满整个盒子没有空白</p></blockquote><h4 id="background连写"><a href="#background连写" class="headerlink" title="background连写"></a>background连写</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background</span>: color image repeat position/size ;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>background-size和background连写同时设置，注意覆盖问题</p><p>解决</p><p>1.要么单独的样式写连写的下面</p><p>2.要么单独样式写在连写的里面</p></blockquote><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><p>属性名：box-shadow</p><blockquote><p>取值</p><p>h-shadow必须，水平偏移量。允许负值</p><p>v-shadow必须，垂直偏移量。允许负值</p><p>blur可选，模糊度</p><p>spread可选，阴影扩大</p><p>color  可选，阴影颜色</p><p>inset  可选，将阴影改为内部阴影</p></blockquote><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h4><p>属性名：transition</p><blockquote><p>取值</p><p>过渡的属性all:所有能过渡的属性都过渡、具体属性名：width——只有width过渡</p><p>过渡的时长数字+s（秒）</p></blockquote><h2 id="2D-amp-3D-转换与动画"><a href="#2D-amp-3D-转换与动画" class="headerlink" title="2D&amp;3D 转换与动画"></a>2D&amp;3D 转换与动画</h2><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>直接使用iconfont文件夹中的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont  你想要的字体图标的类名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="平面转换"><a href="#平面转换" class="headerlink" title="平面转换"></a>平面转换</h3><p>使用transform属性实现元素的位移、旋转、缩放等效果</p><h4 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h4><p>使用translate实现元素位移</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">父元素<span class="selector-pseudo">:hover</span>  子元素 &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(水平移动距离，垂直移动距离);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>取值（正负均可）</p><p>像素单位数值</p><p>百分比（盒子自身尺寸的百分比）</p></blockquote><blockquote><p>注意：X轴正向为右，Y轴正向为下</p></blockquote><blockquote><p>技巧</p><p>translate()如果只给出一个值，表示X轴方向移动距离</p><p>单独设置某个方向的移动距离：translateX()  &amp;  translateY()</p></blockquote><h4 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h4><p>使用translate快速实现绝对定位的元素居中效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p>使用rotate实现元素旋转效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">rotate</span>(角度);</span><br></pre></td></tr></table></figure><blockquote><p>注意：角度单位是deg</p><p>技巧：取值正负均可</p><p>正（顺时针）</p><p>负（逆时针）</p></blockquote><h4 id="转换原点"><a href="#转换原点" class="headerlink" title="转换原点"></a>转换原点</h4><p>使用transform-origin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">默认圆点是盒子中心点</span><br><span class="line"><span class="attribute">transform-origin</span>: 原点水平位置    原点垂直位置 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>方位名词（left、top、right、bottom、center）</p><p>像素单位数值</p><p>百分比（盒子自身尺寸）</p></blockquote><h4 id="多重转换"><a href="#多重转换" class="headerlink" title="多重转换"></a>多重转换</h4><p>使用transform复合属性实现多形态转换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span> : <span class="built_in">translate</span>()  <span class="built_in">rotate</span>() ;</span><br></pre></td></tr></table></figure><blockquote><p>注意：旋转不能放前面，旋转会改变坐标轴向</p><p>不能分开写，transform有层叠性</p></blockquote><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>使用scale改变元素的尺寸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">scale</span>(X轴缩放倍数, Y轴缩放倍数);</span><br></pre></td></tr></table></figure><blockquote><p>技巧</p><p>一般情况下，只为scale设置一个值，表示X轴和Y轴等比例缩放</p><p>transform: scale(缩放倍数);</p></blockquote><h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><p>使用background-image属性实现渐变背景效果</p><blockquote><p>渐变是多个颜色逐渐变化的视觉效果</p><p>一般用于设置盒子的背景</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background-image</span> : linear-gradient (颜色<span class="number">1</span>，颜色<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="空间转换"><a href="#空间转换" class="headerlink" title="空间转换"></a>空间转换</h3><p>使用transform属性实现元素在空间的位移、旋转、缩放等效果</p><blockquote><p>空间：是从坐标轴角度定义的。x,y和z三条坐标轴构成了一个立体空间，z轴位置与视线方向相同</p><p>空间转换也叫3D转换</p></blockquote><h4 id="空间位移"><a href="#空间位移" class="headerlink" title="空间位移"></a>空间位移</h4><p>使用translate实现元素空间位移效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, z);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(值);</span><br></pre></td></tr></table></figure><blockquote><p>取值（正负均可）</p><p>像素单位数值</p><p>百分比</p></blockquote><h4 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h4><p>使用perspective属性实现透视效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码（添加给父级）</span><br><span class="line"><span class="attribute">perspective</span>: 值 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>像素单位数值，数值一般在800-1200</p></blockquote><h4 id="空间旋转"><a href="#空间旋转" class="headerlink" title="空间旋转"></a>空间旋转</h4><p>使用rotate实现元素空间旋转效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(值);</span><br></pre></td></tr></table></figure><blockquote><p>左手法则</p><p>判断旋转方向：左手握住旋转轴，拇指指向正直方向，手指弯曲方向为旋转正直方向</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(x,y,z,角度度数)       用来设置自定义旋转轴的位置及旋转的角度</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>x，y，z取值为0-1之间的数字</p></blockquote><h4 id="立体呈现"><a href="#立体呈现" class="headerlink" title="立体呈现"></a>立体呈现</h4><p>使用transform-style: preserve-3d呈现立体图形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d ;父级元素添加</span><br></pre></td></tr></table></figure><blockquote><p>给子元素定位（子绝父相）</p><p>子元素设置位置（位移或旋转）</p></blockquote><h4 id="空间缩放"><a href="#空间缩放" class="headerlink" title="空间缩放"></a>空间缩放</h4><p>使用scale实现空间缩放效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x,y,z);</span><br></pre></td></tr></table></figure><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>使用animation添加动画效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义动画</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="number">0%</span>&#123;&#125;</span><br><span class="line">    <span class="number">10%</span>&#123;&#125;</span><br><span class="line">    <span class="number">15%</span>&#123;&#125;</span><br><span class="line">    <span class="number">100%</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用动画</span><br><span class="line"><span class="attribute">animation</span>: 动画名称    动画花费时长 ;</span><br></pre></td></tr></table></figure><h4 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h4><p>使用animation相关属性控制动画执行过程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">animation</span>: 动画名称 动画时长 速度曲线 延迟时间 重复次数 动画方向 执行完毕时状态;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>动画名称和动画时长必须赋值</p><p>取值不分先后顺序</p><p>如果有2个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</p><p>反向  alternate</p><p>无限循环 infinite</p><p>重复3次播放steps(3)  </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">属性作用取值</span><br><span class="line"><span class="attribute">animation-name</span>动画名称</span><br><span class="line"><span class="attribute">animation-duration</span>   动画时长</span><br><span class="line"><span class="attribute">animation-delay</span>   延迟时间</span><br><span class="line"><span class="attribute">animation-fill-mode</span>    动画执行完毕时状态forwards:最后一帧状态</span><br><span class="line">      backwards:第一帧状态</span><br><span class="line">animation-timing-function     速度曲线 <span class="built_in">steps</span>(数字):逐帧动画</span><br><span class="line">animation-iteration-count      重复次数   infinite为无线循环</span><br><span class="line">animation-direction    动画执行方向    alternate为反向</span><br><span class="line">animation-play-state    暂停动画paused暂停，配合hover使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/posts/50736.html"/>
      <url>/posts/50736.html</url>
      
        <content type="html"><![CDATA[<h2 id="网页由什么组成"><a href="#网页由什么组成" class="headerlink" title="网页由什么组成"></a>网页由什么组成</h2><p>文字、图片、音频、视频、超链接</p><h2 id="网页的本质"><a href="#网页的本质" class="headerlink" title="网页的本质"></a>网页的本质</h2><p>前端程序员写的代码</p><h2 id="前端代码通过什么转换成我们眼中的页面"><a href="#前端代码通过什么转换成我们眼中的页面" class="headerlink" title="前端代码通过什么转换成我们眼中的页面"></a>前端代码通过什么转换成我们眼中的页面</h2><p>浏览器的解析和渲染</p><p>渲染引擎（浏览器内核）：浏览器中专门对代码进行解析渲染的部分</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353107.png"></p><p>渲染引擎（浏览器内核）不一样，导致解析相同代码的速度、性能、效果也不一样</p><p>推荐Google Chrome（谷歌浏览器）</p><h2 id="网页基础概念"><a href="#网页基础概念" class="headerlink" title="网页基础概念"></a>网页基础概念</h2><p>开发工具：VS Code Webstorm Sublime Dreamweaver Hbuilder</p><h2 id="HTML感知"><a href="#HTML感知" class="headerlink" title="HTML感知"></a>HTML感知</h2><p>HTML（超文本标记语言）</p><h2 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h2><p>html标签：网页整体</p><p>head标签：网页头部</p><p>body标签：网页身体</p><p>title标签：网页标题</p><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p>添加注释，方便下次看到时想起功能和含义</p><p>快捷键：Ctrl+&#x2F;</p><h2 id="HTML标签的构成"><a href="#HTML标签的构成" class="headerlink" title="HTML标签的构成"></a>HTML标签的构成</h2><p>双标签：由两部分组成，开始标签和结束标签，中间包裹内容</p><p>单标签：自成一体，无法包裹内容</p><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><h3 id="父子关系（嵌套关系）"><a href="#父子关系（嵌套关系）" class="headerlink" title="父子关系（嵌套关系）"></a>父子关系（嵌套关系）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟标签（并列标签）"><a href="#兄弟标签（并列标签）" class="headerlink" title="兄弟标签（并列标签）"></a>兄弟标签（并列标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML标签学习"><a href="#HTML标签学习" class="headerlink" title="HTML标签学习"></a>HTML标签学习</h2><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><p>h系列标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重要程度依次递减</p><p>特点：文字都有加粗，变大，h1-&gt;h6文字逐渐变小，独占一行</p><h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：段落之间存在间隙，独占一行</p><h4 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签，让文字强制换行</p><h4 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签，在页面中显示一条水平线</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>     <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span>   <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>     <span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>   <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h3><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换文本，图片加载失败时&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示文本，鼠标悬停时&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签</p><h5 id="图片标签的width和height属性"><a href="#图片标签的width和height属性" class="headerlink" title="图片标签的width和height属性"></a>图片标签的width和height属性</h5><p>属性名：width（宽度）和heigh（高度）</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><h5 id="绝对路径："><a href="#绝对路径：" class="headerlink" title="绝对路径："></a>绝对路径：</h5><p>目录下的绝对位置，从盘符开始的路径</p><h5 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a>相对路径：</h5><p>从当前文件开始出发找目标文件的过程</p><h4 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音频路径&quot;</span> <span class="attr">controls</span>（显示音频的播放控件） <span class="attr">autoplay</span>（自动播放） <span class="attr">loop</span>（循环播放）&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频路径&quot;</span> <span class="attr">controls</span>（显示音频的播放控件） <span class="attr">autoplay</span>（自动播放，谷歌浏览器需配合<span class="attr">muted</span>实现静音播放） <span class="attr">loop</span>（循环播放） &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接标题"><a href="#链接标题" class="headerlink" title="链接标题"></a>链接标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标网页路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：双标签，点击之后跳转到指定页面</p><h4 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h4><p>_self：默认值，在当前窗口跳转</p><p>_blank：在新窗口跳转</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：列表前默认圆点标识</p><p>注意：ul标签中只允许包含li标签，li标签可包含任意内容</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><h4 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>      表格整体，可包裹多个tr</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  表格每行，可用于包裹td</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>        表格单元格，可用于包裹内容</span><br></pre></td></tr></table></figure><blockquote><p>标签的嵌套关系：table&gt;tr&gt;td</p></blockquote><h4 id="表格相关属性"><a href="#表格相关属性" class="headerlink" title="表格相关属性"></a>表格相关属性</h4><p>边框宽度：border</p><p>表格宽度：width</p><p>表格高度：height</p><h4 id="表格标题和表头单元格标签"><a href="#表格标题和表头单元格标签" class="headerlink" title="表格标题和表头单元格标签"></a>表格标题和表头单元格标签</h4><p>表格大标题：caption  默认在表格整体顶部居中显示</p><p>表格单元格：th     默认内部文字加粗并居中显示</p><p>caption标签书写在table标签内部</p><p>th标签书写在tr标签内部（用于替换td标签）</p><h4 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h4><p>表格头部：thead</p><p>表格主题：tbody</p><p>表格底部：tfoot</p><p>表格结构标签内部用于包裹tr标签</p><p>表格的结构标签可以省略</p><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>1.明确合并哪几个单元格</p><p>2.通过左上原则，确定保留谁删除谁</p><blockquote><p>上下合并：保留最上的，删除其他</p><p>左右合并：保留最左的，删除其他</p></blockquote><p>3.跨行合并：rowspan跨列合并：colspan</p><blockquote><p>只有同一个结构标签中的单元格才能合并，不能跨结构标签合并</p></blockquote><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h4><h5 id="type属性值"><a href="#type属性值" class="headerlink" title="type属性值"></a>type属性值</h5><p>text：文本框，用于输入单行文本</p><p>password：密码框，用于输入密码</p><p>radio：单选框，用于多选一</p><p>checkbox：多选框，用于多选多</p><p>file：文件选择，用于之后上传文件</p><p>submit：提交按钮，用于提交</p><p>reset：重置按钮，用于重置</p><p>button：普通按钮，默认无功能，之后配合js添加功能</p><h5 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h5><p>type属性值：text       password</p><p>placeholder：占位符，提示用户输入内容的文本</p><h5 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h5><p>type属性值：radio</p><p>name：分组，有相同name属性值的单选框为一组，一组中只有一个被选中</p><p>checked：默认选中</p><h5 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h5><p>type属性值：file</p><p>multiple：多文件选择</p><h5 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h5><p>submit：提交按钮。点击之后提交数据给后端服务器</p><p>reset：重置按钮。点击之后恢复表单默认值</p><p>button：普通按钮。 默认无功能，之后配合js添加功能</p><p>注意：</p><p>如果需要实现以上按钮功能，需要配合form标签使用</p><p>form使用方法：用form标签把表单标签一起包裹起来即可</p><p>value：按钮上的数字</p><h4 id="button按钮标签"><a href="#button按钮标签" class="headerlink" title="button按钮标签"></a>button按钮标签</h4><p>标签名：button</p><p>type属性值：</p><p>同input的三个按钮标签</p><p>buttonsubmitreset</p><h4 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h4><h5 id="标签组成"><a href="#标签组成" class="headerlink" title="标签组成"></a>标签组成</h5><p>selct标签：下拉菜单的整体</p><p>option标签：下拉菜单的每一项</p><h5 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h5><p>selected：下拉菜单的默认选中</p><h4 id="textarea文本域标签"><a href="#textarea文本域标签" class="headerlink" title="textarea文本域标签"></a>textarea文本域标签</h4><h5 id="标签名：textarea"><a href="#标签名：textarea" class="headerlink" title="标签名：textarea"></a>标签名：textarea</h5><h5 id="常见属性："><a href="#常见属性：" class="headerlink" title="常见属性："></a>常见属性：</h5><p>cols：规定了文本域内可见宽度</p><p>rows：规定了文本域内可见行数</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>右下角可以拖拽改变大小</p><p>实际开发时针对样式效果推荐用CSS</p><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><h5 id="场景：常用语绑定内容与表单标签的关系"><a href="#场景：常用语绑定内容与表单标签的关系" class="headerlink" title="场景：常用语绑定内容与表单标签的关系"></a>场景：常用语绑定内容与表单标签的关系</h5><h5 id="标签名：label"><a href="#标签名：label" class="headerlink" title="标签名：label"></a>标签名：label</h5><h5 id="使用方法1："><a href="#使用方法1：" class="headerlink" title="使用方法1："></a>使用方法1：</h5><p>1.使用label标签把内容包裹起来</p><p>2.在表单标签上添加id属性</p><p>3.在label标签的for属性中设置对应的id属性值</p><h5 id="使用方法2："><a href="#使用方法2：" class="headerlink" title="使用方法2："></a>使用方法2：</h5><p>1.直接使用label标签把内容和表单标签一起包裹</p><p>2.需要label标签的for属性删除即可</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><h4 id="没有语义的布局标签"><a href="#没有语义的布局标签" class="headerlink" title="没有语义的布局标签"></a>没有语义的布局标签</h4><p>div标签：一行只显示一个（独占一行）</p><p>span标签：一行可以显示多个</p><h4 id="有语义的布局标签（了解）"><a href="#有语义的布局标签（了解）" class="headerlink" title="有语义的布局标签（了解）"></a>有语义的布局标签（了解）</h4><p>场景：HTML5（手机端）</p><p>网页头部：header</p><p>网页导航：nav</p><p>网页底部：footer</p><p>网页侧边栏：aside</p><p>网页区块：section</p><p>网页文章：article</p><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353108.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
