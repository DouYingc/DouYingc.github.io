<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模块化</title>
      <link href="/posts/46203.html"/>
      <url>/posts/46203.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块化基本概念"><a href="#模块化基本概念" class="headerlink" title="模块化基本概念"></a>模块化基本概念</h2><p><strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元</p><p><strong>模块化作用</strong>：</p><ul><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ul><p><strong>模块化规范</strong>是对代码进行模块化拆分和组合时需要遵守的规则，如使用何种语法格式引用模块和向外暴露成员</p><h2 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h2><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p><ul><li><p>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> custon = <span class="built_in">require</span>(<span class="string">&#x27;./custom&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;monent&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：</p><p>使用 require()方法加载其它模块时，会执行被加载模块中的代码</p></blockquote><h2 id="Node-js-中的模块作用域"><a href="#Node-js-中的模块作用域" class="headerlink" title="Node.js 中的模块作用域"></a>Node.js 中的模块作用域</h2><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong></p><p><strong>模块作用域作用</strong>：防止全局变量污染</p><h2 id="向外共享模块作用域中的成员"><a href="#向外共享模块作用域中的成员" class="headerlink" title="向外共享模块作用域中的成员"></a>向外共享模块作用域中的成员</h2><h3 id="module-对象"><a href="#module-对象" class="headerlink" title="module 对象"></a>module 对象</h3><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207311550103.png"></p><h3 id="module-exports-对象"><a href="#module-exports-对象" class="headerlink" title="module.exports 对象"></a>module.exports 对象</h3><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模块.js</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 username 属性</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 sayHello 方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">age</span> = age</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模块.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./06-自定义模块&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br></pre></td></tr></table></figure><blockquote><p>外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象</p></blockquote><h3 id="共享成员时的注意点"><a href="#共享成员时的注意点" class="headerlink" title="共享成员时的注意点"></a>共享成员时的注意点</h3><p>使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准</p><ul><li>默认情况下，exports 和 module.exports 指向同一个对象。</li><li>最终共享的结果，以 module.exports 指向的对象为准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模块.js</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 username 属性</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 向 module.exports 对象上挂载 sayHello 方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">age</span> = age</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">    sayHi () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用模块.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./06-自定义模块&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br></pre></td></tr></table></figure><h3 id="exports-和-module-exports-的使用误区"><a href="#exports-和-module-exports-的使用误区" class="headerlink" title="exports 和 module.exports 的使用误区"></a>exports 和 module.exports 的使用误区</h3><p>时刻谨记，require() 模块时，得到的永远是 module.exports 指向的对象：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207311612484.png"></p><blockquote><p>注意：</p><p>为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports</p></blockquote><h2 id="Node-js-中的模块化规范"><a href="#Node-js-中的模块化规范" class="headerlink" title="Node.js 中的模块化规范"></a>Node.js 中的模块化规范</h2><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖</p><ul><li>每个模块内部，module 变量代表当前模块</li><li>module 变量是一个对象，它的exports属性（即module.exports）是对外的接口</li><li>加载某个模块，其实是加载该模块的 module.exports属性。require() 方法用于加载模块</li></ul><h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li><p>Node.js 中的第三方模块又叫做包</p></li><li><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用</p><blockquote><p>Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用</p></blockquote></li><li><p>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低</p></li><li><p>包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率</p></li><li><p>包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系</p></li></ul><p><strong>使用</strong>：</p><ul><li>包查找地址： <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>包下载地址：<a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></li><li>用npm下载包，下载node的同时也将npm下载了下来，可以在终端中用<code>npm -v</code>查看npm的版本</li><li>可在官网看对应包的使用说明</li></ul><h3 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h3><p><strong>在项目中安装包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">// 简写</span><br><span class="line">npm i 完整的包名称</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入需要的包</span></span><br><span class="line"><span class="comment">// 注意：导入的名称，就是安装包时的名称</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dt = <span class="title function_">moment</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt)</span><br></pre></td></tr></table></figure><p><strong>初次装包后多了哪些文件</strong></p><p>初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件</p><ul><li><p>node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包</p></li><li><p>package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等</p><blockquote><p>注意：</p><p>程序员不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们</p></blockquote></li></ul><p><strong>安装指定版本的包</strong></p><p>默认情况下，使用 npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@2.22.2</span><br></pre></td></tr></table></figure><h3 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h3><p>npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。例如：</p><ul><li>项目的名称、版本号、描述等</li><li>项目中都用到了哪些包</li><li>哪些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ul><p><strong>快速创建package.json</strong></p><p>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格</p><p>运行 <code>npm install</code> 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中</p></blockquote><p><strong>denpendencies 节点</strong></p><p>package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包</p><p><strong>一次性安装所有的包</strong></p><p>可以运行 <code>npm install</code> 命令（或 <code>npm i</code>）一次性安装所有的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 执行命令时，npm包管理工具会先读取 package.json 中的 dependencies 节点，然后会把这些包一次性下载到项目中</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><p><strong>卸载包</strong></p><p>可以运行 <code>npm uninstall</code> 命令，来卸载指定的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用 npm uninstall 具体的包名，来卸载包</span><br><span class="line">npm uninstall moment</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。</p></blockquote><p><strong>devDependencies 节点</strong></p><ul><li>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中</li><li>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中</li></ul><p>可以使用如下的命令，将包记录到 devDependencies 节点中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装指定的包，并记录到 devDependencies 节点中</span><br><span class="line">npm i 包名 -D</span><br><span class="line">// 完整写法</span><br><span class="line">npm install 包名 --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>可以到官网看install安装说明，有–save-dev的就可以用这个方法丢devDependencies 节点里</p></blockquote><p><strong>解决下包速度慢的问题</strong></p><p>为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 将nrm安装为全局可用的工具</span><br><span class="line">npm i nrm -g</span><br><span class="line">// 查看所有可用的镜像源</span><br><span class="line">nrm ls</span><br><span class="line">// 将下包的镜像源切换为taobao 镜像</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h3><p><strong>项目包</strong></p><p>那些被安装到项目的 node_modules 目录中的包，都是项目包</p><p>项目包又分为两类，分别是：</p><ul><li>开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到）</li><li>核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -D //开发依赖包（会被记录到devDependencies节点下）</span><br><span class="line">npm i 包名     //核心依赖包（会被记录到dependencies节点下）</span><br></pre></td></tr></table></figure><p><strong>全局包</strong></p><ul><li>在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包</li><li>全局包会被安装到 C:\Users\用户目录\AppData\Roaming\npm\node_modules 目录下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -g//全局安装指定的包</span><br><span class="line">npm uninstall 包名 -g  //卸载全局安装的包</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令</p><p>判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可</p></blockquote><p><strong>i5ting_toc</strong></p><p>i5ting_toc 是一个可以把 md 文档转为 html 页面的小工具，使用步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 将 i5ting_toc 安装为全局包</span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line">// 调用 i5ting_toc 实现md转html的功能</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h3 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h3><p>一个规范的包，它的组成结构，必须符合以下3点要求：</p><ul><li>包必须以单独的目录而存在</li><li>包的顶级目录下要必须包含 package.json 这个包管理配置文件</li><li>package.json 中必须包含name，version，main这三个属性，分别代表包的名字、版本号、包的入口</li></ul><blockquote><p>注意：</p><p>以上 3 点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址：<a href="https://yarnpkg.com/zh-Hans/docs/package-json">https://yarnpkg.com/zh-Hans/docs/package-json</a></p></blockquote><h3 id="开发属于自己的包"><a href="#开发属于自己的包" class="headerlink" title="开发属于自己的包"></a>开发属于自己的包</h3><p><strong>需要实现的功能</strong></p><ul><li>格式化日期</li><li>转义 HTML 中的特殊字符</li><li>还原 HTML 中的特殊字符</li></ul><p><strong>初始化包的基本结构</strong></p><p>新建 itheima-tools 文件夹，作为包的根目录</p><p>在 itheima-tools 文件夹中，新建如下三个文件：</p><ul><li><p>package.json （包管理配置文件）</p></li><li><p>index.js          （包的入口文件）</p></li><li><p>README.md  （包的说明文档）</p></li></ul><p><strong>初始化 package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;itheima-tools-douying&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供了格式化时间、HTMLEscape相关的功能&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;itheima&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dataFormat&quot;</span><span class="punctuation">,</span> <span class="string">&quot;escape&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义格式化时间的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化时间函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">dateStr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">const</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">    <span class="keyword">const</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">    <span class="keyword">const</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补零函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">9</span> ? n : <span class="string">&#x27;0&#x27;</span> + n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露需要的成员</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义转义 HTML 的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义转义 HTML 字符的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlEscape</span>(<span class="params">htmlStr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> htmlStr.<span class="title function_">replace</span>(<span class="regexp">/&lt;|&gt;|&quot;|&amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 index.js 中定义还原 HTML 的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义还原 HTML 字符串的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">htmlUnEscape</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span>, <span class="function">(<span class="params">match</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;lt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;gt;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;quot;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&amp;amp;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将不同的功能进行模块化拆分</strong></p><ul><li>将格式化时间的功能，拆分到 src -&gt; dateFormat.js 中</li><li>将处理 HTML 字符串的功能，拆分到 src -&gt; htmlEscape.js 中</li><li>在 index.js 中，导入两个模块，得到需要向外共享的方法</li><li>在 index.js 中，使用 module.exports把对应的方法共享出去</li></ul><p><strong>编写包的说明文档</strong></p><p>包根目录中的 README.md 文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以markdown 的格式写出来，方便用户参考</p><p>README 文件中具体写什么内容，没有强制性的要求；只要能够清晰地把包的作用、用法、注意事项等描述清楚即可</p><p>我们所创建的这个包的 README.md 文档中，会包含以下 6 项内容：安装方式、导入方式、格式化时间、转义HTML 中的特殊字符、还原 HTML 中的特殊字符、开源协议</p><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><p><strong>登录</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><blockquote><p>记得使用身份验证器，需要一次性的密码</p></blockquote><p><strong>发布包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><blockquote><p>包名不能雷同</p></blockquote><p><strong>删除已发布的包</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish 包名 --force</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>npmunpublish 命令只能删除72 小时以内发布的包</p><p>npmunpublish 删除的包，在24 小时内不允许重复发布</p><p>发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包</p></blockquote><h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><p>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次</p><blockquote><p>注意：</p><p>不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</p></blockquote><h3 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a>内置模块的加载机制</h3><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高</p><h3 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a>自定义模块的加载机制</h3><ul><li><p>使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F; 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载</p></li><li><p>在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>①按照确切的文件名进行加载</p><p>②补全 .js 扩展名进行加载&#x3D;</p><p>③补全 .json 扩展名进行加载</p><p>④补全 .node 扩展名进行加载</p><p>⑤加载失败，终端报错</p></li></ul><h3 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h3><ul><li><p>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘.&#x2F;’ 或 ‘..&#x2F;’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 &#x2F;node_modules 文件夹中加载第三方模块</p></li><li><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</p></li><li><p>例如，假设在 ‘C:\Users\itheima\project\foo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找：</p><p>① C:\Users\itheima\project\node_modules\tools</p><p>② C:\Users\itheima\node_modules\tools</p><p>③ C:\Users\node_modules\tools</p><p>④ C:\node_modules\tools</p></li></ul><h3 id="目录作为模块"><a href="#目录作为模块" class="headerlink" title="目录作为模块"></a>目录作为模块</h3><p>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p>①在被加载的目录下查找一个叫做package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>②如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件</p><p>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’</p><p>例：</p><p>1.新建test文件夹，在文件夹中放 a.js，index.js 和 package.json</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312045516.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 package.json 加载了 a.js 文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加载了 index.js 文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//package.json中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./a.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.新建 test.js 并调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./17-test&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049886.png"></p><p>3.删除 package.json 再次调用test.js</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049884.png"></p><p>4.删去index.js 再次调用test.js</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207312049885.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Node.js与内置模块</title>
      <link href="/posts/26305.html"/>
      <url>/posts/26305.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识Node-js"><a href="#初识Node-js" class="headerlink" title="初识Node.js"></a>初识Node.js</h2><p><a href="https://nodejs.org/zh-cn/">Node.js中文网</a></p><blockquote><p>Node.js®is a JavaScript runtime builton Chrome’s V8 JavaScript engine</p><p>Node.js 是一个基于ChromeV8 引擎的JavaScript 运行环境</p></blockquote><p>Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和API。然而，基于 Node.js 提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位：</p><ul><li>基于 Express 框架（<a href="http://www.expressjs.com.cn/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://www.expressjs.com.cn/），可以快速构建</a> Web 应用</li><li>基于 Electron 框架（<a href="https://electronjs.org/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/），可以构建跨平台的桌面应用</a></li><li>基于 restify 框架（<a href="http://restify.com/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://restify.com/），可以快速构建</a> API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li></ul><h3 id="终端中的快捷键"><a href="#终端中的快捷键" class="headerlink" title="终端中的快捷键"></a>终端中的快捷键</h3><p>①使用 ↑键，可以快速定位到上一次执行的命令</p><p>②使用 tab键，能够快速补全路径</p><p>③使用 esc键，能够快速清空当前已输入的命令</p><p>④输入 cls命令，可以清空终端</p><h2 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h2><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><p>例如：</p><ul><li>fs.readFile()方法，用来读取指定文件中的内容</li><li>fs.writeFile()方法，用来向指定的文件中写入内容</li></ul><p>如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="fs-readFile-读取文件"><a href="#fs-readFile-读取文件" class="headerlink" title="fs.readFile() 读取文件"></a>fs.readFile() 读取文件</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><blockquote><p>path：必选参数，字符串，表示文件的路径。</p><p>options：可选参数，表示以什么编码格式来读取文件。</p><p>callback：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</p></blockquote><h3 id="fs-writeFile-写入文件"><a href="#fs-writeFile-写入文件" class="headerlink" title="fs.writeFile()写入文件"></a>fs.writeFile()写入文件</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><blockquote><p>file：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径</p><p>data：必选参数，表示要写入的内容</p><p>options：可选参数，表示以什么格式写入文件内容，默认值是 utf8</p><p>callback：必选参数，文件写入完成后的回调函数</p></blockquote><h3 id="整理成绩案例"><a href="#整理成绩案例" class="headerlink" title="整理成绩案例"></a>整理成绩案例</h3><p>原数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小红=99 小白=100 小黄=70 小黑=66 小绿=88</span><br></pre></td></tr></table></figure><p>目标处理结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小红：99</span><br><span class="line">小白：100</span><br><span class="line">小黄：70</span><br><span class="line">小黑：66</span><br><span class="line">小绿：88</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用fs.readFile()方法读取文件的内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./成绩.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否读取成功</span></span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;读取文件成功! &#x27; + dataStr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把成绩的数据，按照空格进行分割</span></span><br><span class="line">    <span class="keyword">const</span> arrOld = dataStr.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环分割后的数组，对每一项数据，进行字符串的替换操作</span></span><br><span class="line">    <span class="keyword">const</span> arrNew = []</span><br><span class="line">    arrOld.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        arrNew.<span class="title function_">push</span>(item.<span class="title function_">replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;：&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 把新数组中的每一项，进行合并，得到一个新的字符串</span></span><br><span class="line">    <span class="keyword">const</span> newStr = arrNew.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用fs.writeFile()方法，把处理好的数据，写入到新文件中</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/成绩-ok.txt&#x27;</span>, newStr, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入文件失败!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成绩成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路径动态拼接的问题-dirname"><a href="#路径动态拼接的问题-dirname" class="headerlink" title="路径动态拼接的问题__dirname"></a>路径动态拼接的问题__dirname</h3><ul><li><p>在使用 fs 模块操作文件时，如果提供的操作路径是以 .&#x2F; 或 ..&#x2F; 开头的相对路径时，很容易出现路径动态拼接错误的问题</p></li><li><p>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</p></li><li><p>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，不要提供 .&#x2F; 或 ..&#x2F; 开头的相对路径，从而防止路径动态拼接的问题</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件成功&#x27;</span> + dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><p>例如：</p><ul><li>path.join()方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li>path.basename()方法，用来从路径字符串中，将文件名解析出来</li></ul><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="path-join-路径拼接"><a href="#path-join-路径拼接" class="headerlink" title="path.join() 路径拼接"></a>path.join() 路径拼接</h3><p>使用 path.join() 方法，可以把多个路径片段拼接为完整的路径字符串</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure><blockquote><p>…paths<code>&lt;string&gt;</code> 路径片段的序列</p><p>返回值:<code>&lt;string&gt;</code></p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意： ../会抵消前面的路径</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)  <span class="comment">// \a\d\e</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>今后凡是涉及到路径拼接的操作，都要使用 path.join() 方法进行处理。不要直接使用 + 进行字符串的拼接</p></blockquote><h3 id="path-basename-获取路径中的文件名"><a href="#path-basename-获取路径中的文件名" class="headerlink" title="path.basename() 获取路径中的文件名"></a>path.basename() 获取路径中的文件名</h3><p>使用 path.basename() 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[, ext])</span><br></pre></td></tr></table></figure><blockquote><p>path：<code>&lt;string&gt;</code> 必选参数，表示文件路径</p><p>ext：<code>&lt;string&gt;</code> 可选参数，表示文件扩展名</p><p>返回：<code>&lt;string&gt;</code> 表示路径中的最后一部分</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(fullName) <span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">// index</span></span><br></pre></td></tr></table></figure><h3 id="path-extname-获取路径中的文件扩展名"><a href="#path-extname-获取路径中的文件扩展名" class="headerlink" title="path.extname() 获取路径中的文件扩展名"></a>path.extname() 获取路径中的文件扩展名</h3><p>使用 path.extname() 方法，可以获取路径中的扩展名部分</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><blockquote><p>path：<code>&lt;string&gt;</code>必选参数，表示一个路径的字符串</p><p>返回：<code>&lt;string&gt;</code> 返回得到的扩展名字符串</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务</p><p>如果要希望使用 http 模块创建 Web 服务器，则需要先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>服务器和普通电脑的区别在于，服务器上安装了 web 服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件，就能把一台普通的电脑变成一台 web 服务器</p><p>在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。因为我们可以基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务</p></blockquote><h3 id="创建基本的web服务器"><a href="#创建基本的web服务器" class="headerlink" title="创建基本的web服务器"></a>创建基本的web服务器</h3><p>①导入 http 模块</p><p>②创建 web 服务器实例</p><p>③为服务器实例绑定 request 事件，监听客户端的请求</p><p>④启动服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器绑定request事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h3><p>只要服务器接收到了客户端的请求，就会调用通过 server.on() 为服务器绑定的 request 事件处理函数。<br>如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h3><p>在服务器的 request 事件处理函数中，如果想访问与服务器相关的数据或属性，可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.url是客户端请求的url地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// req.method是客户端请求的method类型</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">    <span class="comment">// 调用res.end()方法，向客户端响应一些内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个字符串，包含中文的内容</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`您请求的URL地址是<span class="subst">$&#123;req.url&#125;</span>，请求的method类型为<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    <span class="comment">// 调用res.setHeader()方法，设置Content-Type响应头，解决中文乱码问题</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// res.end()将内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根据不同的-url-响应不同的-html-内容"><a href="#根据不同的-url-响应不同的-html-内容" class="headerlink" title="根据不同的 url 响应不同的 html 内容"></a>根据不同的 url 响应不同的 html 内容</h3><p>步骤：</p><p>①获取请求的 url 地址</p><p>②设置默认的响应内容为 404 Not found</p><p>③判断用户请求的是否为 &#x2F; 或 &#x2F;index.html首页</p><p>④判断用户请求的是否为 &#x2F;about.html 关于页面</p><p>⑤设置 Content-Type 响应头，防止中文乱码</p><p>⑥使用 res.end()把内容响应给客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的 url 地址</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="comment">// 设置默认的响应内容为 404 Not found</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 Not found&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="comment">// 判断用户请求的是否为 / 或 /index.html 首页</span></span><br><span class="line">    <span class="comment">// 判断用户请求的是否为 /about.html 关于页面</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置 Content-Type 响应头，防止中文乱码</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// 使用 res.end() 把内容响应给客户端</span></span><br><span class="line">    res.<span class="title function_">end</span>(content)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/25246.html"/>
      <url>/posts/25246.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>Git 是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理</p><blockquote><p>特点：</p><p>项目越大越复杂，协同开发者越多，越能体现出 Git 的高性能和高可用性</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Git 之所以快速和高效，主要依赖于它的如下两个特性：</p><p>① 直接记录快照，而非差异比较</p><p>② 近乎所有操作都是本地执行</p><h4 id="SVN的差异比较"><a href="#SVN的差异比较" class="headerlink" title="SVN的差异比较"></a>SVN的差异比较</h4><p>传统的版本控制系统（例如 SVN）是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步累积的差异</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291715338.png"></p><blockquote><p>好处：</p><p>节省磁盘空间</p><p>缺点：</p><p>耗时、效率低</p><p>在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p></blockquote><h4 id="Git的记录快照"><a href="#Git的记录快照" class="headerlink" title="Git的记录快照"></a>Git的记录快照</h4><p>Git 快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291717590.png"></p><blockquote><p>缺点：</p><p>占用磁盘空间较大</p><p>优点：</p><p>版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可</p><p>特点：</p><p>空间换时间</p></blockquote><h4 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a>近乎所有操作都是本地执行</h4><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不<br>需要来自网络上其它计算机的信息</p><blockquote><p>特性：</p><p>① 断网后依旧可以在本地对项目进行版本管理</p><p>② 联网后，把本地修改的记录同步到云端服务器即可</p></blockquote><h3 id="Git中的三个区域"><a href="#Git中的三个区域" class="headerlink" title="Git中的三个区域"></a>Git中的三个区域</h3><p>使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库</p><h3 id="Git中的三种状态"><a href="#Git中的三种状态" class="headerlink" title="Git中的三种状态"></a>Git中的三种状态</h3><p>已修改modified：表示修改了文件，但还没将修改的结果放到暂存区</p><p>已暂存staged：表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中</p><p>已提交committed：表示文件已经安全地保存在本地的 Git 仓库中</p><blockquote><p>注意：</p><p>工作区的文件被修改了，但还没有放到暂存区，就是已修改状态</p><p>如果文件已修改并放入暂存区，就属于已暂存状态</p><p>如果 Git 仓库中保存着特定版本的文件，就属于已提交状态</p></blockquote><h3 id="基本的Git工作流程"><a href="#基本的Git工作流程" class="headerlink" title="基本的Git工作流程"></a>基本的Git工作流程</h3><p>基本的 Git 工作流程如下：</p><p>① 在工作区中修改文件</p><p>② 将你想要下次提交的更改进行暂存</p><p>③ 提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291853943.png"></p><h3 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h3><h4 id="获取Git仓库的两种方式"><a href="#获取Git仓库的两种方式" class="headerlink" title="获取Git仓库的两种方式"></a>获取Git仓库的两种方式</h4><p>① 将尚未进行版本控制的本地目录转换为 Git 仓库</p><p>② 从其它服务器克隆一个已存在的 Git 仓库</p><h4 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h4><p>如果自己有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，需要执行如下两个步骤：</p><p>① 在项目目录中，通过鼠标右键打开“Git Bash”</p><p>② 执行<code>git init</code>命令将当前的目录转化为 Git 仓库</p><blockquote><p><code>git init</code>命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分</p></blockquote><h4 id="工作区中文件的-4-种状态"><a href="#工作区中文件的-4-种状态" class="headerlink" title="工作区中文件的 4 种状态"></a>工作区中文件的 4 种状态</h4><p>工作区中的每一个文件可能有 4 种状态，这四种状态共分为两大类，如图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291904605.png"></p><blockquote><p>Git 操作的终极结果：让工作区中的文件都处于“未修改”的状态</p></blockquote><h4 id="检查文件的状态"><a href="#检查文件的状态" class="headerlink" title="检查文件的状态"></a>检查文件的状态</h4><p>可以使用<code>git status</code>命令查看文件处于什么状态，例如：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291911161.png"></p><blockquote><p>在状态报告中可以看到新建的所有文件出现在 Untracked files（未跟踪的文件）下面<br>未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非明确地告诉它“我需要使用 Git 跟踪管理该文件”</p></blockquote><h4 id="以精简的方式显示文件状态"><a href="#以精简的方式显示文件状态" class="headerlink" title="以精简的方式显示文件状态"></a>以精简的方式显示文件状态</h4><p>使用<code>git status</code>输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下两条完全等价的命令，其中 -s 是 –short 的简写形式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br><span class="line">git status --short</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291913465.png"></p><blockquote><p>未跟踪文件前面有红色的 ?? 标记</p></blockquote><h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><p>使用命令 <code>git add</code> 开始跟踪一个文件。 所以，要跟踪 index.html 文件，运行如下的命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br></pre></td></tr></table></figure><p>此时再运行 <code>git status</code> 命令，会看到 index.html 文件在 Changes to be committed 这行的下面，说明已被跟踪，并处于暂存状态：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291915810.png"></p><p>以精简的方式显示文件的状态:</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291915154.png"></p><blockquote><p>新添加到暂存区中的文件前面有绿色的 A 标</p></blockquote><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>现在暂存区中有一个 index.html 文件等待被提交到 Git 仓库中进行保存。可以执行 <code>git commit</code> 命令进行提交,其中 -m 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;新建了index.html文件&quot;</span><br></pre></td></tr></table></figure><p>提交成功之后，会显示如下的信息：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291919170.png"></p><p>提交成功之后，再次检查文件的状态，得到提示如下：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291919171.png"></p><blockquote><p>证明工作区中所有的文件都处于“未修改”的状态，没有任何文件需要被提交</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291920374.png"></p><h4 id="对已提交的文件进行修改"><a href="#对已提交的文件进行修改" class="headerlink" title="对已提交的文件进行修改"></a>对已提交的文件进行修改</h4><p>目前，所有文件已经被 Git 跟踪，并且工作区和 Git 仓库中的 所有文件内容保持一致。当我们修改了工作区中 index.html 的内容之后，再次运行 <code>git status</code> 和 <code>git status -s</code> 命令，会看到如下的内容：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291923487.png"></p><blockquote><p>文件 index.html 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区</p><p>注意：修改过的、没有放入暂存区的文件前面有红色的 M 标记</p></blockquote><h4 id="暂存已修改的文件"><a href="#暂存已修改的文件" class="headerlink" title="暂存已修改的文件"></a>暂存已修改的文件</h4><p>目前，工作区中的 index.html 文件已被修改，如果要暂存这次修改，需要再次运行 <code>git add</code> 命令，这个命令是个多功能的命令，主要有如下 3 个功效：</p><p>① 可以用它开始跟踪新文件</p><p>② 把已跟踪的、且已修改的文件放到暂存区</p><p>③ 把有冲突的文件标记为已解决状态</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291925938.png"></p><h4 id="提交已暂存的文件"><a href="#提交已暂存的文件" class="headerlink" title="提交已暂存的文件"></a>提交已暂存的文件</h4><p>再次运行 <code>git commit -m &quot;提交消息&quot;</code> 命令，即可将暂存区中记录的 index.html 的快照，提交到 Git 仓库中进行保存：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291929543.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291930248.png"></p><h4 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h4><p>撤销对文件的修改指的是：把对工作区中对应文件的修改，还原成 Git 仓库中所保存的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- index.html</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291932354.png"></p><blockquote><p>操作的结果：所有的修改会丢失，且无法恢复！危险性比较高，请慎重操作！</p><p>撤销操作的本质：用 Git 仓库中保存的文件，覆盖工作区中指定的文件</p></blockquote><h4 id="向暂存区中一次性添加多个文件"><a href="#向暂存区中一次性添加多个文件" class="headerlink" title="向暂存区中一次性添加多个文件"></a>向暂存区中一次性添加多个文件</h4><p>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><blockquote><p>今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区</p></blockquote><h4 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h4><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 要移除的文件名称</span><br></pre></td></tr></table></figure><h4 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h4><p>Git 标准的工作流程是工作区 → 暂存区 → Git 仓库，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了工作区 → Git 仓库</p><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure><h4 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h4><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中同时移除对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> # 从Git仓库和工作区中同时移除文件</span><br><span class="line">git rm -f index.html</span><br><span class="line"># 只从Git仓库中移除文件, 保留工作区中的文件</span><br><span class="line">git rm --cached index.html</span><br></pre></td></tr></table></figure><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式</p><p>文件 .gitignore 的格式规范如下：</p><p>① 以 # 开头的是注释</p><p>② 以 &#x2F; 结尾的是目录</p><p>③ 以 &#x2F; 开头防止递归</p><p>④ 以 ! 开头表示取反</p><p>⑤ 可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><h4 id="glob-模式"><a href="#glob-模式" class="headerlink" title="glob 模式"></a>glob 模式</h4><p>所谓的 glob 模式是指简化了的正则表达式：</p><p>① 星号 * 匹配零个或多个任意字符</p><p>② [abc] 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）</p><p>③ 问号 ? 只匹配一个任意字符</p><p>④ 在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</p><p>⑤ 两个星号 ** 表示匹配任意中间目录（比如 a&#x2F;**&#x2F;z 可以匹配 a&#x2F;z 、a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等）</p><h4 id="gitignore-文件的例子"><a href="#gitignore-文件的例子" class="headerlink" title=".gitignore 文件的例子"></a>.gitignore 文件的例子</h4><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207291955214.png"></p><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>如果希望回顾项目的提交历史，可以使用<code>git log</code>这个简单且有效的命令</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292000999.png"></p><h4 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h4><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292003753.png"></p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发，例如：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292025669.png"></p><h3 id="master-主分支"><a href="#master-主分支" class="headerlink" title="master 主分支"></a>master 主分支</h3><p>在初始化本地 Git 仓库的时候，Git 默认已经帮我们创建了一个名字叫做 master 的分支。通常我们把这个master 分支叫做主分支、</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292025669.png"></p><blockquote><p>在实际工作中，master 主分支的作用是：用来保存和记录整个项目已完成的功能代码</p><p>因此，不允许程序员直接在 master 分支上修改代码，因为这样做的风险太高，容易导致整个项目崩溃</p></blockquote><h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p>由于程序员不能直接在 master 分支上进行功能的开发，所以就有了功能分支的概念。</p><p>功能分支指的是专门用来开发新功能的分支，它是临时从 master 主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到 master 主分支上，如图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292028078.png"></p><h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><p>使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292030792.png"></p><blockquote><p>注意：</p><p>分支名字前面的 * 号表示当前所处的分支</p></blockquote><h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><p>使用如下的命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292031947.png"></p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>使用如下的命令，可以切换到指定的分支上进行开发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292032823.png"></p><h3 id="分支的快速创建和切换"><a href="#分支的快速创建和切换" class="headerlink" title="分支的快速创建和切换"></a>分支的快速创建和切换</h3><p>使用如下的命令，可以创建指定名称的新分支，并立即切换到新分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -b 表示创建一个新分支</span><br><span class="line"># checkout 表示切换到刚才新建的分支上</span><br><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292034450.png"></p><blockquote><p>注意：<br>“git checkout -b 分支名称” 是下面两条命令的简写形式：</p><p>① git branch 分支名称</p><p>② git checkout 分支名称</p></blockquote><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"># 在master分支上运行git merge 命令 将login 分支的代码合并到master分支</span><br><span class="line">git merge login</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292036430.png"></p><blockquote><p>合并分支时的注意点：</p><p>假设要把 C 分支的代码合并到 A 分支，则必须先切换到 A 分支上，再运行 git merge 命令，来合并 C 分支！</p></blockquote><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292039522.png"></p><h3 id="遇到冲突时的分支合并"><a href="#遇到冲突时的分支合并" class="headerlink" title="遇到冲突时的分支合并"></a>遇到冲突时的分支合并</h3><p>如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开这些包含冲突的文件然后手动解决冲突</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207292041436.png"></p><h3 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h3><p>如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span><br><span class="line">git push -u 远程仓库的别名 本地分支名称:远程分支名称</span><br><span class="line"></span><br><span class="line"># 案例：</span><br><span class="line">git push -u origin payment:pay</span><br><span class="line"></span><br><span class="line"># 如果希望远程分支的名称和本地分支名称保存一致，可以队命令进行简化</span><br><span class="line">git push -u origin payment</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>第一次推送分支需要带 -u 参数，此后可以直接使用 git push 推送代码到远程分支</p></blockquote><h3 id="查看远程仓库中所有的分支列表"><a href="#查看远程仓库中所有的分支列表" class="headerlink" title="查看远程仓库中所有的分支列表"></a>查看远程仓库中所有的分支列表</h3><p> 通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  从远程仓库中，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同</span><br><span class="line">git checkout 远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git checkout pay</span><br><span class="line"></span><br><span class="line"># 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名</span><br><span class="line">git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git checkout -b payment origin/pay</span><br></pre></td></tr></table></figure><h3 id="拉取远程分支的最新的代码"><a href="#拉取远程分支的最新的代码" class="headerlink" title="拉取远程分支的最新的代码"></a>拉取远程分支的最新的代码</h3><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从远程仓库拉去当前分支最新的代码，保存当前分支的代码和远程分支代码一致</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除远程仓库中指定名称的远程分支</span><br><span class="line">git push 远程仓库名称 --delete 远程分支名称</span><br><span class="line"></span><br><span class="line"># 示例：</span><br><span class="line">git push origin --delete pay</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域与JSONP以及HTTP协议加强</title>
      <link href="/posts/23558.html"/>
      <url>/posts/23558.html</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能</p><p>MDN 官方给定的概念：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制</p><blockquote><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>①无法读取非同源网页的Cookie、LocalStorage 和 IndexedDB</p><p>②无法接触非同源网页的DOM</p><p>③无法向非同源地址发送Ajax 请求</p></blockquote><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源</p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的同源检测：</p><table><thead><tr><th align="center">URL</th><th align="center">是否同源</th><th align="center">原因</th></tr></thead><tbody><tr><td align="center"><a href="http://www.test.com/other.html">http://www.test.com/other.html</a></td><td align="center">是</td><td align="center">同源（协议、域名、端口相同）</td></tr><tr><td align="center"><a href="https://www.test.com/about.html">https://www.test.com/about.html</a></td><td align="center">否</td><td align="center">协议不同（http  与  https）</td></tr><tr><td align="center"><a href="http://blog.test.com/movie.html">http://blog.test.com/movie.html</a></td><td align="center">否</td><td align="center">域名不同（<a href="http://www.test.com/">www.test.com</a> 与 blog.test.com）</td></tr><tr><td align="center"><a href="http://www.test.com:7001/home.html">http://www.test.com:7001/home.html</a></td><td align="center">否</td><td align="center">端口不同（默认的  80 端口与  7001 端口）</td></tr><tr><td align="center"><a href="http://www.test.com/main.html">http://www.test.com:80/main.html</a></td><td align="center">是</td><td align="center">同源（协议、域名、端口相同）</td></tr></tbody></table><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域</p><blockquote><p>出现跨域的根本原因：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互</p><p>网页：<a href="http://www.test.com/index.html">http://www.test.com/index.html</a></p><p>接口：<a href="http://www.api.com/userlist">http://www.api.com/userlist</a></p></blockquote><h3 id="浏览器对跨域请求的拦截"><a href="#浏览器对跨域请求的拦截" class="headerlink" title="浏览器对跨域请求的拦截"></a>浏览器对跨域请求的拦截</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207281651510.png"></p><blockquote><p>注意：</p><p>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p></blockquote><h3 id="如何实现跨域数据请求"><a href="#如何实现跨域数据请求" class="headerlink" title="如何实现跨域数据请求"></a>如何实现跨域数据请求</h3><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code></p><p>JSONP：出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持 GET 请求，不支持 POST 请求</p><p>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>JSONP (JSON with Padding) 是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。<br>因此，JSONP 的实现原理，就是通过<code> &lt;script&gt;</code> 标签的 src 属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据</p><h3 id="自己实现一个简单的JSONP"><a href="#自己实现一个简单的JSONP" class="headerlink" title="自己实现一个简单的JSONP"></a>自己实现一个简单的JSONP</h3><p>定义一个success回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JSONP响应回来的数据是：&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过 script标签，请求接口数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://www.liulongbin.top:3006/api/jsonp?callback=success&amp;name=ls&amp;age=20&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JSONP的缺点"><a href="#JSONP的缺点" class="headerlink" title="JSONP的缺点"></a>JSONP的缺点</h3><p>由于 JSONP 是通过 <code>&lt;script&gt;</code> 标签的 src 属性，来实现跨域数据获取的，所以，JSONP 只支持 GET 数据请求，不支持 POST 请求。</p><blockquote><p>注意：</p><p>JSONP 和 Ajax 之间没有任何关系，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象</p></blockquote><h3 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a>jQuery中的JSONP</h3><p>jQuery 提供的 $.ajax() 函数，除了可以发起真正的 Ajax 数据请求之外，还能够发起 JSONP 数据请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 代表发起JSONP的请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 callback&#x3D;jQueryxxx 的参数，jQueryxxx 是随机生成的一个回调函数名称</p></blockquote><h3 id="自定义参数及回调函数名称"><a href="#自定义参数及回调函数名称" class="headerlink" title="自定义参数及回调函数名称"></a>自定义参数及回调函数名称</h3><p>在使用 jQuery 发起 JSONP 请求时，如果想要自定义 JSONP 的参数以及回调函数名称，可以通过如下两个参数来指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 代表发起JSONP的请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送到服务端的参数名称，默认为callback</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">    <span class="comment">// 自定义的回调函数名称，默认为jQueryxxx的格式</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery中JSONP的实现过程"><a href="#jQuery中JSONP的实现过程" class="headerlink" title="jQuery中JSONP的实现过程"></a>jQuery中JSONP的实现过程</h3><p>jQuery 中的 JSONP，也是通过 <code>&lt;script&gt;</code>标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是动态创建和移除 <code>&lt;script&gt;</code> 标签的方式，来发起 JSONP 数据请求</p><blockquote><p>在发起 JSONP 请求的时候，动态向<code>&lt;header&gt;</code>中append一个<code>&lt;script&gt;</code>标签</p><p>l在 JSONP 请求成功以后，动态从<code>&lt;header&gt;</code>中移除刚才append进去的<code>&lt;script&gt;</code>标签</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp?address=浙江&amp;location=丽水&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">        <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>防抖策略（debounce）是当事件被触发后，延迟 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时</p><h4 id="防抖的应用场景"><a href="#防抖的应用场景" class="headerlink" title="防抖的应用场景"></a>防抖的应用场景</h4><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>节流策略（throttle），顾名思义，可以减少一段时间内事件的触发频率</p><h4 id="节流的应用场景"><a href="#节流的应用场景" class="headerlink" title="节流的应用场景"></a>节流的应用场景</h4><p>①鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次</p><p>②懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费CPU资源</p><h4 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h4><p>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作<br>当前操作执行完，必须将节流阀重置为空，表示可以执行下次操作了<br>每次执行操作前，必须先判断节流阀是否为空</p><blockquote><p>高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用<br>假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用<br>上一个人使用完毕后，需要将红灯重置为绿灯，表示下一个人可以使用卫生间<br>下一个人在上卫生间之前，需要先判断控制灯是否为绿色，来知晓能否上卫生间。</p></blockquote><h3 id="防抖和节流的区别"><a href="#防抖和节流的区别" class="headerlink" title="防抖和节流的区别"></a>防抖和节流的区别</h3><p>防抖：如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略<br>节流：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP 协议即超文本传送协议 (HyperText Transfer Protocol) ，它规定了客户端与服务器之间进行网页内容传输时，所必须遵守的传输格式</p><blockquote><p>客户端要以HTTP协议要求的格式把数据提交到服务器</p><p>服务器要以HTTP协议要求的格式把内容响应给客户端</p></blockquote><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>就是信息的传递和交换</p><blockquote><p>通信三要素：主体、内容、方式</p></blockquote><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>通信协议（Communication Protocol）是指通信的双方完成通信所必须遵守的规则和约定</p><blockquote><p>通俗的理解：</p><p>通信双方采用约定好的格式来发送和接收消息，这种事先约定好的通信格式，就叫做通信协议</p></blockquote><h2 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h2><p>由于 HTTP 协议属于客户端浏览器和服务器之间的通信协议。因此，客户端发起的请求叫做 HTTP 请求，客户端发送到服务器的消息，叫做 HTTP 请求消息</p><blockquote><p>注意：</p><p>HTTP 请求消息又叫做 HTTP 请求报文</p></blockquote><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>HTTP 请求消息由请求行（request line）、请求头部（ header ） 、空行 和 请求体 4 个部分组成</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282123894.png"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行由请求方式、URL 和 HTTP 协议版本 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282125845.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282125324.png"></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>请求头部用来描述客户端的基本信息，从而把客户端相关的信息告知服务器</p><p>请求头部由多行 键&#x2F;值对 组成，每行的键和值之间用英文的冒号分隔</p><blockquote><p>比如：</p><p>User-Agent 用来说明当前是什么类型的浏览器</p><p>Content-Type 用来描述发送到服务器的数据格式</p><p>Accept 用来描述客户端能够接收什么类型的返回内容</p><p>Accept-Language 用来描述客户端期望接收哪种人类语言的文本内容</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282129478.png"></p><table><thead><tr><th align="center">头部字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Host</td><td align="center">要请求的服务器域名</td></tr><tr><td align="center">Connection</td><td align="center">客户端与服务器的连接方式(close  或  keepalive)</td></tr><tr><td align="center">Content-Length</td><td align="center">用来描述请求体的大小</td></tr><tr><td align="center">Accept</td><td align="center">客户端可识别的响应内容类型列表</td></tr><tr><td align="center">User-Agent</td><td align="center">产生请求的浏览器类型</td></tr><tr><td align="center">Content-Type</td><td align="center">客户端告诉服务器实际发送的数据类型</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">客户端可接收的内容压缩编码形式</td></tr><tr><td align="center">Accept-Language</td><td align="center">用户期望获得的自然语言的优先顺序</td></tr></tbody></table><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282131186.png"></p><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>最后一个请求头字段的后面是一个空行，通知服务器请求头部至此结束</p><p>请求消息中的空行，用来分隔请求头部与请求体</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282132091.png"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体中存放的，是要通过 POST 方式提交到服务器的数据</p><blockquote><p>注意：</p><p>只有 POST 请求才有请求体，GET 请求没有请求体！</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282133146.png"></p><h2 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h2><p>响应消息就是服务器响应给客户端的消息内容，也叫作响应报文</p><h3 id="组成部分-1"><a href="#组成部分-1" class="headerlink" title="组成部分"></a>组成部分</h3><p>HTTP响应消息由状态行、响应头部、空行 和 响应体 4 个部分组成</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282138488.png"></p><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282140136.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282140137.png"></p><h4 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h4><p>响应头部用来描述服务器的基本信息。响应头部由多行 键&#x2F;值对 组成，每行的键和值之间用英文的冒号分隔</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282141607.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282141608.png"></p><h4 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h4><p>在最后一个响应头部字段结束之后，会紧跟一个空行，用来通知客户端响应头部至此结束</p><p>响应消息中的空行，用来分隔响应头部与响应体</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143562.png"></p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>响应体中存放的，是服务器响应给客户端的资源内容</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143563.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282143525.png"></p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明要对服务器上的资源执行的操作。最常用的请求方法是 GET 和 POST</p><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">GET</td><td align="center">(查询)发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td align="center">2</td><td align="center">POST</td><td align="center">(新增)向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td align="center">3</td><td align="center">PUT</td><td align="center">(修改)向服务器提交资源，并使用提交的新资源，替换掉服务器对应的旧资源。</td></tr><tr><td align="center">4</td><td align="center">DELETE</td><td align="center">(删除)请求服务器删除指定的资源。</td></tr><tr><td align="center">5</td><td align="center">HEAD</td><td align="center">HEAD  方法请求一个与 GET 请求的响应相同的响应，但没有响应体。</td></tr><tr><td align="center">6</td><td align="center">OPTIONS</td><td align="center">获取http服务器支持的http请求方法，允许客户端查看服务器的性能，比如ajax跨域时的预检等。</td></tr><tr><td align="center">7</td><td align="center">CONNECT</td><td align="center">建立一个到由目标资源标识的服务器的隧道。</td></tr><tr><td align="center">8</td><td align="center">TRACE</td><td align="center">沿着到目标资源的路径执行一个消息环回测试，主要用于测试或诊断。</td></tr><tr><td align="center">9</td><td align="center">PATCH</td><td align="center">是对  PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h2><p>HTTP 响应状态码（HTTP Status Code），也属于 HTTP 协议的一部分，用来标识响应的状态</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207282148245.png"></p><h3 id="组成和分类"><a href="#组成和分类" class="headerlink" title="组成和分类"></a>组成和分类</h3><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字用来对状态码进行细分</p><table><thead><tr><th align="center">分类</th><th align="center">分类描述</th></tr></thead><tbody><tr><td align="center">1**</td><td align="center">信息，服务器收到请求，需要请求者继续执行操作（实际开发中很少遇到  1**  类型的状态码）</td></tr><tr><td align="center">2**</td><td align="center">成功，操作被成功接收并处理</td></tr><tr><td align="center">3**</td><td align="center">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="center">4**</td><td align="center">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="center">5**</td><td align="center">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h4 id="2-成功相关的响应状态码"><a href="#2-成功相关的响应状态码" class="headerlink" title="2** 成功相关的响应状态码"></a>2** 成功相关的响应状态码</h4><p>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">OK</td><td align="center">请求成功。一般用于  GET 与 POST  请求</td></tr><tr><td align="center">201</td><td align="center">Created</td><td align="center">已创建。成功请求并创建了新的资源，通常用于  POST 或 PUT  请求</td></tr></tbody></table><h4 id="3-重定向相关的响应状态码"><a href="#3-重定向相关的响应状态码" class="headerlink" title="3** 重定向相关的响应状态码"></a>3** 重定向相关的响应状态码</h4><p>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">301</td><td align="center">Moved  Permanently</td><td align="center">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="center">302</td><td align="center">Found</td><td align="center">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="center">304</td><td align="center">Not  Modified</td><td align="center">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table><h4 id="4-客户端错误相关的响应状态码"><a href="#4-客户端错误相关的响应状态码" class="headerlink" title="4** 客户端错误相关的响应状态码"></a>4** 客户端错误相关的响应状态码</h4><p>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">400</td><td align="center">Bad  Request</td><td align="center">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。  2、请求参数有误。</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="center">当前请求需要用户验证。</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="center">服务器已经理解请求，但是拒绝执行它。</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="center">服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td align="center">408</td><td align="center">Request  Timeout</td><td align="center">请求超时。服务器等待客户端发送的请求时间过长，超时。</td></tr></tbody></table><h4 id="5-服务端错误相关的响应状态码"><a href="#5-服务端错误相关的响应状态码" class="headerlink" title="5** 服务端错误相关的响应状态码"></a>5** 服务端错误相关的响应状态码</h4><p>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下：</p><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">500</td><td align="center">Internal  Server Error</td><td align="center">服务器内部错误，无法完成请求。</td></tr><tr><td align="center">501</td><td align="center">Not  Implemented</td><td align="center">服务器不支持该请求方法，无法完成请求。只有  GET 和 HEAD  请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返回501</td></tr><tr><td align="center">503</td><td align="center">Service  Unavailable</td><td align="center">由于超载或系统维护，服务器暂时的无法处理客户端的请求。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加强</title>
      <link href="/posts/57185.html"/>
      <url>/posts/57185.html</url>
      
        <content type="html"><![CDATA[<h2 id="XMLHttpRequest的基本使用"><a href="#XMLHttpRequest的基本使用" class="headerlink" title="XMLHttpRequest的基本使用"></a>XMLHttpRequest的基本使用</h2><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的</p><h3 id="使用xhr发起GET请求"><a href="#使用xhr发起GET请求" class="headerlink" title="使用xhr发起GET请求"></a>使用xhr发起GET请求</h3><p>步骤：</p><p>①创建 xhr 对象</p><p>②调用 xhr.open() 函数</p><p>③调用 xhr.send() 函数</p><p>④监听 xhr.onreadystatechange 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 调用open函数 指定请求方式和URL地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用send函数 发起Ajax请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 监听onreadystatechange事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务器响应的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xhr对象的readyState属性"><a href="#xhr对象的readyState属性" class="headerlink" title="xhr对象的readyState属性"></a>xhr对象的readyState属性</h3><p>XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：</p><table><thead><tr><th align="center">值</th><th align="center">状态</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSENT</td><td align="center">XMLHttpRequest  对象已被创建，但尚未调用  open方法。</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">open() 方法已经被调用。</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">数据接收中，此时  response  属性中已经包含部分数据。</td></tr><tr><td align="center">4</td><td align="center">DONE</td><td align="center">Ajax  请求完成，这意味着数据传输已经彻底完成或失败。</td></tr></tbody></table><h3 id="使用xhr发起带参数的GET请求"><a href="#使用xhr发起带参数的GET请求" class="headerlink" title="使用xhr发起带参数的GET请求"></a>使用xhr发起带参数的GET请求</h3><p>使用 xhr 对象发起带参数的 GET 请求时，只需在调用 xhr.open 期间，为 URL 地址指定参数即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...省略不必要的代码 同上</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)</span><br><span class="line"><span class="comment">// ...省略不必要的代码 同上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这种在 URL 地址后面拼接的参数，叫做查询字符串</p></blockquote><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）</p><blockquote><p>格式：将英文的 ? 放在URL 的末尾，然后再加上 参数＝值 ，想加上多个参数的话，使用 &amp; 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks</span></span><br><span class="line"><span class="comment">// 带一个参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks?id=1</span></span><br><span class="line"><span class="comment">// 带两个参数的 URL 地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.liulongbin.top:3006/api/getbooks?id=1&amp;bookname=西游记</span></span><br></pre></td></tr></table></figure><h4 id="GET请求携带参数的本质"><a href="#GET请求携带参数的本质" class="headerlink" title="GET请求携带参数的本质"></a>GET请求携带参数的本质</h4><p>无论使用<code>$.ajax()</code>，还是使用 <code>$.get()</code>，又或者直接使用 xhr 对象发起 GET 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br></pre></td></tr></table></figure><h3 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h3><p>URL 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 URL 地址中不允许出现中文字符<br>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行编码（转义）</p><blockquote><p>URL编码的原则：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符<br>URL编码原则的通俗理解：使用英文字符去表示非英文字符</p></blockquote><h4 id="如何对URL进行编码与解码"><a href="#如何对URL进行编码与解码" class="headerlink" title="如何对URL进行编码与解码"></a>如何对URL进行编码与解码</h4><p>浏览器提供了URL编码与解码的API，分别是：</p><p>encodeURI()  编码的函数</p><p>decodeURI()  解码的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">encodeURI</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br><span class="line"><span class="comment">// 输出字符串  %E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="built_in">decodeURI</span>(<span class="string">&#x27;%E9%BB%91%E9%A9%AC&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3)</span><br><span class="line"><span class="comment">// 输出字符串  黑马</span></span><br></pre></td></tr></table></figure><blockquote><p>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码与解码操作</p></blockquote><h3 id="使用xhr发起POST请求"><a href="#使用xhr发起POST请求" class="headerlink" title="使用xhr发起POST请求"></a>使用xhr发起POST请求</h3><p>步骤：</p><p>①创建 xhr 对象</p><p>②调用 xhr.open() 函数</p><p>③设置 Content-Type 属性（固定写法）</p><p>④调用 xhr.send() 函数，同时指定要发送的数据</p><p>⑤监听 xhr.onreadystatechange 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用open函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Content-Type属性</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用send函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=海底三万里&amp;author=不知道&amp;publisher=浙江图书出版社&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><p>数据交换格式，就是服务器端与客户端之间进行数据传输与交换的格式</p><blockquote><p>前端领域，经常提及的两种数据交换格式分别是 XML 和 JSON。其中 XML 用的非常少，所以，我们重点要学习的数据交换格式就是 JSON</p></blockquote><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>XML 的英文全称是 EXtensible Markup Language，即可扩展标记语言。因此，XML 和 HTML 类似，也是一种标记语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>ls<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>zs<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>通知<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>晚上开会<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>缺点：</p><p>XML 格式臃肿，和数据无关的代码多，体积大，传输效率低</p><p>在 Javascript中解析XML比较麻烦</p></blockquote><blockquote><p>HTML和XML的区别：</p><p>XML和HTML虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><p>HTML 被设计用来描述网页上的内容，是网页内容的载体</p><p>XML 被设计用来传输和存储数据，是数据的载体</p></blockquote><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”，简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串</p><blockquote><p>作用：</p><p>JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、更快、更易解析</p></blockquote><blockquote><p>JSON语法注意事项</p><p>①属性名必须使用双引号包裹</p><p>②字符串类型的值必须使用双引号包裹</p><p>③JSON 中不允许使用单引号表示字符串</p><p>④JSON 中不能写注释</p><p>⑤JSON 的最外层必须是对象或数组格式</p><p>⑥不能使用 undefined或函数作为JSON的值</p><p>JSON 的作用：在计算机与网络之间存储和传输数据。</p><p>JSON 的本质：用字符串来表示Javascript对象数据或数组数据</p></blockquote><h4 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h4><p>对象结构在 JSON 中表示为 { } 括起来的内容。数据结构为 { key: value, key: value, … } 的键值对结构。其中，key 必须是使用英文的双引号包裹的字符串，value 的数据类型可以是数字、字符串、布尔值、null、数组、对象6种类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;打豆豆&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h4><p>数组结构在 JSON 中表示为 [ ] 括起来的内容。数据结构为 [ “java”, “javascript”, 30, true … ] 。数组中数据的类型可以是数字、字符串、布尔值、null、数组、对象6种类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;php&quot;</span> ]</span><br><span class="line">[ <span class="number">100</span>, <span class="number">200</span>, <span class="number">300.5</span> ]</span><br><span class="line">[ <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span> ]</span><br><span class="line">[ &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;, &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125; ]</span><br><span class="line">[ [ <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;榴莲&quot;</span>, <span class="string">&quot;椰子&quot;</span> ], [ <span class="number">4</span>, <span class="number">50</span>, <span class="number">5</span> ] ]</span><br></pre></td></tr></table></figure><h4 id="JSON和JS对象的关系"><a href="#JSON和JS对象的关系" class="headerlink" title="JSON和JS对象的关系"></a>JSON和JS对象的关系</h4><p>JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><p>JSON和JS对象的互转</p><p>要实现从 JSON 字符串转换为 JS 对象，使用 JSON.parse() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;world&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">// 结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从 JS 对象转换为 JSON 字符串，使用 JSON.stringify() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="comment">// 结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4><p>把数据对象转换为字符串的过程，叫做序列化，例如：调用 JSON.stringify() 函数的操作，叫做 JSON 序列化</p><p>把字符串转换为数据对象的过程，叫做反序列化，例如：调用JSON.parse()函数的操作，叫做JSON反序列化</p><h2 id="封装自己的Ajax函数"><a href="#封装自己的Ajax函数" class="headerlink" title="封装自己的Ajax函数"></a>封装自己的Ajax函数</h2><h3 id="定义options参数选项"><a href="#定义options参数选项" class="headerlink" title="定义options参数选项"></a>定义options参数选项</h3><p>itheima() 函数是我们自定义的 Ajax 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性</p><p>method   请求的类型</p><p>url           请求的URL地址</p><p>data        请求携带的数据</p><p>success   请求成功之后的回调函数</p><h3 id="处理data参数"><a href="#处理data参数" class="headerlink" title="处理data参数"></a>处理data参数</h3><p>需要把 data 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 resolveData 函数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = k + <span class="string">&#x27;=&#x27;</span> + data[k]</span><br><span class="line">        arr.<span class="title function_">push</span>(str) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">resolveData</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="定义itheima函数"><a href="#定义itheima函数" class="headerlink" title="定义itheima函数"></a>定义itheima函数</h3><p>在 itheima() 函数中，需要创建 xhr 对象，并监听onreadystatechange 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">itheima</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把外界传入的data转换成 查询字符串</span></span><br><span class="line">    <span class="keyword">let</span> qs = <span class="title function_">resolveData</span>(options.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            options.<span class="title function_">success</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断请求类型"><a href="#判断请求类型" class="headerlink" title="判断请求类型"></a>判断请求类型</h3><p>不同的请求类型，对应 xhr 对象的不同操作，因此需要对请求类型进行 if … else … 的判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 发起GET请求</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + qs)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 发起POST请求</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span>)</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>(qs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h2><p>旧版XMLHttpRequest 的缺点</p><blockquote><p>①只支持文本数据的传输，无法用来读取和上传文件</p><p>②传送和接收数据时，没有进度信息，只能提示有没有完成</p></blockquote><p>XMLHttpRequest Level2的新功能</p><blockquote><p>①可以设置 HTTP 请求的时限</p><p>②可以使用 FormData对象管理表单数据</p><p>③可以上传文件</p><p>④可以获得数据传输的进度信息</p></blockquote><h3 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置HTTP请求时限</h3><p>有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个 timeout 事件，用来指定回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请求超时！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FormData对象管理表单数据"><a href="#FormData对象管理表单数据" class="headerlink" title="FormData对象管理表单数据"></a>FormData对象管理表单数据</h3><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，HTML5 新增了一个 FormData 对象，可以模拟表单操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 调用append函数，向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FormData对象也可以用来获取网页表单的值，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 调用append函数，向fd中追加数据</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>新版 XMLHttpRequest 对象，不仅可以发送文本信息，还可以上传文件</p><p>步骤：</p><p>①定义 UI结构</p><p>②验证是否选择了文件</p><p>③向 FormData中追加文件</p><p>④使用 xhr发起上传文件的请求</p><p>⑤监听 onreadystatechange事件</p><h4 id="定义UI结构"><a href="#定义UI结构" class="headerlink" title="定义UI结构"></a>定义UI结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件的按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- img标签，来显示上传成功以后的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证是否选择了文件"><a href="#验证是否选择了文件" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证上传文件按钮</span></span><br><span class="line"><span class="keyword">let</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>)</span><br><span class="line"><span class="comment">// 给按钮添加click事件监听</span></span><br><span class="line">btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取用户选择的文件列表</span></span><br><span class="line">    <span class="keyword">let</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span></span><br><span class="line">    <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择要上传的文件&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="向FormData中追加文件"><a href="#向FormData中追加文件" class="headerlink" title="向FormData中追加文件"></a>向FormData中追加文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向FormData中追加文件</span></span><br><span class="line"><span class="comment">// 创建FormData 对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 将用户选择的文件添加到FormData中</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="使用-xhr-发起上传文件的请求"><a href="#使用-xhr-发起上传文件的请求" class="headerlink" title="使用 xhr 发起上传文件的请求"></a>使用 xhr 发起上传文件的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 调用open函数 指定请求类型和url地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>)</span><br><span class="line"><span class="comment">// 发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><h4 id="监听onreadystatechange事件"><a href="#监听onreadystatechange事件" class="headerlink" title="监听onreadystatechange事件"></a>监听onreadystatechange事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 上传成功</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 上传失败</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h3><p>新版本的 XMLHttpRequest 对象中，可以通过监听 xhr.upload.onprogress 事件，来获取到文件的上传进度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文件上传进度</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算出上传进度</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(percentComplete)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入需要的库"><a href="#导入需要的库" class="headerlink" title="导入需要的库"></a>导入需要的库</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于Bootstrap渲染进度条"><a href="#基于Bootstrap渲染进度条" class="headerlink" title="基于Bootstrap渲染进度条"></a>基于Bootstrap渲染进度条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bootstrap中的进度条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 15px 10px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50%&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span>&gt;</span></span><br><span class="line">      50%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="监听上传进度的事件"><a href="#监听上传进度的事件" class="headerlink" title="监听上传进度的事件"></a>监听上传进度的事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文件上传进度</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算出上传进度</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(percentComplete)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态设置进度条</span></span><br><span class="line">        $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + percentComplete + <span class="string">&#x27;%;&#x27;</span>).<span class="title function_">html</span>(percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听上传完成的事件"><a href="#监听上传完成的事件" class="headerlink" title="监听上传完成的事件"></a>监听上传完成的事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听上传完成的事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">removeClass</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery高级用法"><a href="#jQuery高级用法" class="headerlink" title="jQuery高级用法"></a>jQuery高级用法</h2><h3 id="jQuery实现文件上传"><a href="#jQuery实现文件上传" class="headerlink" title="jQuery实现文件上传"></a>jQuery实现文件上传</h3><h4 id="定义UI结构-1"><a href="#定义UI结构-1" class="headerlink" title="定义UI结构"></a>定义UI结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证是否选择了文件-1"><a href="#验证是否选择了文件-1" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> files = $(<span class="string">&#x27;#file1&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line">        <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择文件上传&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="向FormData中追加文件-1"><a href="#向FormData中追加文件-1" class="headerlink" title="向FormData中追加文件"></a>向FormData中追加文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 FormData 中追加文件</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="使用jQuery发起上传文件的请求"><a href="#使用jQuery发起上传文件的请求" class="headerlink" title="使用jQuery发起上传文件的请求"></a>使用jQuery发起上传文件的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起jQuery的Ajax请求上传文件</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: fd,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a>jQuery实现loading效果</h3><h4 id="ajaxStart-callback"><a href="#ajaxStart-callback" class="headerlink" title="ajaxStart(callback)"></a>ajaxStart(callback)</h4><p>Ajax 请求开始时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听到Ajax请求发起，显示图片</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意： </p><p>$(document).ajaxStart() 函数会监听当前文档内所有的 Ajax 请求</p></blockquote><h4 id="ajaxStop-callback"><a href="#ajaxStop-callback" class="headerlink" title="ajaxStop(callback)"></a>ajaxStop(callback)</h4><p>Ajax 请求结束时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听到Ajax请求完成，隐藏图片</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>Axios是专注于网络数据请求的库，相比于原生的XMLHttpRequest对象，axios简单易用，相比于jQuery，axios更加轻量化，只专注于网络数据请求</p><h3 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a>axios发起GET请求</h3><p>axios 发起 get 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="comment">/*参数*/</span> &#125; &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> paramsObj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    axios.<span class="title function_">get</span>(url, &#123;<span class="attr">params</span>: paramsObj&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios发起POST请求"><a href="#axios发起POST请求" class="headerlink" title="axios发起POST请求"></a>axios发起POST请求</h3><p>axios 发起 post 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="comment">/*参数*/</span> &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> dataObj = &#123;</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;浙江&#x27;</span>,</span><br><span class="line">        <span class="attr">location</span>: <span class="string">&#x27;丽水&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="直接使用axios发起请求"><a href="#直接使用axios发起请求" class="headerlink" title="直接使用axios发起请求"></a>直接使用axios发起请求</h3><p>axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;,</span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;</span><br><span class="line">&#125;) .<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><h4 id="直接使用axios发起GET请求"><a href="#直接使用axios发起GET请求" class="headerlink" title="直接使用axios发起GET请求"></a>直接使用axios发起GET请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> paramsData = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;钢铁侠&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">35</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">params</span>: paramsData</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="直接使用axios发起POST请求"><a href="#直接使用axios发起POST请求" class="headerlink" title="直接使用axios发起POST请求"></a>直接使用axios发起POST请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;娃哈哈&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form表单与模板引擎</title>
      <link href="/posts/33277.html"/>
      <url>/posts/33277.html</url>
      
        <content type="html"><![CDATA[<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;正常出现在文中就无法上传文档，所以我就用了``&#123;% raw %&#125;&#123;&#123;&#125;&#125;&#123;% endraw %&#125;``的形式加注了一下</span><br></pre></td></tr></table></figure><h2 id="form表单的基本使用"><a href="#form表单的基本使用" class="headerlink" title="form表单的基本使用"></a>form表单的基本使用</h2><p>表单在网页中主要负责数据采集功能。HTML中的<code>&lt;form&gt;</code>标签，就是用于采集用户输入的信息，并通过<code>&lt;form&gt;</code>标签的提交操作，把采集到的信息提交到服务器端进行处理。</p><h3 id="表单组成部分"><a href="#表单组成部分" class="headerlink" title="表单组成部分"></a>表单组成部分</h3><blockquote><p>表单由三个基本部分组成：</p><p>表单标签</p><p>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等</p><p>表单按钮</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email_or_mobile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember_me&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="form标签的属性"><a href="#form标签的属性" class="headerlink" title="form标签的属性"></a>form标签的属性</h3><p><code>&lt;form&gt;</code>标签用来采集数据，<code>&lt;form&gt;</code>标签的属性则是用来规定如何把采集到的数据发送到服务器</p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">URL地址</td><td align="center">规定当提交表单时，向何处发送表单数据</td></tr><tr><td align="center">method</td><td align="center">get或post</td><td align="center">规定以何种方式把表单数据提交到 action  URL</td></tr><tr><td align="center">enctype</td><td align="center">application&#x2F;x-www-form-urlencoded    multipart&#x2F;form-data  text&#x2F;plain</td><td align="center">规定在发送表单数据之前如何对其进行编码</td></tr><tr><td align="center">target</td><td align="center">_blank  _self  _parent  _top  framename</td><td align="center">规定在何处打开 action  URL</td></tr></tbody></table><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p><code>action</code>属性用来规定当提交表单时，向何处发送表单数据</p><p><code>action</code>属性的值应该是后端提供的一个URL地址，这个URL地址专门负责接收表单提交过来的数据</p><p>当<code>&lt;form&gt;</code>表单在未指定<code>action</code>属性值的情况下，<code>action</code>的默认值为当前页面的URL地址</p><blockquote><p>注意：</p><p>当提交表单后，页面会立即跳转到<code>action</code>属性指定的URL地址</p></blockquote><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p><code>target</code> 属性用来规定在何处打开 action URL</p><p>它的可选值有5个，默认情况下，<code>target</code>的值是_self，表示在相同的框架中打开action URL</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">_blank</td><td align="center">在新窗口中打开</td></tr><tr><td align="center">_self</td><td align="center">默认。在相同的框架中打开</td></tr><tr><td align="center">_parent</td><td align="center">在父框架集中打开。（很少用）</td></tr><tr><td align="center">_top</td><td align="center">在整个窗口中打开。（很少用）</td></tr><tr><td align="center">framename</td><td align="center">在指定的框架中打开。（很少用）</td></tr></tbody></table><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><p><code>method</code> 属性用来规定以何种方式把表单数据提交到action URL</p><p>它的可选值有两个，分别是get和post</p><p>默认情况下，<code>method</code>的值为get，表示通过URL地址的形式，把表单数据提交到action URL</p><blockquote><p>注意：</p><p>get方式适合用来提交少量的、简单的数据</p><p>post方式适合用来提交大量的、复杂的、或包含文件上传的数据</p><p>在实际开发中，<code>&lt;form&gt;</code>表单的post提交方式用的最多，很少用get。例如登录、注册、添加数据等表单操作，都需要使用post方式来提交表单</p></blockquote><h4 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h4><p><code>enctype</code> 属性用来规定在发送表单数据之前如何对数据进行编码</p><p>它的可选值有三个，默认情况下，<code>enctype</code>的值为application&#x2F;x-www-form-urlencoded，表示在发送前编码所有的字符</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">application&#x2F;x-www-form-urlencoded</td><td align="center">在发送前编码所有字符（默认）</td></tr><tr><td align="center">multipart&#x2F;form-data</td><td align="center">不对字符编码。  在使用包含文件上传控件的表单时，必须使用该值</td></tr><tr><td align="center">text&#x2F;plain</td><td align="center">空格转换为 “+”  加号，但不对特殊字符编码。（很少用）</td></tr></tbody></table><blockquote><p>注意：</p><p>在涉及到文件上传的操作时，必须将<code>enctype</code>的值设置为multipart&#x2F;form-dat</p><p>如果表单的提交不涉及到文件上传操作，则直接将<code>enctype</code>的值设置为application&#x2F;x-www-form-urlencoded即可</p></blockquote><h3 id="表单的同步提交"><a href="#表单的同步提交" class="headerlink" title="表单的同步提交"></a>表单的同步提交</h3><p>通过点击submit按钮，触发表单提交的操作，从而使页面跳转到action URL 的行为，叫做表单的同步提交</p><blockquote><p>缺点：</p><p><code>&lt;form&gt;</code>表单同步提交后，整个页面会发生跳转，跳转到 action URL 所指向的地址，用户体验很差</p><p><code>&lt;form&gt;</code>表单同步提交后，页面之前的状态和数据会丢失</p></blockquote><blockquote><p>解决方案：</p><p>表单只负责采集数据，Ajax 负责将数据提交到服务器</p></blockquote><h2 id="通过Ajax提交表单数据"><a href="#通过Ajax提交表单数据" class="headerlink" title="通过Ajax提交表单数据"></a>通过Ajax提交表单数据</h2><h3 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h3><p>在jQuery中，可以使用如下两种方式，监听到表单的提交事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="阻止表单默认提交行为"><a href="#阻止表单默认提交行为" class="headerlink" title="阻止表单默认提交行为"></a>阻止表单默认提交行为</h3><p>当监听到表单的提交事件以后，可以调用事件对象的event.preventDefault()函数，来阻止表单的提交和页面的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// 阻止表单的提交和页面的跳转</span></span><br><span class="line">   e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// 阻止表单的提交和页面的跳转</span></span><br><span class="line">   e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="快速获取表单中的数据"><a href="#快速获取表单中的数据" class="headerlink" title="快速获取表单中的数据"></a>快速获取表单中的数据</h3><h4 id="serialize-函数"><a href="#serialize-函数" class="headerlink" title="serialize()函数"></a>serialize()函数</h4><p>为了简化表单中数据的获取操作，jQuery提供了 serialize()函数，其语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><blockquote><p>优点：</p><p>可以一次性获取到表单中的所有的数据</p><p>注意：</p><p>在使用 serialize()函数快速获取表单数据时，必须为每个表单元素添加name属性！</p></blockquote><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎，顾名思义，它可以根据程序员指定的模板结构和数据，自动生成一个完整的HTML页面</p><blockquote><p>优点：</p><p>减少了字符串的拼接操作</p><p>使代码结构更清晰</p><p>使代码更易于阅读与维护</p></blockquote><h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><p>art-template 是一个简约、超快的模板引擎。中文官网首页为<a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p><h3 id="使用传统方式渲染UI结构"><a href="#使用传统方式渲染UI结构" class="headerlink" title="使用传统方式渲染UI结构"></a>使用传统方式渲染UI结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>会员：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;isVIP&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>注册时间：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;regTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱好1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱好2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&lt;h3&gt;用户信息&lt;/h3&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">isVIP</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">regTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;吃饭&#x27;</span>, <span class="string">&#x27;睡觉&#x27;</span>, <span class="string">&#x27;打豆豆&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">name</span>)</span><br><span class="line">    $(<span class="string">&#x27;#title&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">title</span>)</span><br><span class="line">    $(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">age</span>)</span><br><span class="line">    $(<span class="string">&#x27;#isVIP&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">isVIP</span>)</span><br><span class="line">    $(<span class="string">&#x27;#regTime&#x27;</span>).<span class="title function_">html</span>(data.<span class="property">regTime</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rows = []</span><br><span class="line">    $.<span class="title function_">each</span>(data.<span class="property">hobby</span>, <span class="keyword">function</span> (<span class="params">i, item</span>) &#123;</span><br><span class="line">        rows.<span class="title function_">push</span>(<span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;#hobby&#x27;</span>).<span class="title function_">html</span>(rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="art-template使用步骤"><a href="#art-template使用步骤" class="headerlink" title="art-template使用步骤"></a>art-template使用步骤</h3><p>导入 art-template</p><p>定义数据</p><p>定义模板</p><p>调用 template函数</p><p>渲染HTML结构</p><h3 id="art-template标准语法"><a href="#art-template标准语法" class="headerlink" title="art-template标准语法"></a>art-template标准语法</h3><p>art-template提供了<code>{{}}</code>这种语法格式，在<code>{{}}</code> 内可以进行变量输出，或循环数组等操作，这种<code>{{}}</code>语法在art-template中被称为标准语法</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value&#125;&#125;</span><br><span class="line">&#123;&#123;obj.<span class="property">key</span>&#125;&#125;</span><br><span class="line">&#123;&#123;obj[<span class="string">&#x27;key&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;a ? b : c&#125;&#125;</span><br><span class="line">&#123;&#123;a || b&#125;&#125;</span><br><span class="line">&#123;&#123;a + b&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>{{}}</code>语法中，可以进行变量的输出、对象属性的输出、三元表达式输出、逻辑或输出、加减乘除等表达式输出</p></blockquote><h4 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;@ value &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要输出的value值中，包含了HTML标签结构，则需要使用原文输出语法，才能保证HTML标签被正常渲染</p></blockquote><h4 id="条件输出"><a href="#条件输出" class="headerlink" title="条件输出"></a>条件输出</h4><p>如果要实现条件输出，则可以在<code>{{}}</code>中使用if… else if …&#x2F;if 的方式，进行按需输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> value&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> v1&#125;&#125; 按需输出的内容 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> v2&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环输出"><a href="#循环输出" class="headerlink" title="循环输出"></a>循环输出</h4><p>如果要实现循环输出，则可以在<code>{{}}</code>内，通过each语法循环数组，当前循环的索引使用<code>$index </code>进行访问，当前的循环项使用<code>$value</code>进行访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each arr&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器的本质，就是一个function处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filterName&#125;&#125;</span><br></pre></td></tr></table></figure><p>过滤器语法类似管道操作符，它的上一个输出作为下一个输入</p><p>定义过滤器的基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">filterName</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="comment">/*return处理的结果*/</span>&#125;</span><br></pre></td></tr></table></figure><p>定义格式化时间过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;注册时间：&#123;&#123;regTime | dateFormat&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = <span class="keyword">function</span>(<span class="params">date</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">   <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">   <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d <span class="comment">// 注意，过滤器最后一定要 return 一个值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎实现原理"><a href="#模板引擎实现原理" class="headerlink" title="模板引擎实现原理"></a>模板引擎实现原理</h2><h3 id="正则与字符串操作"><a href="#正则与字符串操作" class="headerlink" title="正则与字符串操作"></a>正则与字符串操作</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>exec() 函数用于检索字符串中的正则表达式的匹配</p><p>如果字符串中有匹配的值，则返回该匹配值，否则返回 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RegExpObject</span>.<span class="title function_">exec</span>(string)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/o/</span></span><br><span class="line"><span class="keyword">let</span> result = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>正则表达式中 ( ) 包起来的内容表示一个分组，可以通过分组来提取自己想要的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(patternResult)</span><br><span class="line"><span class="comment">// 得到 name 相关的分组信息</span></span><br><span class="line"><span class="comment">// [&quot;&#123;&#123;name&#125;&#125;&quot;, &quot;name&quot;, index: 7, input: &quot;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="字符串的replace函数"><a href="#字符串的replace函数" class="headerlink" title="字符串的replace函数"></a>字符串的replace函数</h4><p>replace() 函数用于在字符串中用一些字符替换另一些字符，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;123456&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>) </span><br><span class="line"><span class="comment">// 得到的 result 的值为字符串 &#x27;abc456&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"><span class="keyword">let</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="comment">// console.log(patternResult)</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], patternResult[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h5 id="多次replace"><a href="#多次replace" class="headerlink" title="多次replace"></a>多次replace</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次匹配</span></span><br><span class="line"><span class="keyword">let</span> res1 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line">str = str.<span class="title function_">replace</span>(res1[<span class="number">0</span>], res1[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 输出 &lt;div&gt;name今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二场匹配</span></span><br><span class="line"><span class="keyword">let</span> res2 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line">str = str.<span class="title function_">replace</span>(res2[<span class="number">0</span>], res2[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 输出 &lt;div&gt;name今年age岁了&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三次匹配</span></span><br><span class="line"><span class="keyword">let</span> res3 = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3)   <span class="comment">//null</span></span><br></pre></td></tr></table></figure><h5 id="使用while循环replace"><a href="#使用while循环replace" class="headerlink" title="使用while循环replace"></a>使用while循环replace</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line"><span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], patternResult[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h5 id="replace替换为真值"><a href="#replace替换为真值" class="headerlink" title="replace替换为真值"></a>replace替换为真值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line"><span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], data[patternResult[<span class="number">1</span>]])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h3 id="实现简易的模板引擎"><a href="#实现简易的模板引擎" class="headerlink" title="实现简易的模板引擎"></a>实现简易的模板引擎</h3><blockquote><p>步骤：</p><p>①定义模板结构</p><p>②预调用模板引擎</p><p>③封装 template函数</p><p>④导入并使用自定义的模板引擎</p></blockquote><p>1.定义模板结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-user&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>性别：</span><span class="template-variable">&#123;&#123;  <span class="name">gender</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>住址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>  &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.预调用模板引擎</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;浙江丽水&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用模板引擎</span></span><br><span class="line"><span class="keyword">let</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-user&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染html结构</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-box&#x27;</span>).<span class="property">innerHTML</span> = htmlStr</span><br></pre></td></tr></table></figure><p>3.封装 template函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">template</span>(<span class="params">id, data</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">innerHTML</span></span><br><span class="line">  <span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], data[patternResult[<span class="number">1</span>]])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入并使用自定义的模板引擎</p><p>最后导入JS</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器的基本概念与初识Ajax</title>
      <link href="/posts/45118.html"/>
      <url>/posts/45118.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解Ajax</h2><p>Ajax的全称是Asynchronous Javascript And XML（异步 JavaScript和XML）</p><p>通俗的理解：在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式，就是Ajax</p><blockquote><p>作用：</p><p>Ajax能让我们轻松实现网页与服务器之间的数据交互。</p></blockquote><h3 id="Ajax典型应用场景"><a href="#Ajax典型应用场景" class="headerlink" title="Ajax典型应用场景"></a>Ajax典型应用场景</h3><p>1.用户名检测：注册用户时，通过ajax的形式，动态检测用户名是否被占用</p><p>2.搜索提示：当输入搜索关键字时，通过ajax的形式，动态加载搜索提示列表</p><p>3.数据分页显示：当点击页码值的时候，通过ajax的形式，根据页码值动态刷新表格的数据</p><p>4.数据的增删改查：数据的添加、删除、修改、查询操作，都需要通过ajax的形式，来实现数据的交互</p><h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><p>浏览器中提供的XMLHttpRequest 用法比较复杂，所以jQuery对XMLHttpRequest进行了封装，提供了一系列Ajax相关的函数，极大地降低了 Ajax 的使用难度</p><blockquote><p>jQuery中发起Ajax请求最常用的三个方法：</p><p>$.get( )</p><p>$.post( )</p><p>$.ajax( )</p></blockquote><h3 id="get-函数"><a href="#get-函数" class="headerlink" title="$.get()函数"></a>$.get()函数</h3><p>jQuery中<code>$.get()</code>函数的功能单一，专门用来发起get请求，从而将服务器上的资源请求到客户端来进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table><h4 id="get-发起不带参数的请求"><a href="#get-发起不带参数的请求" class="headerlink" title="$.get()发起不带参数的请求"></a>$.get()发起不带参数的请求</h4><p>使用 <code>$.get()</code>函数发起不带参数的请求时，直接提供请求的 URL 地址和请求成功之后的回调函数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759402.png"></p><h4 id="get-发起带参数的请求"><a href="#get-发起带参数的请求" class="headerlink" title="$.get()发起带参数的请求"></a>$.get()发起带参数的请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnGetInfo&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759850.png"></p><h3 id="post-函数"><a href="#post-函数" class="headerlink" title="$.post()函数"></a>$.post()函数</h3><p>jQuery 中<code>$.post()</code>函数的功能单一，专门用来发起post请求，从而向服务器提交数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, [data], [callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">是否必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">提交数据的地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">要提交的数据</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">数据提交成功时的回调函数</td></tr></tbody></table><h4 id="post-向服务器提交数据"><a href="#post-向服务器提交数据" class="headerlink" title="$.post()向服务器提交数据"></a>$.post()向服务器提交数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;<span class="attr">bookname</span>: <span class="string">&#x27;活着&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;余华&#x27;</span>, <span class="attr">publisher</span>: <span class="string">&#x27;上海图书出版社&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207251759792.png"></p><h3 id="ajax-函数"><a href="#ajax-函数" class="headerlink" title="$.ajax()函数"></a>$.ajax()函数</h3><p>相比于<code>$.get()</code>和<code>$.post()</code>函数，jQuery中提供的<code>$.ajax()</code>函数，是一个功能比较综合的函数，它允许我们对Ajax请求进行更详细的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求的方式，例如 GET 或 POST</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; &#125; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ajax-发起GET请求"><a href="#ajax-发起GET请求" class="headerlink" title="$.ajax()发起GET请求"></a>$.ajax()发起GET请求</h4><p>使用 <code>$.ajax()</code>发起GET请求时，只需要将type 属性的值设置为’GET’ 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252002618.png"></p><h4 id="ajax-发起POST请求"><a href="#ajax-发起POST请求" class="headerlink" title="$.ajax()发起POST请求"></a>$.ajax()发起POST请求</h4><p>使用 <code>$.ajax()</code>发起POST请求时，只需要将type 属性的值设置为’POST’ 即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; <span class="comment">// 要提交给服务器的数据</span></span><br><span class="line">      <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>,</span><br><span class="line">      <span class="attr">publisher</span>: <span class="string">&#x27;上海图书出版社&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252002619.png"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>使用Ajax请求数据时，被请求的 URL 地址，就叫做数据接口（简称接口）。同时，每个接口必须有请求方式。</p><h3 id="通过GET方法请求接口的过程"><a href="#通过GET方法请求接口的过程" class="headerlink" title="通过GET方法请求接口的过程"></a>通过GET方法请求接口的过程</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252004250.png"></p><h3 id="通过POST方法请求接口的过程"><a href="#通过POST方法请求接口的过程" class="headerlink" title="通过POST方法请求接口的过程"></a>通过POST方法请求接口的过程</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252004110.png"></p><h3 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h3><p>为了验证接口能否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测。</p><blockquote><p>优点：</p><p>接口测试工具能让我们在不写任何代码的情况下，对接口进行调用和测试。</p></blockquote><h4 id="使用PostMan测试GET接口"><a href="#使用PostMan测试GET接口" class="headerlink" title="使用PostMan测试GET接口"></a>使用PostMan测试GET接口</h4><blockquote><p>步骤：</p><p>1.选择请求的方式</p><p>2.填写请求的URL地址</p><p>3.填写请求的参数</p><p>4.点击 Send按钮发起GET请求</p><p>5.查看服务器响应的结果</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252033869.png"></p><h4 id="使用PostMan测试POST接口"><a href="#使用PostMan测试POST接口" class="headerlink" title="使用PostMan测试POST接口"></a>使用PostMan测试POST接口</h4><blockquote><p>步骤：</p><p>1.选择请求的方式</p><p>2.填写请求的URL地址</p><p>3.选择 Body面板并勾选数据格式</p><p>4.填写要发送到服务器的数据</p><p>5.点击 Send按钮发起POST请求</p><p>6.查看服务器响应的结果</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207252033871.png"></p><h3 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h3><p>接口文档，顾名思义就是接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL，参数以及输出内容的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p><blockquote><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><p>1.接口名称：用来标识各个接口的简单说明，如<code>登录接口</code>，<code>获取图书列表接口</code>等。</p><p>2.接口URL：接口的调用地址。</p><p>3.调用方式：接口的调用方式，如<code>GET</code>或<code>POST</code>。</p><p>4.参数格式：接口需要传递的参数，每个参数必须包含<code>参数名称</code>、<code>参数类型</code>、<code>是否必选</code>、<code>参数说明</code>这4项内容。</p><p>5.响应格式：接口的返回值的详细描述，一般包含<code>数据名称</code>、<code>数据类型</code>、<code>说明</code>3项内容。</p><p>6.返回示例（可选）：通过对象的形式，例举服务器返回数据的结构。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/posts/38683.html"/>
      <url>/posts/38683.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识jQuery"><a href="#认识jQuery" class="headerlink" title="认识jQuery"></a>认识jQuery</h2><p>jQuery是JavaScript类库（JS文件），封装了很多简单易用的方法（浏览器兼容），绝大多数用来简化DOM操作</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207232007388.png"></p><p>DOM语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  li[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>jQuery 中通过选择器来获取 DOM 节点，功能类似于原生的querySelectorAll 方法，支持的选择器与 CSS 的选择器几乎一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>)</span><br><span class="line"><span class="comment">// 修改背景色</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>, <span class="string">&#x27;yellowgreen&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><p>jQuery 中利用选择器获取到的并非原生的DOM 对象，而是 jQuery对象</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择器获取</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>)</span><br><span class="line"><span class="comment">// dom对象转换</span></span><br><span class="line">$(dom对象)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery对象 和 DOM对象 的语法不能混用</p></blockquote><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>在jQuery中以原生事件类型的名称为依据, 封装了相对应的事件处理方法</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">&#x27;选择器&#x27;</span>).事件名(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 逻辑....</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>事件名开头不需要写on</p><p>回调函数中的 this 就是触发事件的 dom 元素</p></blockquote><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>链式编程 通过点(.) 把多个操作(方法)连续的写下去, 形成和 链子 一样的结构</p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.text&#x27;</span>).<span class="title function_">focus</span>(回调函数).<span class="title function_">blur</span>(回调函数).<span class="title function_">change</span>(回调函数)</span><br></pre></td></tr></table></figure><blockquote><p>大部分 jQ对象 方法的返回值还是同一个 jQ对象</p></blockquote><h2 id="内容操纵"><a href="#内容操纵" class="headerlink" title="内容操纵"></a>内容操纵</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line">$(‘选择器’).<span class="title function_">html</span>(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">$(‘选择器’).<span class="title function_">text</span>(‘内容<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">// 读取</span></span><br><span class="line"><span class="string">$(&#x27;</span>选择器<span class="string">&#x27;).html()</span></span><br><span class="line"><span class="string">$(&#x27;</span>选择器<span class="string">&#x27;).text()</span></span><br></pre></td></tr></table></figure><blockquote><p>设置时: html 方法解析标签 ,  text不解析标签</p><p>取值时: html 方法获取标签 ,  text只获取文本</p><p>有一种使用方式支持链式编程</p></blockquote><h2 id="过滤方法"><a href="#过滤方法" class="headerlink" title="过滤方法"></a>过滤方法</h2><p>jQuery 中封装了过滤方法,对 jQuery 对象中的 dom 元素再次筛选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  匹配的第一个元素</span></span><br><span class="line">.<span class="title function_">first</span>()</span><br><span class="line"><span class="comment">// 匹配的最后一个元素</span></span><br><span class="line">.<span class="title function_">last</span>()</span><br><span class="line"><span class="comment">// 根据索引匹配元素</span></span><br><span class="line">.<span class="title function_">eq</span>(索引)</span><br></pre></td></tr></table></figure><blockquote><p>eq方法的索引从0开始</p><p>返回的是jQuery对象</p></blockquote><h2 id="样式操纵"><a href="#样式操纵" class="headerlink" title="样式操纵"></a>样式操纵</h2><p>jQuery 中对样式的操作进行封装 , 可以设置或者获取样式</p><p>键值对方法设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 键值对设置</span></span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;样式名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;200px&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;height&#x27;</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>对象方式设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 对象方式设置</span></span><br><span class="line">.<span class="title function_">css</span>(对象)</span><br><span class="line">.<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>样式获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 样式获取</span></span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;样式名&#x27;</span>)</span><br><span class="line">.<span class="title function_">css</span>(<span class="string">&#x27;width&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>数值类的样式省略单位,默认会使用 px</p><p>获取样式需要传递样式名</p></blockquote><h2 id="属性操纵"><a href="#属性操纵" class="headerlink" title="属性操纵"></a>属性操纵</h2><p>jQuery 中对属性的操作进行封装 , 可以设置、获取和删除属性</p><p>attr方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.赋值</span></span><br><span class="line">.<span class="title function_">attr</span>(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.取值</span></span><br><span class="line">.<span class="title function_">attr</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3.删除属性</span></span><br><span class="line">.<span class="title function_">removeAttr</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>操纵value</p><p>jQuery 中封装了操纵表单元素value属性的方法，可以取值和赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 赋值</span></span><br><span class="line">.<span class="title function_">val</span>(<span class="string">&#x27;参数&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 取值</span></span><br><span class="line">.<span class="title function_">val</span>()</span><br></pre></td></tr></table></figure><h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>jQuery 中封装了查找元素的方法，可以基于元素的结构关系查找新的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父元素</span></span><br><span class="line">.<span class="title function_">parent</span>()</span><br><span class="line"><span class="comment">// 2. 子元素 </span></span><br><span class="line">.<span class="title function_">children</span>()</span><br><span class="line"><span class="comment">// 3. 兄弟元素</span></span><br><span class="line">.<span class="title function_">siblings</span>()</span><br><span class="line"><span class="comment">// 4. 后代元素</span></span><br><span class="line">.<span class="title function_">find</span>(<span class="string">&#x27;选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>find方法方法需要传入选择器</p><p>children 、sibings 方法支持传入选择器</p></blockquote><h2 id="操纵类名"><a href="#操纵类名" class="headerlink" title="操纵类名"></a>操纵类名</h2><p>jQuery 中封装了为网页元素添加、移除、检测、切换类名的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 添加类名</span></span><br><span class="line">.<span class="title function_">addClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 移除类名</span></span><br><span class="line">.<span class="title function_">removeClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 判断类名 返回布尔值</span></span><br><span class="line">.<span class="title function_">hasClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 切换类名</span></span><br><span class="line">.<span class="title function_">toggleClass</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参数都是需要操纵的类名</p></blockquote><h2 id="事件进阶"><a href="#事件进阶" class="headerlink" title="事件进阶"></a>事件进阶</h2><p> jQuery 中封装了更为灵活的 on&#x2F;off、one 方法处理 DOM 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册事件</span></span><br><span class="line">.<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="comment">// 2. 移除指定事件</span></span><br><span class="line">.<span class="title function_">off</span>(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 移除所有事件</span></span><br><span class="line">.<span class="title function_">off</span>()</span><br><span class="line"><span class="comment">// 4. 注册一次性事件</span></span><br><span class="line">.<span class="title function_">one</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>on , one 方法回调函数中的 this 是触发事件的 dom 元素</p></blockquote><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><p> jQuery 中如何通过代码的方式触发绑定的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 直接触发</span></span><br><span class="line">.事件名()</span><br><span class="line"><span class="comment">// 2. trigger触发</span></span><br><span class="line">.<span class="title function_">trigger</span>(<span class="string">&#x27;事件名&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 触发自定义事件</span></span><br><span class="line">.<span class="title function_">trigger</span>(<span class="string">&#x27;自定义事件&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 注册自定义事件</span></span><br><span class="line">.<span class="title function_">on</span>(<span class="string">&#x27;自定义事件&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="window事件绑定"><a href="#window事件绑定" class="headerlink" title="window事件绑定"></a>window事件绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">//  点击</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h2><p>通过jQuery直接获取元素的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">offset</span>()</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">position</span>()</span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">&#123;<span class="attr">top</span>: <span class="number">126</span>, <span class="attr">left</span>: <span class="number">58</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参照物不同：</p><p>offset参照html标签</p><p>position参照离他最近有定位的祖先元素</p><p>margin：</p><p>offset会把外边距margin计算进去</p><p>position以外边距margin为边界,不计算margin</p></blockquote><h2 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h2><p>通过jQuery获取元素的滚动距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollLeft</span>()</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollTop</span>()</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollLeft</span>(值)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">scrollTop</span>(值)</span><br></pre></td></tr></table></figure><h2 id="显示-amp-隐藏动画"><a href="#显示-amp-隐藏动画" class="headerlink" title="显示&amp;隐藏动画"></a>显示&amp;隐藏动画</h2><p>通过jQuery以动画的方式切换元素的显示&amp;隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">show</span>(持续时间)</span><br><span class="line"><span class="comment">// 隐藏</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">hide</span>(持续时间)</span><br><span class="line"><span class="comment">// 显示&amp;隐藏</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">toggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="淡入-amp-淡出动画"><a href="#淡入-amp-淡出动画" class="headerlink" title="淡入&amp;淡出动画"></a>淡入&amp;淡出动画</h2><p>通过jQuery以淡入&amp;淡出的方式切换元素的显示隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 淡入</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeIn</span>(持续时间)</span><br><span class="line"><span class="comment">// 淡出</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeOut</span>(持续时间)</span><br><span class="line"><span class="comment">// 淡入&amp;淡出</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">fadeToggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="展开-amp-收起动画"><a href="#展开-amp-收起动画" class="headerlink" title="展开&amp;收起动画"></a>展开&amp;收起动画</h2><p>通过jQuery以展开(高度增大-显示)&amp;收起(高度减小-隐藏)的方式切换元素的显示隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideDown</span>(持续时间)</span><br><span class="line"><span class="comment">// 收起</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideUp</span>(持续时间)</span><br><span class="line"><span class="comment">// 展开&amp;收起</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">slideToggle</span>(持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="动画队列及停止方法"><a href="#动画队列及停止方法" class="headerlink" title="动画队列及停止方法"></a>动画队列及停止方法</h2><p>通过jQuery为元素设置的多个动画会依次添加到动画队列中,并根据添加的顺序依次播放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止当前动画</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>()</span><br><span class="line"><span class="comment">// 清空队列 在动画当前状态停止</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 清空队列 直接到当前动画的结束状态</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">stop</span>(<span class="literal">true</span>,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>动画方法和stop方法返回的是同一个jQuery对象(链式编程)</p><p>传递1个true和传递2个true的区别</p><p>1个:动画停止在执行stop方法的瞬间</p><p>2个:直接到当前播放动画的结束状态</p></blockquote><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><p> jQuery提供了animate方法来实现更为复杂的动画效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(动画属性, 持续时间)</span><br></pre></td></tr></table></figure><blockquote><p>可以写成对象的形式</p><p>数值类样式支持动画,支持多个</p><p>默认单位是px</p><p>支持非样式的特殊属性</p><p>持续时间单位是毫秒</p></blockquote><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>jQuery 中封装了在指定位置动态插入元素节点的方法,可以插入节点或者改变节点位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4个方法参数一样  位置不同</span></span><br><span class="line">$(<span class="string">&#x27;父元素选择器&#x27;</span>).<span class="title function_">append</span>(参数)   <span class="comment">// 父元素结尾</span></span><br><span class="line">$(<span class="string">&#x27;父元素选择器&#x27;</span>).<span class="title function_">prepend</span>(参数)  <span class="comment">// 父元素开头</span></span><br><span class="line">$(<span class="string">&#x27;兄弟元素选择器&#x27;</span>).<span class="title function_">before</span>(参数) <span class="comment">// 兄弟元素前面</span></span><br><span class="line">$(<span class="string">&#x27;兄弟元素选择器&#x27;</span>).<span class="title function_">after</span>(参数) <span class="comment">// 兄弟元素后面</span></span><br></pre></td></tr></table></figure><blockquote><p>插入节点:传入创建的dom元素或者html结构</p><p>改变位置:传入现有的dom元素或者jQuery对象</p></blockquote><h2 id="动画的回调函数"><a href="#动画的回调函数" class="headerlink" title="动画的回调函数"></a>动画的回调函数</h2><p>所有的  jQuery 动画方法都支持传入回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).基础动画方法(回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).基础动画方法(持续时间, 回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(属性, 回调函数)</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">animate</span>(属性, 持续时间, 回调函数)</span><br></pre></td></tr></table></figure><blockquote><p>回调函数会在动画执行完毕时立刻执行</p><p>回调函数中的this是执行动画的dom元素</p></blockquote><p>动画的延迟方法</p><p>jQuery 不仅可以设置动画执行的速度，还能在动画执行前设置一定的延时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">delay</span>(延迟时间).动画方法()</span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">delay</span>(延迟时间).动画方法().<span class="title function_">delay</span>(延迟时间).动画方法()</span><br></pre></td></tr></table></figure><blockquote><p>单位为毫秒</p></blockquote><h2 id="获取尺寸"><a href="#获取尺寸" class="headerlink" title="获取尺寸"></a>获取尺寸</h2><p>jQuery 对获取元素尺寸进行了封装，使得在不同场景中获取元素尺寸十分方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">width</span>() <span class="comment">// 内容宽度</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">height</span>() <span class="comment">// 内容高度</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">innerWidth</span>() <span class="comment">// 内容宽度 + 内边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">innerHeight</span>() <span class="comment">// 内容高度 + 内边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerWidth</span>() <span class="comment">// 内容宽度 + 内边距 + 边框</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerHeight</span>() <span class="comment">// 内容高度 + 内边距 + 边框</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>) <span class="comment">// 内容宽度 + 内边距 + 边框 + 外边距</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">outerHeight</span>(<span class="literal">true</span>) <span class="comment">// 内容高度 + 内边距 + 边框 + 外边距</span></span><br></pre></td></tr></table></figure><h2 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h2><p>jQuery 绑定的事件中可以获取事件参数(事件对象),用法和原生js完全一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).事件(<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery已经处理好了事件参数的兼容性</p></blockquote><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>jQuery 中封装了动态删除元素节点的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery对象.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure><blockquote><p>remove方法删除的是调用方法的元素节点</p></blockquote><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>jQuery 中封装了事件委托的支持 , 直接通过 on 方法即可使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接绑定</span></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"><span class="comment">// 事件委托</span></span><br><span class="line">$(<span class="string">&#x27;祖先选择器&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;事件名&#x27;</span>, <span class="string">&#x27;后代选择器&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>减少事件注册</p><p>解决动态增加后代元素的事件绑定问题</p><p>原理是事件冒泡</p><p>回调函数中的this是触发事件的dom对象</p></blockquote><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><p>jQuery 中提供了更为简便的入口函数写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQ写法</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 简化写法</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>页面资源加载完毕执行(包括图片、css等等)逻辑代码</p><p>DOM载入完毕就会执行</p></blockquote><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">轮播图效果自动执行</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">arrows</td><td align="center">是否显示翻页按钮</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">prevArrow</td><td align="center">自定义 上一页 按钮</td><td align="center">无</td><td align="center">标签选择器</td></tr><tr><td align="center">nextArrow</td><td align="center">自定义 下一页 按钮</td><td align="center">无</td><td align="center">标签选择器</td></tr><tr><td align="center">dots</td><td align="center">是否显示指示器</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用插件方法初始化</span></span><br><span class="line">$(<span class="string">&#x27;.your-class&#x27;</span>).<span class="title function_">slick</span>(&#123;</span><br><span class="line"><span class="attr">autoplay</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">arrows</span>:<span class="literal">true</span></span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="懒加载插件"><a href="#懒加载插件" class="headerlink" title="懒加载插件"></a>懒加载插件</h2><p>jQuery 的懒加载插件 lazyload</p><p>懒加载：图片用到了再去加载，常见于有大量图片的网页，比如电商</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">data-original</span>=<span class="string">&quot;./images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到希望懒加载的图片并调用lazyload方法</span></span><br><span class="line">$(<span class="string">&#x27;.lazyload&#x27;</span>).<span class="title function_">lazyload</span>()</span><br></pre></td></tr></table></figure><blockquote><p>图片地址设置给 data-original</p></blockquote><h2 id="全屏滚动"><a href="#全屏滚动" class="headerlink" title="全屏滚动"></a>全屏滚动</h2><p>jQuery 的全屏滚动插件 fullpage</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fullpage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span>第三屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>每个区域必须有 section 这个类名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#fullpage&#x27;</span>).<span class="title function_">fullpage</span>(&#123;</span><br><span class="line">....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">navigation</td><td align="center">是否显示导航</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">navigationPosition</td><td align="center">导航位置</td><td align="center">right</td><td align="center">left&#x2F;right</td></tr><tr><td align="center">anchors</td><td align="center">每个区域的锚链接名</td><td align="center">[]</td><td align="center">在地址栏</td></tr><tr><td align="center">afterLoad</td><td align="center">区域加载完毕的回调函数，有2个参数</td><td align="center">无</td><td align="center">参数：锚链接、索引</td></tr></tbody></table><h2 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h2><p>form 标签本身具有提交数据的能力，但是现在基本不这么用</p><blockquote><p>点击提交按钮，输入区域点击回车都会触发表单提交</p><p>表单中的 button 默认就是提交按钮</p></blockquote><p>现在比较流行在表单的 submit 事件中阻止默认行为，自己获取数据并提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line">event.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>返回false 或者 preventDefault 都可以阻止默认行为</p></blockquote><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><p>jQuery 的日期选择器插件 datepicker ,让用户在不同的浏览器下可以用一致的方式来选择日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 准备html结构 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;datapicker&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用插件方法</span></span><br><span class="line">  $(<span class="string">&#x27;.datapicker&#x27;</span>).<span class="title function_">datepicker</span>(&#123;</span><br><span class="line">    …</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">autoPick</td><td align="center">是否自动选择当前日期</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">autoHide</td><td align="center">选择日期之后是否自动关闭</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">language</td><td align="center">语言模式</td><td align="center">空</td><td align="center">需要结合语言包使用</td></tr></tbody></table><blockquote><p>默认显示的是英文，需要导入 中文语言包</p></blockquote><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>jQuery 的表单验证插件 validate , 验证用户在表单中输入的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">validate</span>(&#123;</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用配置</th><th align="center">含义</th><th align="center">默认值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">onBlur</td><td align="center">失去焦点时验证</td><td align="center">false</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">onSubmit</td><td align="center">提交表单时验证</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">sendForm</td><td align="center">是否提交表单</td><td align="center">true</td><td align="center">true&#x2F;false</td></tr><tr><td align="center">valid</td><td align="center">所有表单项验证通过执行的 回调函数</td><td align="center">无</td><td align="center">this是jQ对象</td></tr><tr><td align="center">invalid</td><td align="center">至少一个表单项为通过验证时执行的 回调函数</td><td align="center">无</td><td align="center">this是jQ对象</td></tr><tr><td align="center">description</td><td align="center">错误提示信息</td><td align="center">无</td><td align="center">Object</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-required</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-pattern</span>=<span class="string">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">自定义属性</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">data-required</td><td align="center">验证表单项不能为空</td><td align="center">不需要值</td></tr><tr><td align="center">data-pattern</td><td align="center">基于正则表达式验证</td><td align="center">正则表达式</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-required</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-describedby</span>=<span class="string">&quot;password-error&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-description</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-pattern</span>=<span class="string">&quot;.&#123;6,&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password-error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">validate</span>(&#123;</span><br><span class="line">  <span class="attr">description</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: &#123;</span><br><span class="line">      <span class="attr">required</span>: <span class="string">&#x27;密码不能为空!&#x27;</span>,</span><br><span class="line">      <span class="attr">pattern</span>: <span class="string">&#x27;密码不能少于6位!&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>自定义属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>data-describedby</td><td>指定显示错误信息的标签</td><td>标签的id</td></tr><tr><td>data-description</td><td>指定错误信息的内容</td><td>和description中的属性对应</td></tr></tbody></table><blockquote><p>这2个属性需要结合 description 配置使用</p></blockquote><blockquote><p>表单元素要放在form里面</p></blockquote><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>jQuery 中封装了克隆(复制)，节点的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带事件</span></span><br><span class="line">.<span class="title function_">clone</span>()</span><br><span class="line"><span class="comment">// 带事件</span></span><br><span class="line">.<span class="title function_">clone</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>方法返回的还是 jQuery对象  </p><p>传入 true 事件也会一起克隆</p></blockquote><h2 id="获取dom对象"><a href="#获取dom对象" class="headerlink" title="获取dom对象"></a>获取dom对象</h2><p>jQuery 封装了获取内部dom对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get方法获取</span></span><br><span class="line">.<span class="title function_">get</span>(索引)</span><br><span class="line"><span class="comment">// 中括号获取</span></span><br><span class="line">[索引]</span><br></pre></td></tr></table></figure><blockquote><p>索引从 0 开始  </p><p>获取到的是dom对象</p></blockquote><p>表单序列化</p><p>jQuery 中封装了快速获取表单数据的方法 , 叫做序列化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><blockquote><p>表单元素要有 name 属性才可以获取到value 值</p><p>获取到的数据格式是 name1&#x3D;value1&amp;name2&#x3D;value2 的字符串</p></blockquote><h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>插件是 jQuery 提供的扩展机制 , 本质是往 jQuery 原型对象上添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  插件名 (参数) &#123;</span><br><span class="line">    <span class="comment">// 逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>jQuery 是$ 的别名</p><p>jQuery 内部也是通过这种方式添加方法</p></blockquote><h2 id="工具方法"><a href="#工具方法" class="headerlink" title="工具方法"></a>工具方法</h2><p> jQuery 除了封装了大量的 DOM操作外，还提供了一些工具方法，这些方法通过 $ 或 jQuery 直接调用 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 遍历数组</span></span><br><span class="line">$.<span class="title function_">each</span>(数组, <span class="keyword">function</span> (<span class="params">下标, 值</span>) &#123;&#125;)</span><br><span class="line"> <span class="comment">// 遍历并返回新数组</span></span><br><span class="line">$.<span class="title function_">map</span>(数组,<span class="keyword">function</span>(<span class="params">值</span>)&#123;</span><br><span class="line">  <span class="comment">// 返回新的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>不仅仅只有这2个方法</p><p>逐步被 ES6 及更高级的版本新增特性取代</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶技巧</title>
      <link href="/posts/38983.html"/>
      <url>/posts/38983.html</url>
      
        <content type="html"><![CDATA[<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝拷贝的是地址</p><p>常见方法：</p><p>1.拷贝对象：<code>Object.assgin() / 展开运算符&#123;...obj&#125;拷贝对象</code></p><p>2.拷贝数组：<code>Array.prototype.concat() 或者[...arr]</code></p><blockquote><p>问题：</p><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p></blockquote><blockquote><p>直接赋值和浅拷贝的区别：</p><p>直接赋值的方法，主要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址</p><p>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响</p></blockquote><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝拷贝的是对象，不是地址</p><p>常见方法：</p><h4 id="通过递归实现深拷贝"><a href="#通过递归实现深拷贝" class="headerlink" title="通过递归实现深拷贝"></a>通过递归实现深拷贝</h4><p>函数递归：如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="comment">// 拷贝函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        <span class="comment">// 处理数组问题</span></span><br><span class="line">        <span class="comment">// 必须先写数组再写对象</span></span><br><span class="line">        <span class="keyword">if</span>(oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            newObj[k]= [] </span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj[k]= &#123;&#125;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k])</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// k是属性名 oldObj[k]是属性值</span></span><br><span class="line">            <span class="comment">// newObj[k] === o.uname</span></span><br><span class="line">            newObj[k] = oldObj[k]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>(o, obj) <span class="comment">// 函数调用 o 新对象 obj 旧对象</span></span><br><span class="line">o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>由于递归很容易发生“栈溢出”错误(stack overflow)，所以必须加退出条件 return</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`这是第<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>利用递归函数实现 setTimeout 模拟 setInterval效果**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(getTime, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><h4 id="lodash-x2F-cloneDeep"><a href="#lodash-x2F-cloneDeep" class="headerlink" title="lodash&#x2F;cloneDeep"></a>lodash&#x2F;cloneDeep</h4><p>首先引入lodash.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="通过JSON-stringify-实现"><a href="#通过JSON-stringify-实现" class="headerlink" title="通过JSON.stringify()实现"></a>通过JSON.stringify()实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: [<span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;CSGO&#x27;</span>],</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;j&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把对象转换成 JSON字符串</span></span><br><span class="line"><span class="comment">// JSON.stringify(obj)</span></span><br><span class="line"><span class="comment">// 字符串转换成对象</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="throw-抛异常"><a href="#throw-抛异常" class="headerlink" title="throw 抛异常"></a>throw 抛异常</h3><p>异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || !y) &#123;</span><br><span class="line">        <span class="comment">// throw `没有参数传递进来`</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;没有参数传递进来&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.throw 抛出异常信息，程序也会终止执行</p><p>2.throw 后面跟的是错误提示信息</p><p>3.Error 对象配合 throw 使用，能够设置更详细的错误信息</p></blockquote><h3 id="try-x2F-catch-捕获异常"><a href="#try-x2F-catch-捕获异常" class="headerlink" title="try&#x2F;catch  捕获异常"></a>try&#x2F;catch  捕获异常</h3><p>我们可以通过try &#x2F; catch 捕获错误信息（浏览器提供的错误信息）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 可能有问题的代码写在这里</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">        <span class="comment">// 中断</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;执行&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.try…catch 用于捕获错误信息</p><p>2.将预估可能发生错误的代码写在 try 代码段中</p><p>3.如果 try 代码段中出现错误后，会执行 catch 代码段，并截获到错误信息</p></blockquote><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><p>我们可以通过try &#x2F; catch 捕获错误信息（浏览器提供的错误信息）</p><h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><p>普通函数的调用方式决定了this的值，即谁调用this的值指向谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>普通函数没有明确调用者时 this 值为 window，严格模式下没有调用者时 this 的值为 undefined</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数中的 this 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 this</p><blockquote><p>1.箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的</p><p>2.箭头函数中的this引用的就是最近作用域中的this</p><p>3.向外层作用域中，一层一层查找this，直到有this的定义</p></blockquote><blockquote><p>总结：</p><p>1.函数内不存在this，沿用上一级的</p><p>2.不适用：构造函数，原型函数，dom事件函数等等</p><p>3.适用：需要使用上层this的地方</p><p>4.使用正确的话，它会在很多地方带来方便，后面我们会大量使用慢慢体会</p></blockquote><h3 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h3><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a>call()方法</h4><p>使用call方法调用函数，同时指定被调用函数中this的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在 fun 函数运行时指定的 this 值</p><p>arg1，arg2：传递的其他参数</p><p>返回值就是函数的返回值，因为它就是调用函数</p></blockquote><h4 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a>apply()方法</h4><p>使用apply方法调用函数，同时指定被调用函数中的this的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在fun函数运行时指定的 this 值</p><p>argsArray：传递的值，必须包含在数组里面</p><p>返回值就是函数的返回值，因为它就是调用函数</p><p>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</p></blockquote><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><p>bind() 方法不会调用函数。但是能改变函数内部this 指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><blockquote><p>thisArg：在 fun 函数运行时指定的 this 值</p><p>arg1，arg2：传递的其他参数</p><p>返回由指定的 this 值和初始化参数改造的 原函数拷贝</p><p>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind，比如改变定时器内部的this指向</p></blockquote><blockquote><p>相同点: </p><p>都可以改变函数内部的this指向.</p><p>区别点: </p><p>call 和 apply 会调用函数, 并且改变函数内部this指向.</p><p>call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply 必须数组形式[arg]</p><p>bind 不会调用函数, 可以改变函数内部this指向.</p><p>主要应用场景: </p><p>call 调用函数并且可以传递参数</p><p>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</p><p>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向</p></blockquote><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>所谓节流，就是指连续触发事件但是在n秒中只执行一次函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  box.<span class="property">innerHTML</span> = ++i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流函数 throttle</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 得到当前时间</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 判断如果大于等于 500 就调用函数</span></span><br><span class="line">    <span class="keyword">if</span>(now - startTime &gt;= t) &#123;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">      <span class="comment">// 起始时间=当前时间    写在调用函数下面</span></span><br><span class="line">      startTime = now</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">throttle</span>(mouseMove, <span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  box.<span class="property">innerHTML</span> = ++i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流函数 throttle</span></span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeId </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timeId) <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入面向对象</title>
      <link href="/posts/61213.html"/>
      <url>/posts/61213.html</url>
      
        <content type="html"><![CDATA[<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个依次调用</p><blockquote><p>优点：性能比面向对象高，适合跟硬件联系很紧密的对象，比如单片机就采用的面向过程编程</p><p>缺点：没有面向对象易维护、易复发、易扩展</p></blockquote><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>把事物分解成一个个对象，然后由对象之间分工与合作</p><blockquote><p>特性：封装性、继承性、多态性</p></blockquote><blockquote><p>优点：易维护。易复发、易扩展，由于面向对象有封装、继承、多态性的特效，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。</p><p>同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是彼此不影响的</p><blockquote><p>总结：</p><p>1.构造函数体现了面向对象的封装特性</p><p>2.构造函数实例创建的对象彼此独立、互不影响</p></blockquote><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>构造函数通过原型分配的函数是所有对象所 共享的。<br>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象<br>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存<br>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><p><code>构造函数和原型对象中的this都指向实例化对象</code></p><h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>该属性指向该原型对象的构造函数</p><blockquote><p>使用场景：</p><p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值</p><p>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了</p><p>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数</p></blockquote><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>对象都会有一个属性<code>__proto__</code>指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有<code>__proto__</code>原型的存在</p><blockquote><p>注意：</p><p><code>__proto__</code> 是JS非标准属性</p><p>[[prototype]]和<code>__proto__</code>意义相同</p><p>用来表明当前实例对象指向哪个原型对象prototype</p><p><code>__proto__</code>对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207191002805.jpg"></p><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">eays</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">head</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span> () &#123;</span><br><span class="line">    <span class="comment">// this.eays = 2</span></span><br><span class="line">    <span class="comment">// this.head = 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Woman 通过原型来继承Person</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span></span><br><span class="line"><span class="comment">// 指回原来的构造函数</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line"><span class="keyword">const</span> red = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(red)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.eays = 2</span></span><br><span class="line">    <span class="comment">// this.head = 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line"><span class="keyword">const</span> pink = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pink)</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果我们给男人添加了一个吸烟的方法，发现女人也自动添加了这个方法</p><p>原因：男人和女人都同时使用了同一个对象，根据引用类型的特点，他们指向同一个对象，修改一个就会都影响</p><p>解决：构造函数new 每次都会创建一个新的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207191315750.png"></p><blockquote><p>查找规则：</p><p>1.当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p><p>2.如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 prototype 原型对象</p><p>3.如果还没有就查找原型对象的原型（Object的原型对象）</p><p>4.依此类推一直找到 Object 为止（null）</p><p>5.<code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数&amp;数据常用函数</title>
      <link href="/posts/62774.html"/>
      <url>/posts/62774.html</url>
      
        <content type="html"><![CDATA[<h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><h3 id="创建对象三种方式"><a href="#创建对象三种方式" class="headerlink" title="创建对象三种方式"></a>创建对象三种方式</h3><p>1.利用对象字面量创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.利用new Object 创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span>&#125;)</span><br><span class="line">obj.<span class="property">unmae</span> = <span class="string">&#x27;jxy&#x27;</span></span><br></pre></td></tr></table></figure><p>3.利用构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new Pig(&#x27;佩奇&#x27;, 6))</span></span><br><span class="line"><span class="keyword">const</span> peppa = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peppa)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>是一种特殊的函数，主要用来初始化对象，可以快速创建多个类似的对象</p><blockquote><p>1.命名以大写字母开头</p><p>2.只能由“new”操作符来执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new Pig(&#x27;佩奇&#x27;, 6))</span></span><br><span class="line"><span class="keyword">const</span> peppa = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(peppa)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>1.使用 new 关键字调用函数的行为被称为实例化</p><p>2.实例化构造函数时没有参数时可以省略 ()</p><p>3.构造函数内部无需写return，返回值即为新创建的对象</p><p>4.构造函数内部的 return 返回的值无效，所以不要写return</p><p>5.new Object（） new Date（） 也是实例化构造函数</p></blockquote><p>实例化执行过程</p><blockquote><p>1.创建新的空对象</p><p>2.构造函数this指向新对象</p><p>3.执行构造函数代码，修改this，添加新的属性</p><p>4.返回新对象</p></blockquote><h3 id="实例成员-amp-静态成员"><a href="#实例成员-amp-静态成员" class="headerlink" title="实例成员&amp;静态成员"></a>实例成员&amp;静态成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Per</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> uname = <span class="keyword">new</span> <span class="title class_">Per</span>()</span><br><span class="line"><span class="comment">// uname就是实例成员</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="comment">//调用实例方法</span></span><br><span class="line">uname.<span class="title function_">sayHi</span>(uname.<span class="property">sayHi</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1.实例对象的属性和方法即为实例成员</p><p>2.为构造函数传入参数，动态创建结构相同但值不同的对象</p><p>3.构造函数创建的实例对象彼此独立互不影响</p></blockquote><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>构造函数的属性和方法被称为静态成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="title class_">Per</span>.<span class="property">walks</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`走路`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>1.构造函数的属性和方法被称为静态成员</p><p>2.一般公共特征的属性或方法静态成员设置为静态成员</p><p>3.静态成员方法中的this指向构造函数本身</p></blockquote><h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><p>在JavaScript中最主要的数据类型有6种</p><p>基本数据类型：字符串、数值、布尔、underfined、null</p><p>引用类型：对象 Object，Array，RegExp，Date等</p><p>包装类型：String、Number、Boolean等 </p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object是内置的构造函数，用于创建普通对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用字面量方式声明对象，而不是Object构造函数</p></blockquote><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>1.Object.keys 静态方法获取对象中所有属性（键）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 获取所有的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))</span><br></pre></td></tr></table></figure><blockquote><p>注意：返回的是一个数组</p></blockquote><p>2.Object.values 静态方法获取对象中所有属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 获取所有的属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))</span><br></pre></td></tr></table></figure><blockquote><p>注意：返回的是一个数组</p></blockquote><p>3.Object.assign 静态方法常用于对象拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> o = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">// 对象拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>经常使用的场景给对象添加属性</p></blockquote><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Array是内置的构造函数，用于创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><table><thead><tr><th align="center">方法</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">forEach</td><td align="center">遍历数组</td><td align="center">不返回，用于不改变值，经常用于查找打印输出值</td></tr><tr><td align="center">filter</td><td align="center">过滤数组</td><td align="center">筛选数组元素，并生成新数组</td></tr><tr><td align="center">map</td><td align="center">迭代数组</td><td align="center">返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</td></tr><tr><td align="center">reduce</td><td align="center">累计器</td><td align="center">返回函数累计处理的结果，经常用于求和等</td></tr></tbody></table><p>1.reduce 返回函数累计处理的结果，经常用于求和等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev + item</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><blockquote><p>prev是累计值，item是当前元素</p></blockquote><blockquote><p>累计值参数：</p><p>1.如果有起始值，则以起始值为准开始累计， 累计值 &#x3D; 起始值</p><p>2.如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计</p><p>3.后面每次遍历就会用后面的数组元素 累计到 累计值 里面 （类似求和里面的 sum ）</p></blockquote><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>5.实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spec = &#123; <span class="attr">size</span>: <span class="string">&#x27;40cm*40cm&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 用values取出所有的值</span></span><br><span class="line"><span class="comment">// console.log(Object.values(spec))</span></span><br><span class="line"><span class="comment">// 转换为字符串</span></span><br><span class="line"><span class="comment">// Object.values(spec).join(&#x27;/&#x27;)</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="title class_">Object</span>.<span class="title function_">values</span>(spec).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>6.实例方法 <code>find</code> 查找元素，返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回undefined(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="number">1000</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line"><span class="attr">salary</span>: <span class="number">2000</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line"><span class="attr">salary</span>: <span class="number">5000</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === <span class="string">&#x27;小米&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><p>7.实例方法 <code>every</code> 检测数组所有元素是否都符合指定条件，如果所有元素都通过检测返回true，否则返回false(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">       <span class="keyword">const</span> re = arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">10</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><p>8.实例方法 <code>some</code> 检测数组中的元素是否满足指定条件如果数组中有元素满足条件返回true，否则返回false</p><p>9.实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p><p>10.实例方法 <code>sort</code> 对原数组单元值排序</p><p>11.实例方法 <code>splice</code> 删除或替换原数组单元心</p><p>12.实例方法 <code>reverse</code> 反转数组</p><p>13.实例方法 <code>findIndex</code> 查找元素的索引值</p><h4 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form()"></a>Array.form()</h4><p>伪数组转换为真数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(li)</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="title class_">Array</span>.<span class="title function_">from</span>(li)</span><br><span class="line">lis.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis)</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>1.实例属性<code>length</code>用来获取字符串的度长(重点)</p><p>2.实例方法<code>split(&#39;分隔符&#39;)</code>用来将字符串拆分成数组(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;pink,red&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p>3.实例方法<code>substring(需要截取的第一个字符的索引[ ,结束的索引号])</code>用于字符串截取(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天又要做核酸了&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">5</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>4.实例方法<code>startsWith(检测字符串[，检测位置索引号])</code>检测是否以某字符开头(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天我很开心&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;今天&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>5.实例方法<code>includes(搜索的字符串[，检测位置索引号])</code>判断一个字符串是否包含在另一个字符串中，根据情况返回true或false(重点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;jxy最帅&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;jxy&#x27;</span>))</span><br></pre></td></tr></table></figure><p>6.实例方法<code>toUpperCase</code>用于将字母转换成大写</p><p>7.实例方法<code>toLowerCase</code>用于将就转换成小写</p><p>8.实例方法<code>indexOf</code>检测是否包含某字符</p><p>9.实例方法<code>endsWith</code>检测是否以某字符结尾</p><p>10.实例方法<code>replace</code>用于替换字符串，支持正则匹配</p><p>11.实例方法<code>match</code>用于查找字符串，支持正则匹配</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>toFixed()设置保留小数位的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">10.1234</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// 10.12</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域&amp;解构&amp;箭头函数</title>
      <link href="/posts/2979.html"/>
      <url>/posts/2979.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没学习了，发现电脑有两个问题</p><h2 id="1-vscode-tab创建不了html模板了"><a href="#1-vscode-tab创建不了html模板了" class="headerlink" title="1.vscode !+ tab创建不了html模板了"></a>1.vscode !+ tab创建不了html模板了</h2><p>解决方法：</p><blockquote><p>设置里搜索Trigger Expansion On Tab，找到后打上勾就好了</p></blockquote><h2 id="2-Chrome浏览器F12控制台打开慢"><a href="#2-Chrome浏览器F12控制台打开慢" class="headerlink" title="2.Chrome浏览器F12控制台打开慢"></a>2.Chrome浏览器F12控制台打开慢</h2><p>解决方法：</p><blockquote><p>f12打开后，点设置，把language改为English US就OK了！</p></blockquote><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>了解作用域队程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染</p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><h4 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h4><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//函数内部是函数作用域属于局部变量</span></span><br><span class="line">    <span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)<span class="comment">//此处报错，函数外部不能使用局部作用域变量</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.函数内部声明的变量，在函数外部无法被访问</p><p>2.函数的参数也是函数内部的局部变量</p><p>3.不同函数内部声明的变量无法相互访问</p><p>4.函数执行完毕后，函数内部的变量实际被清空了</p></blockquote><h4 id="块作用域："><a href="#块作用域：" class="headerlink" title="块作用域："></a>块作用域：</h4><p>在JavaScript中使用{}包裹的代码称为代码块，代码块内部声明的变量外部将<em><strong>有可能</strong></em>无法被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span><br><span class="line">    <span class="comment">// t 只能在该代码块中被访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t)<span class="comment">//正常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超出了t的作用域</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t)<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.let声明的变量会产生块作用域，var不会产生块作用域</p><p>2.const声明的常量也会产生块作用域</p><p>3.不同代码块之间的变量无法互相访问</p><p>4.推荐使用let或const</p></blockquote><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p> script标签和.js文件的最外层就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问，全局作用域中声明的变量，任何其他作用域都可以被访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域下声明num变量</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//函数内部可以使用全局作用域的变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.为Window对象动态添加的属性默认也是全局的，不推荐！</p><p>2.函数中未使用任何关键字声明的变量为全局变量，不推荐！！</p><p>3.尽可能少的声明全局变量，防止全局变量被污染</p></blockquote><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链本质上是底层的变量查找机制</p><p>在函数被执行时，会优先查找当前函数作用域中查找变量</p><p>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</p><blockquote><p>总结：</p><p>1.嵌套关系的作用域串联起来形成了作用域链</p><p>2.相同作用域链中按着从小到大的规则查找变量</p><p>3.子作用域能够访问父作用域，父级作用域无法访问子级作用域</p></blockquote><h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a>JS垃圾回收机制</h3><p>JS中内存你的分配和回收都是自动完成的，内存你在不使用的时候会被垃圾回收器自动回收</p><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>不再用到的内存，没有及时释放，就叫做内存泄露</p><h4 id="内存的生命周期"><a href="#内存的生命周期" class="headerlink" title="内存的生命周期"></a>内存的生命周期</h4><p>JS环境中分配的内存，一般有如下生命周期：</p><p>1.内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p><p>2.内存使用：即读写内存，也就是使用变量、函数等</p><p>3.内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</p><blockquote><p>注意：</p><p>1.全局变量一般不会回收（关闭页面回收）</p><p>2.一般情况下局部变量的值，不用了，会被自动回收掉</p></blockquote><h4 id="引用技术法："><a href="#引用技术法：" class="headerlink" title="引用技术法："></a>引用技术法：</h4><p>IE采用的引用计数算法，定义“内存不再使用”的标签很简单，就是看一个对象是否有指向它的引用</p><p>算法：</p><p>1.跟踪记录每个值被引用的次数</p><p>2.如果这个值的被引用了一次，那么就记录次数1</p><p>3.多次引用会累加</p><p>4.如果减少一个引用就减1 </p><p>5.如果引用次数是0，则释放内存</p><blockquote><p>缺陷：</p><p>嵌套引用，如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露</p></blockquote><h4 id="标记清除法："><a href="#标记清除法：" class="headerlink" title="标记清除法："></a>标记清除法：</h4><p>1.标记清除算法将“不再使用的对象”定义为“无法到达的对象”</p><p>2.从根部（JS中就是全局对象）触发定时扫描内存中的对象。凡是能从根部到达的对象，都是还需要使用的</p><p>3.那些无法由更不触发触及到的对象被标记为不再使用，稍后进行回收</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域（闭包 &#x3D; 内层函数 + 外层函数的变量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036231.jpg"></p><blockquote><p>作用：</p><p>封闭数据，提供操作，外部也可以访问函数内部的变量</p></blockquote><h4 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h4><p>实现数据的私有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    i++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用了<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>i在外部是全局变量，很容易被修改</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036562.jpg"></p><p>闭包的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用了<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">count</span>()</span><br></pre></td></tr></table></figure><blockquote><p>这样就实现了数据私有，无法直接修改i</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207112036561.png"></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>是JavaScript中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.所有var声明的变量提升到当前作用域的最前面</span></span><br><span class="line"><span class="comment">// 2.只提升声明，不提升赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;件&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的两行代码相当于</span></span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;件&#x27;</span>)</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.变量在未声明即被访问时会报语法错误</p><p>2.变量在var声明之前即被访问，变量的值为underfined</p><p>3.let&#x2F;const声明的变量不存在变量提升</p><p>4.变量提升出现在相同作用域当中</p><p>5.实际开发中推荐先声明再访问变量</p></blockquote><h2 id="二、函数进阶"><a href="#二、函数进阶" class="headerlink" title="二、函数进阶"></a>二、函数进阶</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">// 1.会把所有函数声明提升到当前作用域的最前面</span></span><br><span class="line">       <span class="comment">// 2.只提升函数声明，不提升函数调用</span></span><br><span class="line">       <span class="title function_">fn</span>()</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数提升`</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//函数表达式必须先声明和赋值，后调用，否则报错</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line">       <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数表达式`</span>)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.函数提升能够使函数的声明调用更灵活</p><p>2.函数表达式不存在提升的现象</p><p>3.函数提升出现在相同作用域当中</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p>arguments是函数内部内置的伪数组变量，它包含了调用函数时所传入的所有实参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//arguments 动态参数 只存在于函数里面</span></span><br><span class="line">    <span class="comment">//是伪数组</span></span><br><span class="line">    <span class="comment">// console.log(arguments)</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><p>1.arguments是一个伪数组，只存在于函数中</p><p>2.arguments的作用是动态获取函数的实参</p><p>3.可以通过for循环依次得到传递过来的实参</p></blockquote><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p><blockquote><p>…是语法符号，置于最末函数形参之前，用于获取多余的实参</p><p>借助…获取的剩余实参，是个真数组</p></blockquote><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><p>展开运算符(…)，将一个数组进行展开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 展开运算符，可以展开数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组最大小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr1)) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr = [...arr1, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><blockquote><p>1.不会修改原数组</p><p>典型运用场景：求数组最大值（最小值）、合并数组等</p></blockquote><blockquote><p>剩余参数：函数参数使用，得到真数组</p><p>展开运算符：数组中使用，数组展开</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>引入箭头函数的目的是更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁</p><blockquote><p>使用场景：箭头函数更适用于那些本来需要匿名函数的地方</p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>语法1：基本写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>语法2：只有一个参数可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>语法3：如果函数体只有一行代码，可以写到一行上，并且无需写return直接返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x, y</span>) =&gt; x + y</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>语法4：加括号的函数体返回对象字面量表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">uname</span>) =&gt; (&#123;<span class="attr">uname</span>: uname&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;刘德华&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h4><blockquote><p>普通函数有arguments动态参数</p><p>箭头函数没有arguments动态参数，但是有剩余参数…args</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="箭头函数this"><a href="#箭头函数this" class="headerlink" title="箭头函数this"></a>箭头函数this</h4><p>箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数中的this     是上一层的作用域的this</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象方法箭头函数 this</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">// this 指向 window</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向 obj</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">count</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><blockquote><p>事件回调函数使用箭头函数时，this为全局的Window，因此DOM事件回调函数为了简便，不推荐使用箭头函数</p></blockquote><h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><p>1.赋值运算符 &#x3D; 左侧的[]用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</p><p>2.变量的顺序对应数组单元值的位置依次进行赋值操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">80</span>]</span><br><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">const</span> [max, min, avg] = arr</span><br><span class="line"><span class="comment">// 相当于下面的三行</span></span><br><span class="line"><span class="comment">// const max = arr[0]</span></span><br><span class="line"><span class="comment">// const min = arr[1]</span></span><br><span class="line"><span class="comment">// const avg = arr[2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(avg)</span><br></pre></td></tr></table></figure><p>典型应用交互2个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[b, a] = [a, b]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br></pre></td></tr></table></figure><blockquote><p>加; 的原因</p><p>1.立即执行函数</p><p>2.数组解构</p></blockquote><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p>变量多 单元值少的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// underfined</span></span><br></pre></td></tr></table></figure><p>变量少 单元值多的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [e, f] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>利用剩余参数解决变量少 单元值多的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// [3, 4] 真数组</span></span><br></pre></td></tr></table></figure><p>防止有underfined传递单元值的情况，可以设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="string">&#x27;手机&#x27;</span>, b = <span class="string">&#x27;华为&#x27;</span>] = [<span class="string">&#x27;小米&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 华为</span></span><br></pre></td></tr></table></figure><p>按需导入，忽略某些返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, , d] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;格力&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 华为</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 格力</span></span><br></pre></td></tr></table></figure><p>支持多维数组的解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>对象结构是将对象属性和方法快速批量赋值给一系列变量的简洁语法</p><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><p>1.赋值运算符 &#x3D; 左侧的 {} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</p><p>2.对象属性的值将被赋值给与属性名相同的变量</p><p>3.注意解构的变量名不要和外面的变量名冲突否则报错</p><p>4.对象中找不到与变量名一致的属性时变量值为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; uname, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><p>给新的变量名赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  对象解构的变量名 可以重新改名 旧变量名：新变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">uname</span>: username, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;jxy&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><p>数组对象解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构数组对象</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> [&#123; uname, age &#125;] = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>多级对象解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line">        <span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line">        <span class="attr">sister</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="attr">family</span>: &#123; mother, father, sister &#125;&#125; = pig</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mother)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father)        </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sister)        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遍历数组forEach方法"><a href="#遍历数组forEach方法" class="headerlink" title="遍历数组forEach方法"></a>遍历数组forEach方法</h3><p>forEach()方法用于调用数组的每个元素，并将元素传递给回调函数</p><blockquote><p>主要使用场景：遍历数组的每个元素</p></blockquote><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">//数组元素 red green pink</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 索引号</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1.forEach主要是遍历数组</p><p>2.参数当前数组元素是必须写的，索引号可选</p></blockquote><h3 id="筛选数组filter方法"><a href="#筛选数组filter方法" class="headerlink" title="筛选数组filter方法"></a>筛选数组filter方法</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p><blockquote><p> 主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组</p><p>参数：currentValue 必须写， index 可选</p><p>因为返回新数组，所以不会影响原数组</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习笔记</title>
      <link href="/posts/16321.html"/>
      <url>/posts/16321.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>是一种运行在客户端（浏览器）的编程语言，实现人机交互效果</p><h3 id="JavaScript的作用"><a href="#JavaScript的作用" class="headerlink" title="JavaScript的作用"></a>JavaScript的作用</h3><p>网页特效（监听用户的一些行为让网页做出对应的反馈）</p><p>表单验证（针对表单数据的合法性进行判断）</p><p>数据交互（获取后台的数据，渲染到前端）</p><p>服务端编程（node.js）</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p>目的：规定JS基础语法核心知识</p><p>比如：变量、分支语句、循环语句、对象等等</p><h4 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h4><h5 id="DOM（页面文档对象模型）"><a href="#DOM（页面文档对象模型）" class="headerlink" title="DOM（页面文档对象模型）"></a>DOM（页面文档对象模型）</h5><p>目的：操作文档</p><p>比如：对页面元素进行移动、大小、添加删除等操作</p><h5 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h5><p>目的：操作浏览器</p><p>比如：页面弹窗，检测窗口高度、存储数据到浏览器等等</p><h3 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h3><h4 id="内联JavaScript"><a href="#内联JavaScript" class="headerlink" title="内联JavaScript"></a>内联JavaScript</h4><p>代码写在标签内部</p><p><strong>注意：后面vue框架会用这种模式</strong></p><h4 id="内部JavaScript"><a href="#内部JavaScript" class="headerlink" title="内部JavaScript"></a>内部JavaScript</h4><p>直接写在html文件中，用script标签包住</p><p>规范：script标签写在上面</p><blockquote><p>拓展：alert(‘你好，js’)      页面弹出警告对话框</p></blockquote><h4 id="外部JavaScript"><a href="#外部JavaScript" class="headerlink" title="外部JavaScript"></a>外部JavaScript</h4><p>代码写在以.js结尾的文件里</p><p>语法：通过script标签，引入到html页面中</p><h3 id="JavaScript注释"><a href="#JavaScript注释" class="headerlink" title="JavaScript注释"></a>JavaScript注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>符号：&#x2F;&#x2F;</p><p>作用：&#x2F;&#x2F;右边这一行的代码会被忽略</p><p>快捷键：ctrl+&#x2F;</p><h4 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h4><p>符号：&#x2F;* *&#x2F;</p><p>作用：在之间的内容会被忽略</p><p>快捷键：shift+alt+A</p><h3 id="了解JavaScript结束符"><a href="#了解JavaScript结束符" class="headerlink" title="了解JavaScript结束符"></a>了解JavaScript结束符</h3><p>结束符：英文分号;</p><p>可写可不写</p><p>换行符（回车）会被识别成结束符，所以一个完整的语句，不要手动换行</p><p>为了风格统一，要么都写，要么都不写</p><h3 id="JavaScript输入输出语法"><a href="#JavaScript输入输出语法" class="headerlink" title="JavaScript输入输出语法"></a>JavaScript输入输出语法</h3><h4 id="输出语法"><a href="#输出语法" class="headerlink" title="输出语法"></a>输出语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p>向body内输出内容</p><p>如果输出的内容写的是标签，也会被解析网页元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p>页面弹出警告对话框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;控制台打印&#x27;</span>)</span><br></pre></td></tr></table></figure><p>控制台输出语法，程序员调试使用</p><h4 id="输入语句"><a href="#输入语句" class="headerlink" title="输入语句"></a>输入语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名：&#x27;</span>);</span><br></pre></td></tr></table></figure><p>显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>在计算机科学中，字面量（literal）是在计算机中描述事&#x2F;物</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h3><p>变量是计算机中用来存储数据的“容器”，简单理解就是一个盒子</p><p>变量是用来存放数据的。变量是容器而不是数据</p><h3 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用"></a>变量的基本使用</h3><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>要想使用变量，首先需要创建变量</p><p>声明变量有两部分构成：声明关键字、变量名（标识）</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名</span><br></pre></td></tr></table></figure><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p>变量名（标识符）+   &#x3D;   字面量</p><h4 id="更新变量"><a href="#更新变量" class="headerlink" title="更新变量"></a>更新变量</h4><p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p><h3 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h3><p>是程序在内存中申请的一块用于存放数据的小空间</p><h3 id="变量命名规则与规范"><a href="#变量命名规则与规范" class="headerlink" title="变量命名规则与规范"></a>变量命名规则与规范</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>不能用关键字</p><p>只能用下划线、字母、数字、$组成，且数字不能开头</p><p>字母严格区分大小写</p><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><p>起名要有意义</p><p>遵循小驼峰命名法：第一个单词首字母小写，后面每个单词首字母大写</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数字型（number）"><a href="#数字型（number）" class="headerlink" title="数字型（number）"></a>数字型（number）</h4><p>JavaScript中的正数、负数、小数等统一称为数字类型</p><p>JS是弱数据类型，变量到底属于那种类型，只有赋值之后才知道</p><h4 id="字符串型（string）"><a href="#字符串型（string）" class="headerlink" title="字符串型（string）"></a>字符串型（string）</h4><p>通过<strong>单引号（’’）</strong>、<strong>双引号（“”）</strong>或反引号（&#96;&#96;）包裹的数据叫字符串，推荐<strong>单引号</strong></p><blockquote><p>注意:无论单引号或是双引号必须成对使用</p><p>​单引号&#x2F;双引号可以互相嵌套（外双内单，外单内双）</p></blockquote><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我叫&#x27;</span> + <span class="string">&#x27;刘德华&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>作用：拼接字符串和变量</p><p>符号：&#96;&#96;</p><p>​内容拼接变量时，用${}包住变量</p><h4 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h4><p>两个固定的值true（真）和false（假）</p><h4 id="未定义型（undefined）"><a href="#未定义型（undefined）" class="headerlink" title="未定义型（undefined）"></a>未定义型（undefined）</h4><p>只声明变量，不赋值的情况下，变量的默认值为underfined</p><h4 id="空类型（null）"><a href="#空类型（null）" class="headerlink" title="空类型（null）"></a>空类型（null）</h4><p>null表示值为空</p><p>null表示赋值了，但是内容为空</p><h3 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h3><p>通过typeof关键字检测数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> 变量)</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="为什么要类型转换"><a href="#为什么要类型转换" class="headerlink" title="为什么要类型转换"></a>为什么要类型转换</h3><p>JavaScript是弱数据类型，JavaScript也不知道变量到底属于那种数据类型，只有赋值了才清楚</p><p>注意：使用表单、prompt获取过来的数据默认是<strong>字符串类型</strong>的，此时就不能简单的进行加分运算</p><p>通俗来说，就是把一种数据类型的变量转换成我们需要的数据类型</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换</p><h4 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h4><p>+号俩边只要有一个是字符串，都会把另外一个转换成字符串</p><p>除了+以外的算术运算符，比如-  *  &#x2F;  等都会把数据转成数字类型</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>转换类型不明确，靠经验才能总结</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>+号作为正号解析可以转换成Number</p><h3 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h3><p>自己写代码告诉系统该转换成什么类型</p><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><h5 id="Number（数据）"><a href="#Number（数据）" class="headerlink" title="Number（数据）"></a>Number（数据）</h5><p>转成数字类型</p><p>如果字符串内容里有非数字，转换失败时结果为NaN(Not a Number) 即不是一个数字</p><p>NaN也是number类型的数据，代表非数字</p><h5 id="parselnt（数据）"><a href="#parselnt（数据）" class="headerlink" title="parselnt（数据）"></a>parselnt（数据）</h5><p>只保留整数</p><h5 id="parseFloat（数据）"><a href="#parseFloat（数据）" class="headerlink" title="parseFloat（数据）"></a>parseFloat（数据）</h5><p>可以保留小数</p><h4 id="转换为字符型"><a href="#转换为字符型" class="headerlink" title="转换为字符型"></a>转换为字符型</h4><h5 id="String（数据）"><a href="#String（数据）" class="headerlink" title="String（数据）"></a>String（数据）</h5><h5 id="变量-toString（进制）"><a href="#变量-toString（进制）" class="headerlink" title="变量.toString（进制）"></a>变量.toString（进制）</h5><h2 id="JavaScript流程控制"><a href="#JavaScript流程控制" class="headerlink" title="JavaScript流程控制"></a>JavaScript流程控制</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><blockquote><p>优先级</p><p>先乘除后加减，有括号先算括号里面的</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><blockquote><p>+&#x3D;        *&#x3D;        &#x2F;&#x3D;</p><p>作用：简化代码</p></blockquote><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>自增：++</p><p>自减：–</p><blockquote><p>前置自增和后置自增单独使用没有区别</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前置自增：先自加，再使用（记忆口诀：++在前 先加）</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++i + <span class="number">2</span>)      <span class="comment">//结果是4</span></span><br><span class="line"><span class="comment">//注意：i是2，i先自加1，变成2之后，再和后面的2相加</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">后置自增：先使用，再自加（记忆口诀：++在后 后加）</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + <span class="number">2</span>)        <span class="comment">//结果是3</span></span><br><span class="line"><span class="comment">//注意：此时的i是1，先和2相加，先运算输出完毕后，i再自加是2</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><h5 id="比较运算符的介绍"><a href="#比较运算符的介绍" class="headerlink" title="比较运算符的介绍"></a>比较运算符的介绍</h5><p>作用：比较两个数据大小、是否相等</p><h5 id="比较运算符的使用"><a href="#比较运算符的使用" class="headerlink" title="比较运算符的使用"></a>比较运算符的使用</h5><blockquote><p>&#x3D;&#x3D;  只要值一样就是true，不管数据类型</p><p>判断要用&#x3D;&#x3D;&#x3D;      开发常用  要求值和数据类型完全一样</p></blockquote><h5 id="比较运算符的细节"><a href="#比较运算符的细节" class="headerlink" title="比较运算符的细节"></a>比较运算符的细节</h5><blockquote><p>字符串比较，比较的是字符对应的ASCII码</p><p>NaN不等于任何值，包括它本身</p><p>尽量不要比较小数，因为小数有精度问题</p><p>不同类型之间比较会发生隐式转换</p></blockquote><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="逻辑运算符的介-绍"><a href="#逻辑运算符的介-绍" class="headerlink" title="逻辑运算符的介 绍"></a>逻辑运算符的介 绍</h5><blockquote><p>&amp;&amp;逻辑与符号两边都为true，结果才为true一假则假                      3</p><p>||逻辑或符号两边有一个true就为true  一真则真                      2</p><p>!逻辑非true变false，false变true真变假，假变真                 1</p></blockquote><blockquote><p>优先级</p><p>非       与       或</p></blockquote><h5 id="逻辑运算符里的短路"><a href="#逻辑运算符里的短路" class="headerlink" title="逻辑运算符里的短路"></a>逻辑运算符里的短路</h5><blockquote><p>只存在于&amp;&amp;和||中，当满足一定条件会让右边代码不执行</p><p>&amp;&amp;左边为false就短路</p><p>||左边为true就短路</p></blockquote><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><blockquote><p>顺序：小括号          一元运算符（++  – !）     算术运算符（先*&#x2F;% 后+-）  关系运算符       相等运算符 逻辑运算符    赋值运算符         逗号运算符</p></blockquote><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><blockquote><p>表达式是一组代码的集合，JavaScript解释器会将其计算出一个结果</p></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p>JavaScript整句或命令</p></blockquote><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><h5 id="IF分支语句"><a href="#IF分支语句" class="headerlink" title="IF分支语句"></a>IF分支语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    满足条件要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">双分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    满足条件要执行的代码</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    不满足条件执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">多分支<span class="keyword">if</span>语句</span><br><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">   代码<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    代码n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 满足条件执行的代码 : 不满足条件执行的代码</span><br></pre></td></tr></table></figure><h5 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Switch</span>语句</span><br><span class="line"><span class="keyword">switch</span> (数据) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        代码<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        代码<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        代码n</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若没有全等&#x3D;&#x3D;&#x3D;的则执行default里的代码</p><p>switch case 语句一般用于等值判断，不适合于区间判断</p><p>switch case 一般需要配合break关键字使用，没有break会造成case穿透</p></blockquote><h5 id="断点操作"><a href="#断点操作" class="headerlink" title="断点操作"></a>断点操作</h5><p>在某句代码上加标记，当程序执行到这句有标记的代码时会暂停</p><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    要重复执行的代码(循环体)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环三要素</p><p>1.起始值</p><p>2.终止条件（没有终止条件，循环会一直执行，造成死循环）</p><p>3.变量变化量（用自增或自减）</p></blockquote><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="for循环语法"><a href="#for循环语法" class="headerlink" title="for循环语法"></a>for循环语法</h5><blockquote><p>优点</p><p>声明起始值、循环条件、变化值写到一起，一目了然</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值)&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for循环的最大价值：循环数组</p><p>循环另一个叫法遍历</p></blockquote><blockquote><p>长度length arr.length可以得到数组的长度</p></blockquote><blockquote><p>明确循环次数用for循环</p><p>不明确循环次数用while循环</p></blockquote><h5 id="循环退出"><a href="#循环退出" class="headerlink" title="循环退出"></a>循环退出</h5><blockquote><p>continue：结束本次循环，继续下次循环</p><p>break：跳出所在循环</p></blockquote><h5 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值) &#123;</span><br><span class="line">    <span class="keyword">for</span> (声明记录循环次数的变量; 循环条件; 变化值) &#123;</span><br><span class="line">            循环体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">let</span> 数组名 = [数据<span class="number">1</span>, 数据<span class="number">2</span>, ...., 数据n]</span><br></pre></td></tr></table></figure><blockquote><p>数组中，数据的编号也叫索引或下标</p></blockquote><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>用循环把数组中每个元素都访问到，for循环遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; 数组名.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    数组名[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>数组的本质是数据集合，操作数据即<strong>增删改查</strong></p><blockquote><p>查： 数组[下标]</p><p>改：数组[下标]&#x3D;新值</p><p>增：arr.push(新增的内容)arr.unshift(新增的内容)</p><p>删：arr.pop( )arr.shift( )arr.splice(操作的下标，删除的个数)</p></blockquote><h4 id="利用push向数组添加元素（数据）"><a href="#利用push向数组添加元素（数据）" class="headerlink" title="利用push向数组添加元素（数据）"></a>利用push向数组添加元素（数据）</h4><p>数组.push()方法将一个或多个元素添加到数组的<strong>末尾</strong>，<strong>并返回该数组的新长度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">push</span>(元素<span class="number">1</span>, ........,元素n)</span><br></pre></td></tr></table></figure><p>arr.unshift(新增的内容)方法将一个或多个元素添加到数组的<strong>开头</strong>，<strong>并返回该数组的新长度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">unshift</span>(元素<span class="number">1</span>, ........,元素n)</span><br></pre></td></tr></table></figure><h4 id="数组删除元素"><a href="#数组删除元素" class="headerlink" title="数组删除元素"></a>数组删除元素</h4><p>数组.pop()方法从数组中删除最后一个元素，并返回该元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">pop</span>( )</span><br></pre></td></tr></table></figure><p>数组.shift()方法从数组中删除第一个元素，并返回该元素的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">shift</span>( )</span><br></pre></td></tr></table></figure><p>数组.splice( )方法  删除指定元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">arr.<span class="title function_">splice</span>(start, deleteCount)</span><br><span class="line">arr.<span class="title function_">splice</span>(起始位置, 删除几个元素)</span><br></pre></td></tr></table></figure><blockquote><p>start起始位置（从0开始）</p><p>deleteCount不写的话就是从起始位置删到最后</p><p>使用场景</p></blockquote><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        例子</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><p>function，是被设计为执行特定任务的代码块</p><blockquote><p>优点</p><p>精简代码，方便使用</p></blockquote><h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><h4 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 ( ) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><blockquote><p>命名规范</p><p>和变量命名基本一致</p><p>使用小驼峰命名法</p><p>前缀应该为动词</p><p>命名建议常用动词约定</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353116.png"></p><h4 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名( )</span><br></pre></td></tr></table></figure><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><blockquote><p>优点</p><p>若函数完成功能需要调用者传入数据，那么久需要用有参数的函数</p><p>极大提高函数的灵活性</p></blockquote><h4 id="声明语法-1"><a href="#声明语法-1" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数列表</p><p>传入数据列表</p><p>声明这个函数需要传入几个数据</p><p>多个数据用逗号隔开</p></blockquote><h4 id="调用语法-1"><a href="#调用语法-1" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(传递的参数列表)</span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p><p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p><blockquote><p>形参可以理解为是在这个函数内声明的变量</p><p>实参可以理解为是给这个变量赋值</p><p>开发中保持形参和实参的个数一致</p></blockquote><h4 id="逻辑中断"><a href="#逻辑中断" class="headerlink" title="逻辑中断"></a>逻辑中断</h4><p>形参如果不被赋值，就是undefined</p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>当调用某个函数，这个函数会返回结果</p><h4 id="return返回数据"><a href="#return返回数据" class="headerlink" title="return返回数据"></a>return返回数据</h4><p>当函数需要返回数据出去时，用return关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 数据</span><br></pre></td></tr></table></figure><blockquote><p>细节</p><p>函数体中使用return关键字能将内部的执行结果交给函数外部使用</p><p>函数内部只能出现一次return，并且return后面代码不会再被执行，return后面的数据不要换行写</p><p>return会立即结束当前函数</p><p>函数可以没有return，这种情况函数默认返回值为underfined</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一段程序代码中所用到的名字并不总是有效可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的作用域</p><blockquote><p>优点</p><p>提高程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突</p></blockquote><blockquote><p>全局作用域：</p><p>作用于所有代码执行的环境（整个script标签内部）或者一个独立的js文件全局有效</p><p>局部作用域：</p><p>作用于函数内的代码环境也称之为函数作用域</p><p>块级作用域：</p><p>块作用域由{ }包括，if语句和for语句里面的{ }等</p></blockquote><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>在JavaScript中，根据作用域的不同，变量可以分为</p><blockquote><p>全局变量：</p><p>函数外部let的变量——全局变量在任何区域都可以访问和修改</p><p>局部变量：</p><p>函数内部let的变量——局部变量只能在当前函数内部访问和修改</p><p>块级变量：</p><p>{ }内部的let变量——let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问</p></blockquote><blockquote><p>注意</p><p>如果函数内部或者块级作用域内部，变量没有声明，直接赋值，也可以当做全局变量来看</p><p>另一种特殊情况，函数内部的形参可以看做局部变量</p></blockquote><h4 id="变量访问原则——作用域链"><a href="#变量访问原则——作用域链" class="headerlink" title="变量访问原则——作用域链"></a>变量访问原则——作用域链</h4><p>根据在内部函数可以访问外部函数变量的机制，用链式查找决定哪些数据能被内部函数访问</p><p><strong>采用就近原则</strong></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>将匿名函数赋值给一个变量，并且通过变量名进行调用</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">fn ( )        <span class="comment">//函数名 ( )</span></span><br></pre></td></tr></table></figure><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>避免全局变量之间的污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"> </span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125; )   ( );</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"> </span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125;   ( )   );</span><br><span class="line"><span class="comment">//不需要调用，立即执行</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h2><h3 id="对象是什么"><a href="#对象是什么" class="headerlink" title="对象是什么"></a>对象是什么</h3><p>JavaScript里的一种数据类型，是一种无序的数据集合</p><h3 id="对象使用"><a href="#对象使用" class="headerlink" title="对象使用"></a>对象使用</h3><p>掌握对象语法，保存多个数据</p><h4 id="声明语法-2"><a href="#声明语法-2" class="headerlink" title="声明语法"></a>声明语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="对象有属性和方法组成"><a href="#对象有属性和方法组成" class="headerlink" title="对象有属性和方法组成"></a>对象有属性和方法组成</h4><blockquote><p>属性：信息或叫特征（名词）</p><p>方法：功能或叫行为（动词）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">    属性名：属性值,</span><br><span class="line">    方法名：函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>数据描述性的信息称为属性</p><blockquote><p>属性都是成对出现的，包括属性名和值，用英文的:分隔</p><p>多个属性之间使用英文,分隔</p><p>属性就是依附在对象上的变量（外面是变量，对象内是属性）</p><p>属性名可以使用“”或 ‘’，<strong>一般情况下省略</strong>，除非名称遇到特殊符号</p></blockquote><h5 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h5><p>声明对象，添加若干属性后，可以使用.或[]获取对象中属性对应的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  person  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  person  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>数据行为性的信息称为方法，其本质是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法是由方法名和函数两部分构成，它们之间使用：分隔</p><p>多个属性之间使用英文，分隔</p><p>方法是依附在对象中的函数</p><p>方法名可以使用“”或 ‘’，<strong>一般情况下省略</strong>，除非名称遇到特殊符号</p></blockquote><h5 id="方法访问"><a href="#方法访问" class="headerlink" title="方法访问"></a>方法访问</h5><p>声明对象，添加若干方法后，可以使用.调用对象中函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span> (<span class="params"> </span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象名.方法名 ( )</span></span><br><span class="line">person.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h3 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h3><p>对象本质是无序的数据集合</p><blockquote><p>查（查询对象）：</p><p>对象.属性或者对象[‘属性’]对象.方法( )</p><p>改（重新赋值）：</p><p>对象.属性 &#x3D; 值对象.方法 &#x3D; function ( ) { }</p><p>增（对象添加新的数据）：</p><p>对象名.新属性名 &#x3D; 新值</p><p>删（删除对象中属性）：</p><p>delete 对象名.属性名</p></blockquote><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><blockquote><p>注意</p><p>对象没有像数组一样的length属性，所以无法确定长度</p><p>对象里面是无序的键值队，没有规律，不像数组里面有规律的下标</p></blockquote><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span>循环语句</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> 对象名) &#123; &#125;</span><br><span class="line">k   变量属性名</span><br></pre></td></tr></table></figure><blockquote><p>k是获得对象的属性名，对象名[k]是获得属性值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  obj  =  &#123;</span><br><span class="line">    name : <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> boj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)<span class="comment">//打印属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])<span class="comment">//打印属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="内置对象是什么"><a href="#内置对象是什么" class="headerlink" title="内置对象是什么"></a>内置对象是什么</h4><p>JavaScript内部提供的对象，包含各种属性和方法给开发者调用</p><h4 id="内置对象Math"><a href="#内置对象Math" class="headerlink" title="内置对象Math"></a>内置对象Math</h4><p>Math对象是JavaScript提供的一个“数学高手”对象，提供了一系列做数学运算的方法</p><blockquote><p>random：生成0-1之间的随机数（包含0不包括1）</p><p>ceil：向上取整</p><p>floor：向下取整</p><p>max：找最大数</p><p>min：找最小数</p><p>pow：幂运算</p><p>abs：绝对值</p></blockquote><p>生成N-M之间的随机数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>( ) * (M - N + <span class="number">1</span>)) + N</span><br></pre></td></tr></table></figure><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353117.png"></p><h3 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h3><h4 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>简单类型又叫做基本数据类型或者值类型</p><blockquote><p>值类型：简单数据类型&#x2F;基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型 </p><p>string ，number，boolean，undefined，null</p></blockquote><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><p> 值类型变量的数据直接存放在变量（栈空间）中</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>复杂类型又叫做引用类型</p><blockquote><p>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p></blockquote><h5 id="内存分配-1"><a href="#内存分配-1" class="headerlink" title="内存分配"></a>内存分配</h5><p>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><h4 id="堆栈空间分配区别"><a href="#堆栈空间分配区别" class="headerlink" title="堆栈空间分配区别"></a>堆栈空间分配区别</h4><blockquote><p>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中 的栈</p><p>简单数据类型存放到栈里面</p><p>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收</p><p>引用数据类型存放到堆里面</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353118.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刚接触计算机时学的一些小知识</title>
      <link href="/posts/24871.html"/>
      <url>/posts/24871.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客的重要性"><a href="#博客的重要性" class="headerlink" title="博客的重要性"></a>博客的重要性</h1><ol><li><p><em><strong>总结和思考</strong></em></p></li><li><p><em><strong>提升文笔组织能力</strong></em></p></li><li><p><em><strong>提升学习总结能力(小章学完总结，大章学完总结，进行体系的思考规划)</strong></em></p></li><li><p><em><strong>提升逻辑思维能力（总分，体系要学什么，再进行细分）</strong></em></p></li></ol><h3 id="哪几种方式"><a href="#哪几种方式" class="headerlink" title="哪几种方式"></a>哪几种方式</h3><ol><li><em><strong>博客网</strong></em></li><li><em><strong>CSDN</strong></em></li><li><em><strong>自己搭建网站</strong></em></li></ol><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p><em><strong>标题：Ctrl+1-6</strong></em></p><p><em><strong>字体：</strong></em></p><ol><li><em><strong>斜体（Ctrl+I）</strong></em></li><li><em><strong>粗体（Ctrl+B）</strong></em></li></ol><p><em><strong>分割线：3个+，3个-，3个</strong></em></p><p><em><strong>代码：3个&#96;+Enter</strong></em></p><p><em><strong>链接：[链接文字]+(链接地址)或者&lt;链接地址&gt;</strong></em></p><h1 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h1><p><em><strong>能够按照程序运行，自动，高速处理海量数据的现代化智能电子设备，由硬件和软件组成</strong></em></p><h1 id="Windows常用快捷键"><a href="#Windows常用快捷键" class="headerlink" title="Windows常用快捷键"></a>Windows常用快捷键</h1><p><em><strong>Ctrl+A：全选</strong></em></p><p><em><strong>Ctrl+X：剪切</strong></em></p><p><em><strong>Ctrl+Z：撤销</strong></em></p><p><em><strong>Ctrl+S：保存</strong></em></p><p><em><strong>Alt+F4：关闭</strong></em></p><p><em><strong>Shift+Delete：永久删除</strong></em></p><p><em><strong>Ctrl+Shift+Esc：打开任务管理器</strong></em></p><h1 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h1><h2 id="打开cmd的方法"><a href="#打开cmd的方法" class="headerlink" title="打开cmd的方法"></a>打开cmd的方法</h2><ol><li><em><strong>开始+系统+命令提示符</strong></em></li><li><em><strong>Win键+R 输入cmd打开控制台</strong></em></li><li><em><strong>任意的文件夹下面，按住Shift+鼠标右键点击，打开命令行窗口</strong></em></li><li><em><strong>资源管理器的地址栏前加上cmd路径</strong></em></li></ol><p><em><strong>管理员方式运行：选择以管理员方式运行</strong></em></p><h1 id="常用的Dos命令"><a href="#常用的Dos命令" class="headerlink" title="常用的Dos命令"></a>常用的Dos命令</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#盘符切换   D:(英文)</span><br><span class="line">#查看当前目录下的所有文件 <span class="built_in">dir</span></span><br><span class="line">#切换目录 <span class="built_in">cd</span> (change directory)</span><br><span class="line">#返回上一级 <span class="built_in">cd</span>..</span><br><span class="line">#清理屏幕 <span class="built_in">cls</span> (clear screen)</span><br><span class="line">#退出终端 <span class="keyword">exit</span></span><br><span class="line">#查看电脑ip <span class="built_in">ipconfig</span></span><br><span class="line">#打开应用</span><br><span class="line"><span class="number">1</span>. calc 计算器</span><br><span class="line"><span class="number">2</span>. mspaint 画图</span><br><span class="line"><span class="number">3</span>. notepad 记事本</span><br><span class="line">#<span class="built_in">ping</span>命令</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br><span class="line">#文件命令</span><br><span class="line">    <span class="built_in">md</span> 创建文件夹</span><br><span class="line">    <span class="built_in">rd</span> 移除文件</span><br><span class="line">    <span class="built_in">cd</span>&gt;文件名  创建文件</span><br><span class="line">    <span class="built_in">del</span>文件名 删除文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习笔记</title>
      <link href="/posts/42876.html"/>
      <url>/posts/42876.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础选择器-字体文本相关样式"><a href="#基础选择器-字体文本相关样式" class="headerlink" title="基础选择器+字体文本相关样式"></a>基础选择器+字体文本相关样式</h2><h3 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h3><h4 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h4><p>CSS：层叠样式表</p><h4 id="CSS语法规则"><a href="#CSS语法规则" class="headerlink" title="CSS语法规则"></a>CSS语法规则</h4><p>写在style标签中</p><h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><h4 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h4><p>CSS写在style标签中</p><h4 id="外嵌式"><a href="#外嵌式" class="headerlink" title="外嵌式"></a>外嵌式</h4><p>CSS写在单独的.css文件中（需要用link标签引入）</p><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>CSS写在标签的style属性中（配合JS使用）</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>结构：标签名{css属性名:属性值;}</p><p>作用：通过标签名，找到页面中所有此类标签，设置样式</p><p>注意：无论嵌套多深，都能此类标签并设置样式</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>结构：.类名{css属性名:属性值;}</p><p>作用：通过类名，找到页面中所有带这个类名的标签，设置样式</p><p>注意：所有标签都有class属性，class属性的属性值为类名</p><p>类名不能以数字或者中划线开头</p><p>一个标签可有多个类名，类名间用空格隔开</p><p>类名可有重复，一个类选择器可以选中多个标签</p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>结构：#id属性值{css属性名:属性值;}</p><p>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式</p><p>注意：所有标签上都有id属性</p><p>id属性值是唯一的</p><p>一个标签上只能有一个id属性值</p><p>一个id选择器只能选中一个标签</p><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>结构：*{css属性名：属性值;}</p><p>作用：找到页面中所有的标签，设置样式</p><p>注意：开发中极少使用，特殊情况下才使用</p><p>最常用于去除标签默认的margin和padding</p><h2 id="字体和文本样式"><a href="#字体和文本样式" class="headerlink" title="字体和文本样式"></a>字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>属性名：font-size</p><p>取值：数字+px</p><p>注意：谷歌浏览器默认文字大小16px</p><p>单位要设置，否则无效</p><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><p>属性名：font-weight</p><p>取值：关键字：正常：normal加粗：bold</p><p>纯数字：100-900的整百数</p><p>正常：400加粗：700</p><p>注意：不是所有字体都提供了9种粗细</p><h4 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h4><p>属性名：font-style</p><p>取值：正常（默认值）：normal倾斜：italic</p><h4 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h4><p>属性名：font-family</p><p>取值：具体字体名字</p><p>注意：如果字体名称种存在多个单词，推荐使用引号包裹</p><p>最后一项字体系列不需要引号包裹</p><p>尽量使用系统常见自带字体</p><h4 id="样式层叠问题"><a href="#样式层叠问题" class="headerlink" title="样式层叠问题"></a>样式层叠问题</h4><p>如果给同一个标签设置相同的属性，此时样式会层叠，写在最下面的会生效</p><h4 id="字体font相关属性的连写"><a href="#字体font相关属性的连写" class="headerlink" title="字体font相关属性的连写"></a>字体font相关属性的连写</h4><p>属性名：font（复合属性）</p><p>取值：font:style weight size family;</p><p>注意：只能省略前俩个，省略了相当于设置了默认值</p><p>如果需要同时设置单独和连写形式</p><p>要么把单独的样式写在连写下面</p><p>要么把单独的样式写在连写的里面</p><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>属性名：text-indent</p><p>取值：数字+px 数字+em（1em&#x3D;当前标签的font-size的大小）</p><h4 id="文本水平对齐方式"><a href="#文本水平对齐方式" class="headerlink" title="文本水平对齐方式"></a>文本水平对齐方式</h4><p>属性名：text-align</p><p>取值：left：左对齐center：居中对齐right： 右对齐</p><h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><p>属性名：text-decoration</p><p>取值：underline：下划线line-through：删除线</p><p>​   overline：上划线none：无装饰线</p><p>注意：text-decoration:none用于清除a标签默认的下划线</p><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>属性名：line-height</p><p>作用：控制一行的上下行间距</p><p>取值：数字+px倍数（当前font-size的倍数）</p><p>应用：让单行文本垂直居中可以设置line-height：文字父元素高度</p><p>​网页精准布局时，会设置line-height:1 可以取消上下间距</p><blockquote><p>注意：font: style weight size&#x2F;line-height family;</p></blockquote><h4 id="标签水平居中"><a href="#标签水平居中" class="headerlink" title="标签水平居中"></a>标签水平居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><h2 id="选择器进阶-背景属性-元素显示模式-三大特性"><a href="#选择器进阶-背景属性-元素显示模式-三大特性" class="headerlink" title="选择器进阶+背景属性+元素显示模式+三大特性"></a>选择器进阶+背景属性+元素显示模式+三大特性</h2><h3 id="选择器进阶"><a href="#选择器进阶" class="headerlink" title="选择器进阶"></a>选择器进阶</h3><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><h5 id="后代选择器：空格"><a href="#后代选择器：空格" class="headerlink" title="后代选择器：空格"></a>后代选择器：空格</h5><p>作用：根据HTML标签的嵌套关系，选择父元素后代中满足条件的元素</p><p>选择器语法： 选择器1 选择器2{css}</p><h5 id="子代选择器：-gt"><a href="#子代选择器：-gt" class="headerlink" title="子代选择器：&gt;"></a>子代选择器：&gt;</h5><p>作用：根据HTML标签的嵌套关系，选择父元素子代中满足的元素</p><p>选择器语法：选择器1&gt;选择器2{css}</p><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>写法：,</p><p>作用：同时选中多组标签，设置相同的样式</p><p>选择器语法：选择器1,选择器2{css}</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>写法：紧挨着</p><p>作用：选中页面中同时满足多个选择器的标签</p><p>选择器语法：选择器1选择器2{css}</p><p>注意：如果有标签选择器，标签选择器必须写在最前面</p><h4 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h4><p> 作用：选中鼠标悬停在元素上的状态，设置样式 </p><p>选择器语法：选择器:hover{css}</p><p>注意：伪类选择器选中的元素的某种状态</p><h4 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h4><p>作用：简写，快速生成代码 </p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353109.png"></p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353110.png"></p><p>首字母+具体指的形式生成CSS代码片段</p><h3 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h3><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p>属性名：background-color（bgc）</p><p>属性值：颜色取值：关键字，rgb表示法，rgba表示法，十六进制</p><p>注意点：背景颜色默认值是透明：rgba(0,0,0,0)，transparent</p><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>属性名：background-image（bgi）</p><p>属性值：background-image:url(‘图片路径’)；</p><p>注意：背景图片默认是水平和垂直方向平铺的</p><h4 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h4><p>属性名：background-repeat（bgr）</p><p>属性值：repeat：默认，水平垂直都平铺no-repeat：不平铺</p><p>repeat-x：水平方向（x轴）平铺repeat-y：垂直方向（y轴）平铺</p><h4 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h4><p>属性名：background-position（bgp）</p><p>属性值：background-position:水平方向 垂直方向;</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353111.png"></p><h4 id="背景相关属性连写"><a href="#背景相关属性连写" class="headerlink" title="背景相关属性连写"></a>背景相关属性连写</h4><p>属性名：background（bg）</p><p>属性值：单个属性值的合写，之间空格隔开</p><p>书写顺序：background：color image repeat position（顺序不限）</p><blockquote><p>注意：如果需要同时设置单独和连写形式</p><p>​   要么把单独的样式写在连写下面</p><p>​  要么把单独的样式写在连写的里面</p></blockquote><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>显示特点：独占一行</p><p>宽度默认是父元素的宽度，高度默认由内容撑开</p><p>可以设置宽高</p><blockquote><p>代表标签：div p h系列 ul li dl dt dd form header     nav footer……</p></blockquote><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>显示特点：一行可以显示多个</p><p>宽度和高度默认由内容撑开</p><p>不可以设置宽高</p><blockquote><p>代表标签：a span b u i s strong ins em del…….</p></blockquote><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>显示特点：一行可以显示多个</p><p>可以设置宽高</p><blockquote><p>代表标签：input textarea button select…..</p></blockquote><blockquote><p>特殊情况：img标签由行内块元素特点，但是Chrome调试工具显示inline</p></blockquote><h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>目的：改变元素默认的显示特点，让元素符号布局要求</p><p>语法：display: block转换成块级元素</p><p>​   display: inline-block转换成行内块元素</p><p>​   display: inline转换成行内元素</p><h4 id="HTML嵌套规范注意点"><a href="#HTML嵌套规范注意点" class="headerlink" title="HTML嵌套规范注意点"></a>HTML嵌套规范注意点</h4><p>块级元素嵌套：文本，块级元素，行内元素，行内块元素</p><p>但是：p标签中不要嵌套div，p，h等块级元素</p><p>a标签内部可以嵌套任意元素</p><p>但是：a标签不能嵌套a标签</p><h3 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h3><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><p>特性：子元素有默认继承父元素样式的特点</p><p>可以继承的常见属性</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353112.png"></p><blockquote><p>注意：可以通过调试工具判断样式是否可以继承</p></blockquote><blockquote><p>如果元素有浏览器默认样式，此时继承性依然存在，但是a标签的color会继承失效,h系列标签的font-size会继承失效</p></blockquote><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><p>特性：给同一个标签设置不同的样式——此时样式会层叠叠加——会共同作用在标签上</p><p>​给同一个标签设置相同的样式——此时样式会层叠覆盖——最终写在最后的样式会生效</p><blockquote><p>注意：当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p></blockquote><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>特性：不同选择器具有不同的优先级，优先级高的覆盖优先级低的选择器样式</p><p>优先级公式：继承&lt;通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important</p><blockquote><p>注意：!important写在属性值后面，分号前面</p><p>​!important不能提升继承的优先级，只要是继承优先级最低</p><p>​实际开发中不建议!important</p></blockquote><h5 id="权重叠加计算"><a href="#权重叠加计算" class="headerlink" title="权重叠加计算"></a>权重叠加计算</h5><p>场景：复合选择器，通过权重叠加计算方法，最终判断哪个选择器优先级最高会生效</p><h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><h4 id="盒子模型的介绍"><a href="#盒子模型的介绍" class="headerlink" title="盒子模型的介绍"></a>盒子模型的介绍</h4><p>概念：每一个标签，都可看做是一个“盒子”</p><p>CSS中规定每个盒子分别由：<strong>内容区域（content）、内边距区域（padding）、边框（border）、外边距区域（margin）</strong>构成</p><h4 id="内容的宽度和高度"><a href="#内容的宽度和高度" class="headerlink" title="内容的宽度和高度"></a>内容的宽度和高度</h4><p>属性：width &#x2F; height</p><p>取值：数字+px</p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>属性名：border</p><p>属性值：border: 10px solid red;   </p><p>实线：solid 虚线：dashed       点线：dotted</p><p>快捷键：bd + tab</p><h4 id="边框-单方向设置"><a href="#边框-单方向设置" class="headerlink" title="边框-单方向设置"></a>边框-单方向设置</h4><p>属性名：border-方向名</p><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><p>属性名：padding</p><p>属性值：padding:10px 10px 20px 20px;</p><h4 id="CSS盒模型（自动内减）"><a href="#CSS盒模型（自动内减）" class="headerlink" title="CSS盒模型（自动内减）"></a>CSS盒模型（自动内减）</h4><p>给盒子设置属性box-sizing: border-box;</p><p>会自动计算多余大小，自动在内容中减去</p><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><p>属性名：margin</p><p>属性值：margin:10px 10px 20px 20px;</p><h4 id="清楚默认内外边距"><a href="#清楚默认内外边距" class="headerlink" title="清楚默认内外边距"></a>清楚默认内外边距</h4><p>*{margin:0;     padding:0;}</p><h4 id="版心居中"><a href="#版心居中" class="headerlink" title="版心居中"></a>版心居中</h4><p>版心：网页的有效内容</p><p>属性名：margin: 0 auto;</p><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>场景：垂直布局的块级元素，上下的margin会合并</p><p>结果：最终两者距离为margin的最大值</p><p>解决：只给一个盒子设置margin</p><h4 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h4><p>场景：互相嵌套的块级元素，子元素的margin-top会作用在父元素上</p><p>结果：导致父元素一起往下移动</p><blockquote><p>解决方法：父元素设置border-top或者padding-top</p><p>父元素设置overflow: hidden</p><p>转换成行内块元素</p><p>设置浮动</p></blockquote><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><p>作用：根据元素在HTML中的结构关系查找元素</p><p>优势：减少对于HTML中类的依赖，有利于保持代码整洁</p><p>场景：常用语查找某父级选择器中的子元素</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353113.png"></p><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>元素：HTML设置的标签</p><p>伪元素：由CSS模拟出的标签效果</p><p>种类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: :before在父元素内容的最前添加一个伪元素</span><br><span class="line">: :after 在父元素内容的最后添加一个伪元素</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>必须设置content属性才能生效</p><p>伪元素默认是行内元素 </p></blockquote><h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>又称文档流，是浏览器在渲染显示页面内容时默认采用的一套排版规则，规定应该以何种方式排列元素</p><h4 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h4><h5 id="行内块问题"><a href="#行内块问题" class="headerlink" title="行内块问题"></a>行内块问题</h5><blockquote><p>注意：浏览器解析行内块或行内元素时，如果标签换行书写会产生一个空隙</p></blockquote><h5 id="浮动的作用"><a href="#浮动的作用" class="headerlink" title="浮动的作用"></a>浮动的作用</h5><p>早期：图文环绕</p><p>现在：网页布局</p><h5 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h5><p>浮动元素会脱离标准流，在标准流中不占位置</p><p>浮动 元素比标准流高半个级别，可以覆盖标准流中的元素</p><p>浮动找浮动，下一个浮动元素会在上一个浮动浓盐酸后面左右浮动</p><p>浮动元素有特殊的显示效果：一行可以显示多个 可以设置宽高</p><blockquote><p>注意：</p><p>浮动的元素不能通过text-align: center 或者margin: 0 auto</p><p>父级的宽度不够，子级会自动换行</p></blockquote><h5 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h5><blockquote><ol><li>浮动 &#x2F; display</li><li>盒子模型：margin border padding 宽度高度背景色</li><li>文字样式</li></ol></blockquote><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><p>含义：清除浮动带来的影响——子元素浮动了，此时子元素不能撑开标准流的块级父元素</p><p>原因：子元素浮动后脱标（<strong>父级没有高度</strong>）——不占位置</p><p>目的：需要父元素有高度，从而不影响其他网页元素的布局</p><h5 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h5><p>1.直接设置父元素高度</p><p>2.额外标签法</p><blockquote><p>1.在父元素内容的最后添加一个块级元素</p><p>2.给添加的块级元素设置clear : both</p><p>缺点：会在页面中添加额外的标签，会让页面的HTML结构变得复杂</p></blockquote><p>3.单伪元素清除法</p><blockquote><p>操作：用伪元素替代了额外标签</p><p>优点：项目中使用，直接给标签加类即可清除浮动</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本写法</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">补充写法</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.双伪元素清除法</p><blockquote><p>优点：项目中使用，直接给标签加类即可清除浮动</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> :: before,</span><br><span class="line">.clearfix :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> :: after</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.给父元素设置overflow : hidden</p><blockquote><p>操作：</p><p>直接给父元素设置overflow : hidden</p><p>优点：方便</p></blockquote><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="定位的基本介绍"><a href="#定位的基本介绍" class="headerlink" title="定位的基本介绍"></a>定位的基本介绍</h4><p>可以让元素自由的摆放在网页的任意位置</p><p>一般用于盒子之间层叠情况</p><h4 id="定位的基本使用"><a href="#定位的基本使用" class="headerlink" title="定位的基本使用"></a>定位的基本使用</h4><p>属性名：position</p><blockquote><p>相对定位：relative</p><p>绝对定位：absolute</p><p>固定定位：fixed</p></blockquote><h5 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: static;</span><br></pre></td></tr></table></figure><p>就是标准流，默认值</p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: relative;</span><br></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>不占位</p><blockquote><p>绝对定位的盒子显示模式具备行内块特点,加宽高生效，如果没有宽度也没有内容，盒子的尺寸就是0</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="attribute">position</span>: absolute;</span><br></pre></td></tr></table></figure><h5 id="子绝父相（子级绝对定位，父级相对定位）"><a href="#子绝父相（子级绝对定位，父级相对定位）" class="headerlink" title="子绝父相（子级绝对定位，父级相对定位）"></a>子绝父相（子级绝对定位，父级相对定位）</h5><blockquote><p>使用子绝父相，水平居中</p><p>绝对定位了不能使用margin: 0 auto;</p><p>居中：</p><p>left: 50%;</p><p>margin-left: 盒子宽度的一半;</p><p>top: 50%;</p><p>margin-top: 盒子高度的一半;</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">位移：自己宽度高度的一半</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>代码：position: fixed;</p><blockquote><p>特点：</p><p>需要配合方位属性实现移动</p><p>相对于浏览器可视区域进行移动</p><p>在页面不占位置——脱标</p></blockquote><h5 id="元素的层级关系"><a href="#元素的层级关系" class="headerlink" title="元素的层级关系"></a>元素的层级关系</h5><blockquote><p>不同布局方式元素的层级关系：</p><p>标准流&lt;浮动&lt;定位</p></blockquote><blockquote><p>不同定位之间的层级关系：</p><p>相对、绝对、固定默认层级相同</p><p>此时HTML中写在下面的元素层级更高，会覆盖上面的元素</p><p>z-index: ;</p></blockquote><h3 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h3><h4 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h4><p>属性名：vertical-align</p><p>先给父级加行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baseline        默认，基线对齐</span><br><span class="line"><span class="attribute">top</span>      顶部对齐</span><br><span class="line">middle      中部对齐</span><br><span class="line"><span class="attribute">bottom</span>     底部对齐</span><br></pre></td></tr></table></figure><h4 id="光标类型"><a href="#光标类型" class="headerlink" title="光标类型"></a>光标类型</h4><p>属性名：cursor</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default默认值，通常是箭头</span><br><span class="line">pointer小手效果，提示用户可以点击</span><br><span class="line">text工字型，提示用户可以选择文字</span><br><span class="line">move     十字光标，提示用户可以移动</span><br></pre></td></tr></table></figure><h4 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h4><p>属性名：border-radius</p><p>取值：数字+px、百分比</p><h4 id="overflow溢出部分显示效果"><a href="#overflow溢出部分显示效果" class="headerlink" title="overflow溢出部分显示效果"></a>overflow溢出部分显示效果</h4><p>属性名：overflow</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">visible默认值，溢出部分可见</span><br><span class="line">hidden    溢出部分隐藏</span><br><span class="line">scroll无论是否溢出，都显示滚动条</span><br><span class="line">auto     根据是否溢出，自动显示或隐藏滚动条</span><br></pre></td></tr></table></figure><h4 id="元素本身隐藏"><a href="#元素本身隐藏" class="headerlink" title="元素本身隐藏"></a>元素本身隐藏</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常见属性</span><br><span class="line"><span class="attribute">visibility</span>: hidden占位隐藏</span><br><span class="line">display: none</span><br></pre></td></tr></table></figure><h4 id="元素的整体透明度"><a href="#元素的整体透明度" class="headerlink" title="元素的整体透明度"></a>元素的整体透明度</h4><p>属性名：opacity</p><p>属性值：0~1之间的数字</p><h4 id="边框合并"><a href="#边框合并" class="headerlink" title="边框合并"></a>边框合并</h4><p>让相邻表格边框进行合并，得到细边框效果（给table标签）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><blockquote><p>1.设置一个盒子</p><p>2.设置四周不同颜色的边框</p><p>3.将盒子宽高设置为0，仅保留边框</p></blockquote><h4 id="焦点伪类选择器"><a href="#焦点伪类选择器" class="headerlink" title="焦点伪类选择器"></a>焦点伪类选择器</h4><p>常用于表单控件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> : focus</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>通过元素上的HTML属性来选择元素，常用于选择input标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E<span class="selector-attr">[attr]</span>选择具有attr属性的E元素</span><br><span class="line">E<span class="selector-attr">[attr=<span class="string">&quot;val&quot;</span>]</span>  选择具有attr属性并且属性值等于val的E元素</span><br></pre></td></tr></table></figure><h3 id="CSS样式补充"><a href="#CSS样式补充" class="headerlink" title="CSS样式补充"></a>CSS样式补充</h3><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>将多张小图片，合并成一张大图片</p><blockquote><p>1.创建一个盒子，设置盒子的尺寸和小图尺寸相同</p><p>2.将精灵图设置为盒子的背景图片</p><p>3.修改背景图位置（通过PxCook测量小图片左上角左边，分别取负值设置给盒子的background-position: x y）</p></blockquote><h4 id="背景图大小"><a href="#背景图大小" class="headerlink" title="背景图大小"></a>背景图大小</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background-size</span>: 宽度 高度 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>数字+px简单方便，常用</p><p>百分比   相对于盒子自身宽高的百分比</p><p>contain 包含，将背景图片等比例缩放，直到不会超出盒子的最大</p><p>cover 覆盖，将背景图片等笔试缩放，直到刚好填满整个盒子没有空白</p></blockquote><h4 id="background连写"><a href="#background连写" class="headerlink" title="background连写"></a>background连写</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background</span>: color image repeat position/size ;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>background-size和background连写同时设置，注意覆盖问题</p><p>解决</p><p>1.要么单独的样式写连写的下面</p><p>2.要么单独样式写在连写的里面</p></blockquote><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><p>属性名：box-shadow</p><blockquote><p>取值</p><p>h-shadow必须，水平偏移量。允许负值</p><p>v-shadow必须，垂直偏移量。允许负值</p><p>blur可选，模糊度</p><p>spread可选，阴影扩大</p><p>color  可选，阴影颜色</p><p>inset  可选，将阴影改为内部阴影</p></blockquote><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h4><p>属性名：transition</p><blockquote><p>取值</p><p>过渡的属性all:所有能过渡的属性都过渡、具体属性名：width——只有width过渡</p><p>过渡的时长数字+s（秒）</p></blockquote><h2 id="2D-amp-3D-转换与动画"><a href="#2D-amp-3D-转换与动画" class="headerlink" title="2D&amp;3D 转换与动画"></a>2D&amp;3D 转换与动画</h2><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>直接使用iconfont文件夹中的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont  你想要的字体图标的类名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="平面转换"><a href="#平面转换" class="headerlink" title="平面转换"></a>平面转换</h3><p>使用transform属性实现元素的位移、旋转、缩放等效果</p><h4 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h4><p>使用translate实现元素位移</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">父元素<span class="selector-pseudo">:hover</span>  子元素 &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(水平移动距离，垂直移动距离);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>取值（正负均可）</p><p>像素单位数值</p><p>百分比（盒子自身尺寸的百分比）</p></blockquote><blockquote><p>注意：X轴正向为右，Y轴正向为下</p></blockquote><blockquote><p>技巧</p><p>translate()如果只给出一个值，表示X轴方向移动距离</p><p>单独设置某个方向的移动距离：translateX()  &amp;  translateY()</p></blockquote><h4 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h4><p>使用translate快速实现绝对定位的元素居中效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p>使用rotate实现元素旋转效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">rotate</span>(角度);</span><br></pre></td></tr></table></figure><blockquote><p>注意：角度单位是deg</p><p>技巧：取值正负均可</p><p>正（顺时针）</p><p>负（逆时针）</p></blockquote><h4 id="转换原点"><a href="#转换原点" class="headerlink" title="转换原点"></a>转换原点</h4><p>使用transform-origin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">默认圆点是盒子中心点</span><br><span class="line"><span class="attribute">transform-origin</span>: 原点水平位置    原点垂直位置 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>方位名词（left、top、right、bottom、center）</p><p>像素单位数值</p><p>百分比（盒子自身尺寸）</p></blockquote><h4 id="多重转换"><a href="#多重转换" class="headerlink" title="多重转换"></a>多重转换</h4><p>使用transform复合属性实现多形态转换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span> : <span class="built_in">translate</span>()  <span class="built_in">rotate</span>() ;</span><br></pre></td></tr></table></figure><blockquote><p>注意：旋转不能放前面，旋转会改变坐标轴向</p><p>不能分开写，transform有层叠性</p></blockquote><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>使用scale改变元素的尺寸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span> : <span class="built_in">scale</span>(X轴缩放倍数, Y轴缩放倍数);</span><br></pre></td></tr></table></figure><blockquote><p>技巧</p><p>一般情况下，只为scale设置一个值，表示X轴和Y轴等比例缩放</p><p>transform: scale(缩放倍数);</p></blockquote><h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><p>使用background-image属性实现渐变背景效果</p><blockquote><p>渐变是多个颜色逐渐变化的视觉效果</p><p>一般用于设置盒子的背景</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">background-image</span> : linear-gradient (颜色<span class="number">1</span>，颜色<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="空间转换"><a href="#空间转换" class="headerlink" title="空间转换"></a>空间转换</h3><p>使用transform属性实现元素在空间的位移、旋转、缩放等效果</p><blockquote><p>空间：是从坐标轴角度定义的。x,y和z三条坐标轴构成了一个立体空间，z轴位置与视线方向相同</p><p>空间转换也叫3D转换</p></blockquote><h4 id="空间位移"><a href="#空间位移" class="headerlink" title="空间位移"></a>空间位移</h4><p>使用translate实现元素空间位移效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, z);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateZ</span>(值);</span><br></pre></td></tr></table></figure><blockquote><p>取值（正负均可）</p><p>像素单位数值</p><p>百分比</p></blockquote><h4 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h4><p>使用perspective属性实现透视效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码（添加给父级）</span><br><span class="line"><span class="attribute">perspective</span>: 值 ;</span><br></pre></td></tr></table></figure><blockquote><p>取值</p><p>像素单位数值，数值一般在800-1200</p></blockquote><h4 id="空间旋转"><a href="#空间旋转" class="headerlink" title="空间旋转"></a>空间旋转</h4><p>使用rotate实现元素空间旋转效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateX</span>(值);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(值);</span><br></pre></td></tr></table></figure><blockquote><p>左手法则</p><p>判断旋转方向：左手握住旋转轴，拇指指向正直方向，手指弯曲方向为旋转正直方向</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(x,y,z,角度度数)       用来设置自定义旋转轴的位置及旋转的角度</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>x，y，z取值为0-1之间的数字</p></blockquote><h4 id="立体呈现"><a href="#立体呈现" class="headerlink" title="立体呈现"></a>立体呈现</h4><p>使用transform-style: preserve-3d呈现立体图形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d ;父级元素添加</span><br></pre></td></tr></table></figure><blockquote><p>给子元素定位（子绝父相）</p><p>子元素设置位置（位移或旋转）</p></blockquote><h4 id="空间缩放"><a href="#空间缩放" class="headerlink" title="空间缩放"></a>空间缩放</h4><p>使用scale实现空间缩放效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x,y,z);</span><br></pre></td></tr></table></figure><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>使用animation添加动画效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义动画</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="number">0%</span>&#123;&#125;</span><br><span class="line">    <span class="number">10%</span>&#123;&#125;</span><br><span class="line">    <span class="number">15%</span>&#123;&#125;</span><br><span class="line">    <span class="number">100%</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用动画</span><br><span class="line"><span class="attribute">animation</span>: 动画名称    动画花费时长 ;</span><br></pre></td></tr></table></figure><h4 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h4><p>使用animation相关属性控制动画执行过程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line"><span class="attribute">animation</span>: 动画名称 动画时长 速度曲线 延迟时间 重复次数 动画方向 执行完毕时状态;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>动画名称和动画时长必须赋值</p><p>取值不分先后顺序</p><p>如果有2个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</p><p>反向  alternate</p><p>无限循环 infinite</p><p>重复3次播放steps(3)  </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">属性作用取值</span><br><span class="line"><span class="attribute">animation-name</span>动画名称</span><br><span class="line"><span class="attribute">animation-duration</span>   动画时长</span><br><span class="line"><span class="attribute">animation-delay</span>   延迟时间</span><br><span class="line"><span class="attribute">animation-fill-mode</span>    动画执行完毕时状态forwards:最后一帧状态</span><br><span class="line">      backwards:第一帧状态</span><br><span class="line">animation-timing-function     速度曲线 <span class="built_in">steps</span>(数字):逐帧动画</span><br><span class="line">animation-iteration-count      重复次数   infinite为无线循环</span><br><span class="line">animation-direction    动画执行方向    alternate为反向</span><br><span class="line">animation-play-state    暂停动画paused暂停，配合hover使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/posts/50736.html"/>
      <url>/posts/50736.html</url>
      
        <content type="html"><![CDATA[<h2 id="网页由什么组成"><a href="#网页由什么组成" class="headerlink" title="网页由什么组成"></a>网页由什么组成</h2><p>文字、图片、音频、视频、超链接</p><h2 id="网页的本质"><a href="#网页的本质" class="headerlink" title="网页的本质"></a>网页的本质</h2><p>前端程序员写的代码</p><h2 id="前端代码通过什么转换成我们眼中的页面"><a href="#前端代码通过什么转换成我们眼中的页面" class="headerlink" title="前端代码通过什么转换成我们眼中的页面"></a>前端代码通过什么转换成我们眼中的页面</h2><p>浏览器的解析和渲染</p><p>渲染引擎（浏览器内核）：浏览器中专门对代码进行解析渲染的部分</p><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353107.png"></p><p>渲染引擎（浏览器内核）不一样，导致解析相同代码的速度、性能、效果也不一样</p><p>推荐Google Chrome（谷歌浏览器）</p><h2 id="网页基础概念"><a href="#网页基础概念" class="headerlink" title="网页基础概念"></a>网页基础概念</h2><p>开发工具：VS Code Webstorm Sublime Dreamweaver Hbuilder</p><h2 id="HTML感知"><a href="#HTML感知" class="headerlink" title="HTML感知"></a>HTML感知</h2><p>HTML（超文本标记语言）</p><h2 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h2><p>html标签：网页整体</p><p>head标签：网页头部</p><p>body标签：网页身体</p><p>title标签：网页标题</p><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p>添加注释，方便下次看到时想起功能和含义</p><p>快捷键：Ctrl+&#x2F;</p><h2 id="HTML标签的构成"><a href="#HTML标签的构成" class="headerlink" title="HTML标签的构成"></a>HTML标签的构成</h2><p>双标签：由两部分组成，开始标签和结束标签，中间包裹内容</p><p>单标签：自成一体，无法包裹内容</p><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><h3 id="父子关系（嵌套关系）"><a href="#父子关系（嵌套关系）" class="headerlink" title="父子关系（嵌套关系）"></a>父子关系（嵌套关系）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟标签（并列标签）"><a href="#兄弟标签（并列标签）" class="headerlink" title="兄弟标签（并列标签）"></a>兄弟标签（并列标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML标签学习"><a href="#HTML标签学习" class="headerlink" title="HTML标签学习"></a>HTML标签学习</h2><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><p>h系列标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重要程度依次递减</p><p>特点：文字都有加粗，变大，h1-&gt;h6文字逐渐变小，独占一行</p><h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：段落之间存在间隙，独占一行</p><h4 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签，让文字强制换行</p><h4 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签，在页面中显示一条水平线</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>     <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span>   <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>     <span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>   <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h3><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换文本，图片加载失败时&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示文本，鼠标悬停时&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：单标签</p><h5 id="图片标签的width和height属性"><a href="#图片标签的width和height属性" class="headerlink" title="图片标签的width和height属性"></a>图片标签的width和height属性</h5><p>属性名：width（宽度）和heigh（高度）</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><h5 id="绝对路径："><a href="#绝对路径：" class="headerlink" title="绝对路径："></a>绝对路径：</h5><p>目录下的绝对位置，从盘符开始的路径</p><h5 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a>相对路径：</h5><p>从当前文件开始出发找目标文件的过程</p><h4 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音频路径&quot;</span> <span class="attr">controls</span>（显示音频的播放控件） <span class="attr">autoplay</span>（自动播放） <span class="attr">loop</span>（循环播放）&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频路径&quot;</span> <span class="attr">controls</span>（显示音频的播放控件） <span class="attr">autoplay</span>（自动播放，谷歌浏览器需配合<span class="attr">muted</span>实现静音播放） <span class="attr">loop</span>（循环播放） &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接标题"><a href="#链接标题" class="headerlink" title="链接标题"></a>链接标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标网页路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：双标签，点击之后跳转到指定页面</p><h4 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h4><p>_self：默认值，在当前窗口跳转</p><p>_blank：在新窗口跳转</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特点：列表前默认圆点标识</p><p>注意：ul标签中只允许包含li标签，li标签可包含任意内容</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><h4 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>      表格整体，可包裹多个tr</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  表格每行，可用于包裹td</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>        表格单元格，可用于包裹内容</span><br></pre></td></tr></table></figure><blockquote><p>标签的嵌套关系：table&gt;tr&gt;td</p></blockquote><h4 id="表格相关属性"><a href="#表格相关属性" class="headerlink" title="表格相关属性"></a>表格相关属性</h4><p>边框宽度：border</p><p>表格宽度：width</p><p>表格高度：height</p><h4 id="表格标题和表头单元格标签"><a href="#表格标题和表头单元格标签" class="headerlink" title="表格标题和表头单元格标签"></a>表格标题和表头单元格标签</h4><p>表格大标题：caption  默认在表格整体顶部居中显示</p><p>表格单元格：th     默认内部文字加粗并居中显示</p><p>caption标签书写在table标签内部</p><p>th标签书写在tr标签内部（用于替换td标签）</p><h4 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h4><p>表格头部：thead</p><p>表格主题：tbody</p><p>表格底部：tfoot</p><p>表格结构标签内部用于包裹tr标签</p><p>表格的结构标签可以省略</p><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>1.明确合并哪几个单元格</p><p>2.通过左上原则，确定保留谁删除谁</p><blockquote><p>上下合并：保留最上的，删除其他</p><p>左右合并：保留最左的，删除其他</p></blockquote><p>3.跨行合并：rowspan跨列合并：colspan</p><blockquote><p>只有同一个结构标签中的单元格才能合并，不能跨结构标签合并</p></blockquote><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h4><h5 id="type属性值"><a href="#type属性值" class="headerlink" title="type属性值"></a>type属性值</h5><p>text：文本框，用于输入单行文本</p><p>password：密码框，用于输入密码</p><p>radio：单选框，用于多选一</p><p>checkbox：多选框，用于多选多</p><p>file：文件选择，用于之后上传文件</p><p>submit：提交按钮，用于提交</p><p>reset：重置按钮，用于重置</p><p>button：普通按钮，默认无功能，之后配合js添加功能</p><h5 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h5><p>type属性值：text       password</p><p>placeholder：占位符，提示用户输入内容的文本</p><h5 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h5><p>type属性值：radio</p><p>name：分组，有相同name属性值的单选框为一组，一组中只有一个被选中</p><p>checked：默认选中</p><h5 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h5><p>type属性值：file</p><p>multiple：多文件选择</p><h5 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h5><p>submit：提交按钮。点击之后提交数据给后端服务器</p><p>reset：重置按钮。点击之后恢复表单默认值</p><p>button：普通按钮。 默认无功能，之后配合js添加功能</p><p>注意：</p><p>如果需要实现以上按钮功能，需要配合form标签使用</p><p>form使用方法：用form标签把表单标签一起包裹起来即可</p><p>value：按钮上的数字</p><h4 id="button按钮标签"><a href="#button按钮标签" class="headerlink" title="button按钮标签"></a>button按钮标签</h4><p>标签名：button</p><p>type属性值：</p><p>同input的三个按钮标签</p><p>buttonsubmitreset</p><h4 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h4><h5 id="标签组成"><a href="#标签组成" class="headerlink" title="标签组成"></a>标签组成</h5><p>selct标签：下拉菜单的整体</p><p>option标签：下拉菜单的每一项</p><h5 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h5><p>selected：下拉菜单的默认选中</p><h4 id="textarea文本域标签"><a href="#textarea文本域标签" class="headerlink" title="textarea文本域标签"></a>textarea文本域标签</h4><h5 id="标签名：textarea"><a href="#标签名：textarea" class="headerlink" title="标签名：textarea"></a>标签名：textarea</h5><h5 id="常见属性："><a href="#常见属性：" class="headerlink" title="常见属性："></a>常见属性：</h5><p>cols：规定了文本域内可见宽度</p><p>rows：规定了文本域内可见行数</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>右下角可以拖拽改变大小</p><p>实际开发时针对样式效果推荐用CSS</p><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><h5 id="场景：常用语绑定内容与表单标签的关系"><a href="#场景：常用语绑定内容与表单标签的关系" class="headerlink" title="场景：常用语绑定内容与表单标签的关系"></a>场景：常用语绑定内容与表单标签的关系</h5><h5 id="标签名：label"><a href="#标签名：label" class="headerlink" title="标签名：label"></a>标签名：label</h5><h5 id="使用方法1："><a href="#使用方法1：" class="headerlink" title="使用方法1："></a>使用方法1：</h5><p>1.使用label标签把内容包裹起来</p><p>2.在表单标签上添加id属性</p><p>3.在label标签的for属性中设置对应的id属性值</p><h5 id="使用方法2："><a href="#使用方法2：" class="headerlink" title="使用方法2："></a>使用方法2：</h5><p>1.直接使用label标签把内容和表单标签一起包裹</p><p>2.需要label标签的for属性删除即可</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><h4 id="没有语义的布局标签"><a href="#没有语义的布局标签" class="headerlink" title="没有语义的布局标签"></a>没有语义的布局标签</h4><p>div标签：一行只显示一个（独占一行）</p><p>span标签：一行可以显示多个</p><h4 id="有语义的布局标签（了解）"><a href="#有语义的布局标签（了解）" class="headerlink" title="有语义的布局标签（了解）"></a>有语义的布局标签（了解）</h4><p>场景：HTML5（手机端）</p><p>网页头部：header</p><p>网页导航：nav</p><p>网页底部：footer</p><p>网页侧边栏：aside</p><p>网页区块：section</p><p>网页文章：article</p><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p><img src="https://gcore.jsdelivr.net/gh/DouYingc/blogimage/img/202207041353108.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
