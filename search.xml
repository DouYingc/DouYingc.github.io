<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript Web Api</title>
      <link href="/2022/07/01/hello-world/"/>
      <url>/2022/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取DOM元素、修改属性"><a href="#获取DOM元素、修改属性" class="headerlink" title="获取DOM元素、修改属性"></a>获取DOM元素、修改属性</h2><h3 id="Web-API-基本认知"><a href="#Web-API-基本认知" class="headerlink" title="Web API 基本认知"></a>Web API 基本认知</h3><h4 id="作用和分类"><a href="#作用和分类" class="headerlink" title="作用和分类"></a>作用和分类</h4><p>作用：使用JS去操作HTML和浏览器</p><p>分类：DOM（文档对象模型）、BOM（浏览器对象模型）</p><h4 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h4><p>DOM（Document Object Model——文档对象模型） 是用来呈现以及与任意HTML或XML文档交互的API（DOM是浏览器提供的一套专门用来操作网页内容的功能）</p><h5 id="DOM作用"><a href="#DOM作用" class="headerlink" title="DOM作用"></a>DOM作用</h5><p>开发网页内容特效和实现用户交互</p><h4 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h4><p>将HTML以树状结构直观的表现出来，也称之为文档树</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>文档树直观的体现了标签与标签之间的关系</p><h4 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h4><p>浏览器根据HTML标签生成的JS对象</p><blockquote><p>所有的标签属性都可以在这个对象上面找到</p><p>修改这个对象的属性会自动映射到标签身上</p></blockquote><h5 id="DOM的核心思想"><a href="#DOM的核心思想" class="headerlink" title="DOM的核心思想"></a>DOM的核心思想</h5><p>把网页内容当做对象来处理</p><h5 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h5><p>是DOM里提供的一个对象，所以它提供的属性和方法都是用来访问和操作网页内容的</p><h3 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h3><h4 id="根据CSS选择器来获取DOM元素（重点）"><a href="#根据CSS选择器来获取DOM元素（重点）" class="headerlink" title="根据CSS选择器来获取DOM元素（重点）"></a>根据CSS选择器来获取DOM元素（重点）</h4><h5 id="选择匹配的第一个元素"><a href="#选择匹配的第一个元素" class="headerlink" title="选择匹配的第一个元素"></a>选择匹配的第一个元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数：包含一个或多个有效的CSS选择器 字符串</p><p>返回值：CSS选择器匹配的第一个元素，一个HTMLElement对象，如果没有匹配到，则返回null</p><h5 id="选择匹配的多个元素"><a href="#选择匹配的多个元素" class="headerlink" title="选择匹配的多个元素"></a>选择匹配的多个元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数：包含一个或多个有效的CSS选择器  字符串</p><p>返回值：CSS选择器匹配的NodeList 对象集合</p><blockquote><p>得到的是一个伪数组——有长度有索引号的数组</p><p>但是没有pop()、push()等数组方法</p><p>想要得到里面的每一个对象，则需要遍历（for）的方法获得</p></blockquote><h4 id="其他获取DOM元素方法"><a href="#其他获取DOM元素方法" class="headerlink" title="其他获取DOM元素方法"></a>其他获取DOM元素方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id获取一个元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)</span><br><span class="line"><span class="comment">//根据标签获取一类元素 获取页面所以div</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//根据类名获取元素获取页面所以类名为w的</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="设置-x2F-修改DOM元素内容"><a href="#设置-x2F-修改DOM元素内容" class="headerlink" title="设置&#x2F;修改DOM元素内容"></a>设置&#x2F;修改DOM元素内容</h3><h4 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h4><p>只能将文本内容追加到</body>前面的位置</p><p>文本中包含的标签会被解析</p><h4 id="元素innerText属性"><a href="#元素innerText属性" class="headerlink" title="元素innerText属性"></a>元素innerText属性</h4><p>将文本内容添加&#x2F;更新到任意标签位置</p><p>文本中包含的标签不会被解析</p><h4 id="元素-innerHTML属性"><a href="#元素-innerHTML属性" class="headerlink" title="元素.innerHTML属性"></a>元素.innerHTML属性</h4><p>将文本内容添加&#x2F;更新到任意标签位置</p><p>文本中包含的标签会被解析</p><h3 id="设置-x2F-修改DOM元素属性"><a href="#设置-x2F-修改DOM元素属性" class="headerlink" title="设置&#x2F;修改DOM元素属性"></a>设置&#x2F;修改DOM元素属性</h3><h4 id="设置-x2F-修改-元素常用属性"><a href="#设置-x2F-修改-元素常用属性" class="headerlink" title="设置&#x2F;修改 元素常用属性"></a>设置&#x2F;修改 元素常用属性</h4><p>可以通过JS设置&#x2F;修改标签元素属性，比如通过src更换图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">对象.属性 = 值</span><br></pre></td></tr></table></figure><h4 id="设置-x2F-修改-元素样式属性"><a href="#设置-x2F-修改-元素样式属性" class="headerlink" title="设置&#x2F;修改 元素样式属性"></a>设置&#x2F;修改 元素样式属性</h4><p>可以通过JS设置&#x2F;修改标签样式属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>学习路径</p><p>通过style属性操作CSS</p><p>操作类名（className）操作CSS</p><p>通过classList操作类控制CSS</p></blockquote><h5 id="通过style属性操作CSS"><a href="#通过style属性操作CSS" class="headerlink" title="通过style属性操作CSS"></a>通过style属性操作CSS</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">对象.<span class="property">style</span>.样式属性 = 值</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>如果有-连接符，需要转换为小驼峰命名法</p><p>不要忘了CSS单位</p></blockquote><h5 id="操作类名（className）操作CSS"><a href="#操作类名（className）操作CSS" class="headerlink" title="操作类名（className）操作CSS"></a>操作类名（className）操作CSS</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="comment">//active是一个CSS类名</span></span><br><span class="line">元素.<span class="property">className</span> = <span class="string">&#x27;active&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>className是使用新值换旧值，如果要添加新类，需要保留旧的</p></blockquote><h5 id="操作classList操作类控制CSS"><a href="#操作classList操作类控制CSS" class="headerlink" title="操作classList操作类控制CSS"></a>操作classList操作类控制CSS</h5><p>为了解决className容易覆盖以前的类名，可以通过classList方式追加和删除类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//追加一个类</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//删除一个类</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//切换一个类</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="设置-x2F-修改-表单属性"><a href="#设置-x2F-修改-表单属性" class="headerlink" title="设置&#x2F;修改 表单属性"></a>设置&#x2F;修改 表单属性</h4><p>获取：DOM对象.属性名</p><p>设置：DOM对象.属性名 &#x3D; 新值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">表单.<span class="property">value</span> = <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">表单.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>disabled 禁用状态</p><p>checked勾选</p><p>selected下拉</p></blockquote><h3 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>使用定时器重复执行代码，定时器函数可以开启和关闭定时器</p><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="built_in">setInterval</span>(函数, 间隔时间)</span><br></pre></td></tr></table></figure><blockquote><p>作用：每隔一段时间调用这个函数，单位是毫秒</p></blockquote><h5 id="结束定时器"><a href="#结束定时器" class="headerlink" title="结束定时器"></a>结束定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="built_in">clearInterval</span>(定时器的名字)</span><br></pre></td></tr></table></figure><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件是在编程时系统内发生的动作或者发生的事情</p><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><p>让程序检测是否有事件发生，一旦有事件触发，就立即调用一个函数做出响应，也称之为注册事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>, 要执行的函数)</span><br></pre></td></tr></table></figure><blockquote><p>事件监听三要素</p><p>事件源：那个dom元素被事件触发了，要获取dom元素</p><p>事件：用什么方式触发，比如鼠标单机click、鼠标经过mouseover等</p><p>事件调用的函数：要做什么事</p></blockquote><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><h5 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h5><blockquote><p>鼠标触发：</p><p>click鼠标点击</p><p>mouseenter鼠标经过</p><p>mouseleave鼠标离开</p></blockquote><h5 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h5><blockquote><p>表单获得光标：</p><p>focus获得焦点</p><p>blur失去焦点</p></blockquote><h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><blockquote><p>键盘触发：</p><p>Keydown键盘按下触发</p><p>Keyup键盘抬起触发</p></blockquote><h5 id="文本事件"><a href="#文本事件" class="headerlink" title="文本事件"></a>文本事件</h5><blockquote><p>表单输入触发：</p><p>input用户输入事件</p></blockquote><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数可以被简单理解为函数的高级应用，JavaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高 级应用。</p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><p>函数表达式和普通函数并无本质上区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">counter</span>(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>如果将函数A作为参数传递给函数B时，我们称函数A为回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fn传递给了setInterval，fn就是回调函数</span></span><br><span class="line"><span class="built_in">setInterval</span>(fn, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>事件也是回调函数</p></blockquote><h3 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h3><p>环境对象指的是函数内部特殊的变量this，它代表着当前函数运行所处的环境</p><blockquote><p>作用</p><p>弄清楚this的指向，使代码更简洁</p><p>谁调用，this就是谁——是判断this指向的粗略规则</p></blockquote><h3 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h3><h4 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h4><p>当前元素为A状态，其他元素为B状态</p><blockquote><p>干掉所有人——使用for循环</p><p>复活他自己——通过this或者下标找到自己或者对应的元素</p></blockquote><h2 id="节点基本操作"><a href="#节点基本操作" class="headerlink" title="节点基本操作"></a>节点基本操作</h2><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><h4 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h4><p>DOM树里的每一个内容都称之为节点</p><h5 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h5><h6 id="元素节点（重点）"><a href="#元素节点（重点）" class="headerlink" title="元素节点（重点）"></a>元素节点（重点）</h6><p>所有的标签，比如body、div</p><p>html是根节点</p><h6 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h6><p>所有的属性，比如href</p><h6 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h6><p>所有的文本</p><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><h5 id="父节点查找"><a href="#父节点查找" class="headerlink" title="父节点查找"></a>父节点查找</h5><p>parentNode属性——返回最近一级的父节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子元素.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure><h5 id="子节点查找"><a href="#子节点查找" class="headerlink" title="子节点查找"></a>子节点查找</h5><p>childNodes——获得所有子节点，包括文本节点（空格、换行）、注释节点等</p><p>children（重点）——仅获得所有元素节点，返回的还是一个伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="property">children</span></span><br></pre></td></tr></table></figure><h5 id="兄弟节点查找"><a href="#兄弟节点查找" class="headerlink" title="兄弟节点查找"></a>兄弟节点查找</h5><p>下一个兄弟节点——nextElementSibling属性</p><p>上一个兄弟节点——previousElementSibling属性</p><h4 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h4><blockquote><p>一般情况下，我们新增节点，操作如下</p><p>1.创建一个新的节点</p><p>2.把创建的新的节点放入指定的元素内部</p></blockquote><h5 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法</span><br><span class="line"><span class="comment">//创造一个新的元素节点</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="追加节点"><a href="#追加节点" class="headerlink" title="追加节点"></a>追加节点</h5><p>插入到父元素的最后一个子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">appendChild</span>(要插入的元素)</span><br></pre></td></tr></table></figure><p>插入到父元素中某个子元素的前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">insertBefore</span>(要插入的元素, 在哪个元素前面)</span><br></pre></td></tr></table></figure><h5 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">cloneNode</span>(布尔值)</span><br></pre></td></tr></table></figure><blockquote><p>cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值</p><p>如果为true，则代表克隆时会包含后代节点一起克隆</p><p>如果为false，则代表克隆时不包含后代节点</p><p>默认为false</p></blockquote><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>在JavaScript原生DOM操作中，要删除元素必须通过<strong>父元素删除</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">removeChild</span>(要删除的元素)</span><br></pre></td></tr></table></figure><blockquote><p>如果不存在父子关系则删除不成功</p><p>删除节点和隐藏节点（display:none）有区别：</p><p>隐藏节点还是存在的，但是删除，则从HTML中删除节点</p></blockquote><h3 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h3><p>用来表示时间的对象</p><blockquote><p>作用：可以得到当前系统时间</p></blockquote><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>在代码中发现了new关键字，一般将这个操作称为实例化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>( )</span><br><span class="line"><span class="comment">//获得指定时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2002-7-20&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>系统时间</p><p>new Date().toLocaleString()</p></blockquote><h4 id="时间对象方法"><a href="#时间对象方法" class="headerlink" title="时间对象方法"></a>时间对象方法</h4><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220529003929379.png" alt="image-20220529003929379"></p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>是指1970年01月01日00时00分00秒起至现在的毫秒数，它是一种特殊的计量时间的方式</p><h5 id="使用getTime"><a href="#使用getTime" class="headerlink" title="使用getTime()"></a>使用getTime()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//获取时间戳</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br></pre></td></tr></table></figure><h5 id="简写-new-Date"><a href="#简写-new-Date" class="headerlink" title="简写 +new Date()"></a>简写 +new Date()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br></pre></td></tr></table></figure><h5 id="使用-Date-now"><a href="#使用-Date-now" class="headerlink" title="使用 Date.now()"></a>使用 Date.now()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br></pre></td></tr></table></figure><blockquote><p>无需实例化，但是只能得到当前的时间戳， 而前面两种可以返回指定时间的时间戳</p></blockquote><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><blockquote><p>重绘不一定引起回流，回流一定会引起重绘</p></blockquote><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>根据计算和获取的信息进行整个页面的绘制</p><p>由于节点（元素）的样式的改变并不影响它在文档流中的位置和文档布局时（比如：color、background-color、outline等）</p><h4 id="回流（重排）"><a href="#回流（重排）" class="headerlink" title="回流（重排）"></a>回流（重排）</h4><p>根据生成的渲染树，得到节点的几何信息（位置，大小）</p><p>当Render Tree中部分或者全部元素的尺寸、结构、布局发生改变时，浏览器就会重新渲染部分或全部文档的过程</p><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220529141750563.png" alt="image-20220529141750563"></p><h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="获取事件对象"><a href="#获取事件对象" class="headerlink" title="获取事件对象"></a>获取事件对象</h4><p>这个对象里有事件触发时的相关信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="comment">//e就是事件对象</span></span><br><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在事件绑定的回调函数的第一个参数就是事件对象</p><p>一般命名为event、ev、e</p></blockquote><h4 id="事件对象常用属性"><a href="#事件对象常用属性" class="headerlink" title="事件对象常用属性"></a>事件对象常用属性</h4><blockquote><p>type——获取当前的事件类型</p><p>clientX&#x2F;cilentY——获取光标相对于浏览器可见窗口左上角的位置</p><p>offsetX&#x2F;offsetY——获取光标相对于当前DOM元素左上角的位置</p><p>pageX&#x2F;pageY——不会受页面窗口控制</p><p>key——用户按下键盘键的值——现在不提倡使用keyCode </p></blockquote><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件流指的是事件完整执行过程中的流动路径</p><h4 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h4><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><p>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。</p><blockquote><p>简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的同名事件</p></blockquote><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220529224957250.png" alt="image-20220529224957250"></p><h5 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h5><p>从DOM的根元素开始去执行对应的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="title function_">addEventListener</span>(事件类型, 事件处理函数, 是否使用捕获机制)</span><br></pre></td></tr></table></figure><blockquote><p>事件捕获需要写对应的代码才能看到效果</p><p>addEventListener第三个参数传入true代表是捕获阶段触发（很少使用）</p><p>若传入false代表冒泡阶段触发，默认是false</p></blockquote><h4 id="阻止事件流动"><a href="#阻止事件流动" class="headerlink" title="阻止事件流动"></a>阻止事件流动</h4><blockquote><p>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</p><p>若想把事件就限制在当前元素内，就需要阻止事件流动</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">事件对象.<span class="title function_">stopPropagation</span>()</span><br></pre></td></tr></table></figure><blockquote><p>鼠标经过事件：</p><p>mouseover和mouseout会有冒泡效果</p><p>mouseenter和mouseleave没有冒泡效果（推荐）</p></blockquote><p>阻止默认行为，比如链接点击不跳转，表单域的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">e.<span class="title function_">preventDefault</span>()</span><br></pre></td></tr></table></figure><blockquote><p>两种注册事件的区别：</p><p>传统on注册（L0）</p><p>同一个对象,后面注册的事件会覆盖前面注册(同一个事件)</p><p>直接使用null覆盖偶就可以实现事件的解绑</p><p>都是冒泡阶段执行的</p><p>事件监听注册（L2）</p><p>语法: addEventListener(事件类型, 事件处理函数, 是否使用捕获)</p><p>后面注册的事件不会覆盖前面注册的事件(同一个事件)</p><p>可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p><p>必须使用removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</p><p>匿名函数无法被解绑</p></blockquote><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>利用事件流的特征解决一些开发需求的知识技巧</p><blockquote><p><strong>优点：</strong>给父级元素加事件（可以提高性能）</p><p><strong>原理：</strong>事件委托其实是利用事件冒泡的特点， 给父元素添加事件，子元素可以触发</p><p><strong>实现：</strong>事件对象.target 可以获得真正触发事件的元素</p></blockquote><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220529232002122.png" alt="image-20220529232002122"></p><h2 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h2><h3 id="滚动事件和加载事件"><a href="#滚动事件和加载事件" class="headerlink" title="滚动事件和加载事件"></a>滚动事件和加载事件</h3><h4 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h4><p>当页面进行滚动时触发的事件</p><p>事件名：scroll</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听整个页面滚动</span></span><br><span class="line"><span class="comment">//页面滚动事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>监听某个元素的内部滚动直接给某个元素添加</p></blockquote><h4 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h4><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p><p>事件名：load</p><blockquote><p>当初始的HTML文档被完全加载和解析完成后，DOMContentLoaded 事件被触发，而无需等待样式表</p></blockquote><p>事件名：DOMContentLoaded</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//执行操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="元素大小和位置"><a href="#元素大小和位置" class="headerlink" title="元素大小和位置"></a>元素大小和位置</h3><h4 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h4><p>获取宽高：</p><p>​获取元素的内容总宽高（不包含滚动条）返回值不带单位</p><p>​scrollWidth和scrollHeight</p><p>获取位置：</p><p>​获取元素内容往左、往上滚出去看不到的距离</p><p>​scrollLeft和scrollTop</p><p>​这两个属性是可以修改的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开发中，检测页面滚动的距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面滚动事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//document.documentElement.scrollTop获得当前页面被卷去的头部</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="offset家族"><a href="#offset家族" class="headerlink" title="offset家族"></a>offset家族</h4><p>获取宽高：</p><p>​获得元素的自身宽高、包含元素自身设置的宽高、padding、border</p><p>​offsetWidht和offsetHeight</p><p>获取位置：</p><p>​获取元素距离自己定级父级元素的左、上距离</p><p>​offsetLeft和offsetTop是只读属性，无法修改</p><h4 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h4><p>获取宽度：</p><p>​获取元素的可见部分宽高（不包含边框、滚动条等）</p><p>​clientWidth和clientHeight</p><p>获取位置：</p><p>​获取左边框和上边框的宽度</p><p>​clientLeft和clientTop只读属性，不可修改</p><p>会在窗口尺寸改变的时候触发事件</p><p>​resize</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//执行的代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h3 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h3><p>window 是浏览器内置中的全局对象，我们所学习的所有 Web APIs 的知识内容都是基于 window 对象实现的</p><p>window 对象下包含了 navigator、location、document、history、screen 5个属性，即所谓的 BOM （浏览器对象模 型）</p><blockquote><p>document 是实现 DOM 的基础，它其实是依附于 window 的属性。</p><p>注：依附于 window 对象的所有属性和方法，使用时可以省略 window</p></blockquote><h3 id="定时器-延时函数"><a href="#定时器-延时函数" class="headerlink" title="定时器-延时函数"></a>定时器-延时函数</h3><p>JavaScript内置的一个用来让代码延迟执行的函数，叫setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="built_in">setTimeout</span>(回调函数, 等待的毫秒数)</span><br></pre></td></tr></table></figure><blockquote><p>setTimeout仅仅执行一次</p></blockquote><p>结合递归函数可以使用setTimeout实现setInterval一样的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用递归函数 模拟了 setInterval</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(fn, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>setInterval的特征是重复执行，首次执行会延时</p><p>setTimeout的特征是延时执行，只执行1次</p></blockquote><h3 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h3><blockquote><p>流程</p><p>1.先执行执行栈中的同步任务</p><p>2.异步任务放入任务队列中</p><p>3.一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务 结束等待</p><p>状态，进入执行栈，开始执行。</p></blockquote><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220531231703016.png" alt="image-20220531231703016"></p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h4 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h4><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。</p><p>单线程意味着，所有任务需要排队，前一个任务结束，才会执行下一个任务</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</p><h4 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h4><p>同步任务都在主线程上执行，形成一个执行栈</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>前一个任务执行的时候正在做其他的任务。</p><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><p>JS的异步是通过回调函数实现的</p><blockquote><p>三种类型：</p><p>普通事件，如click、resize等</p><p>资源加载，如load、error等</p><p>定时器，包括setInterval、setTimeout等</p></blockquote><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location的数据类型是对象，它拆分并保存了URL地址的各个组成部分</p><blockquote><p>常用属性和方法：</p><p>href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//可以得到当前文件的URL地址</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)</span><br><span class="line">&gt;<span class="comment">//可以通过js方式跳转到目标地址</span></span><br><span class="line">&gt;location.<span class="property">href</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br></pre></td></tr></table></figure><p>search 属性获取地址中携带的参数，符号 ？后面部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)</span><br></pre></td></tr></table></figure><p>hash 属性获取地址中的啥希值，符号 # 后面部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span><br></pre></td></tr></table></figure><p>后期vue路由的铺垫，经常用于不刷新页面，显示不同页面，比如网易云音乐</p><p>reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</p></blockquote><h3 id="navigation对象"><a href="#navigation对象" class="headerlink" title="navigation对象"></a>navigation对象</h3><p>navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</p><blockquote><p>常用属性和方法：</p><p>通过 userAgent 检测浏览器的版本及平台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 检测 userAgent（浏览器信息）</span></span><br><span class="line">&gt;!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&gt;<span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line">&gt;<span class="comment">// 验证是否为Android或iPhone</span></span><br><span class="line">&gt;<span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line">&gt;<span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line">&gt;<span class="comment">// 如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line">&gt;<span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">&gt;location.<span class="property">href</span> = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&#125;)()</span><br></pre></td></tr></table></figure></blockquote><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p><blockquote><p>back()可以后退功能</p><p>forward()前进功能</p><p>go(参数)前进后退功能 参数如果是1，就前进1个页面，如果是-1，就后退一个页面</p></blockquote><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><blockquote><p>容量较大，sessionStorage和localStorage约5M左右</p><p>优点：设置、读取方便、甚至页面刷新不丢失数据</p></blockquote><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><blockquote><p>生命周期永久生效，除非手动删除，否则关闭页面也会存在</p><p>可以多窗口（页面）共享</p><p>以键值对的形式存储使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存储数据：</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br><span class="line">获取数据：</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">删除数据：</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><h4 id="存储复杂数据类型"><a href="#存储复杂数据类型" class="headerlink" title="存储复杂数据类型"></a>存储复杂数据类型</h4><p>本地只能存储字符串，无法存储复杂数据类型，需要将复杂数据类型转换成JSON字符串，在存储到本地</p><h4 id="JSON-stringify-复杂数据类型"><a href="#JSON-stringify-复杂数据类型" class="headerlink" title="JSON.stringify(复杂数据类型)"></a>JSON.stringify(复杂数据类型)</h4><p>将复杂数据转换成JSON字符串存储本地存储中</p><h4 id="JSON-parse-JSON字符串"><a href="#JSON-parse-JSON字符串" class="headerlink" title="JSON.parse(JSON字符串)"></a>JSON.parse(JSON字符串)</h4><p>将JSON字符串转换成对象取出时候使用</p><blockquote><p>先读取，再添加，再存储，最后渲染</p></blockquote><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API </p><blockquote><p>getAttribute(‘属性名’) &#x2F;&#x2F; 获取自定义属性 </p><p>setAttribute(‘属性名’, ‘属性值’) &#x2F;&#x2F; 设置自定义属性 </p><p>removeAttribute(‘属性名’) &#x2F;&#x2F; 删除自定义属性</p></blockquote><blockquote><p>data-自定义属性:  </p><p>传统的自定义属性没有专门的定义规则,开发者随意定值,不够规范,所以在html5中推出来了专门的data-自定义属性 在 标签上一律以data-开头 </p><p>在DOM对象上一律以dataset对象方式获取</p></blockquote><blockquote><p>固有属性：</p><p>标签天生自带的属性 比如class id title等, 可以直接使用点语法操作</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是用于匹配字符串中字符组合的模式</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="定义表达式"><a href="#定义表达式" class="headerlink" title="定义表达式"></a>定义表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure><blockquote><p>&#x2F; &#x2F;是正则表达式字面量</p></blockquote><h4 id="判断是否有符合规则的字符串"><a href="#判断是否有符合规则的字符串" class="headerlink" title="判断是否有符合规则的字符串"></a>判断是否有符合规则的字符串</h4><p>test()方法用来查看正则表达式与指定的字符串是否匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regObj.<span class="title function_">test</span>(被检测的字符串)</span><br></pre></td></tr></table></figure><blockquote><p>如果正则表达式与指定的字符串匹配，则返回true，否则false</p></blockquote><h4 id="检索（查找）符合规则的字符串"><a href="#检索（查找）符合规则的字符串" class="headerlink" title="检索（查找）符合规则的字符串"></a>检索（查找）符合规则的字符串</h4><p>exec()方法在一个指定的字符串中执行一个搜索匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regObj.<span class="title function_">exec</span>(被检测的字符串)</span><br></pre></td></tr></table></figure><blockquote><p>如果匹配成功，exec()方法返回一个数组，否则返回null</p></blockquote><h3 id="元字符（特殊字符）"><a href="#元字符（特殊字符）" class="headerlink" title="元字符（特殊字符）"></a>元字符（特殊字符）</h3><p>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能</p><h4 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h4><p>用来提示字符所处的位置，主要有两个字符，表示位置，开头和结尾，必须用什么开头，用什么结尾</p><blockquote><p>^表示匹配行首的文本（以谁开始）</p><p>$表示匹配行尾的文本（以谁结束）</p><p>如果^和$在一起，表示必须是精确匹配（只有两者之间的才为true）</p></blockquote><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>用来设定某个模式出现的次数</p><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220605230026256.png" alt="image-20220605230026256"></p><blockquote><p>逗号左右两侧不能出现空格</p></blockquote><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><h5 id="匹配字符集合"><a href="#匹配字符集合" class="headerlink" title="[ ]匹配字符集合"></a>[ ]匹配字符集合</h5><p>后面的字符串只要包含abc中的任意一个字符，都返回true</p><p>使用连字符 - 表示一个范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^[a-z]$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>[ ]里面加上^取反符号</p><blockquote><p>取反，除了括号里面的</p></blockquote><p>.匹配除换行符之外的任何单个字符</p><h5 id="预定义"><a href="#预定义" class="headerlink" title="预定义"></a>预定义</h5><p>某些常见模式的简写方式</p><p><img src="C:\Users\Sasha\AppData\Roaming\Typora\typora-user-images\image-20220606154817214.png" alt="image-20220606154817214"></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符约束正则执行的某些细节行为，如是否区分大小写，是否支持多行匹配等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/表达式/修饰符</span><br></pre></td></tr></table></figure><blockquote><p>i是单词ignore的缩写，正则匹配时字母不区分大小写</p><p>g是单词global的缩写，匹配所有满足正则表达式的结果</p></blockquote><h4 id="替换replace替换"><a href="#替换replace替换" class="headerlink" title="替换replace替换"></a>替换replace替换</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(<span class="regexp">/正则表达式/</span>, <span class="string">&#x27;替换的文本&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
